<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>正则表达式</title>
      <link href="/2025/02/23/%E6%AD%A3%E5%88%99/"/>
      <url>/2025/02/23/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>re全称：Regular Expression，正则表达式,一种使用表达式的方式对字符串进行匹配的语法规则.</p><p>我们抓取到的网页源代码本质上就是一个超长的字符串,想从里面提取内容,用正则再合适不过了.</p><ul><li>正则优点：速度块，效率高，准确性高</li><li>正则缺点：新手上手难度高</li></ul><p>不过只要掌握了正则编写的逻辑关系，写出一个提取页面内容的正则其实并不复杂</p><p>元字符：具有固定含义的特殊符号</p><p>常用元字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.      匹配除换行符以外的任意字符, 除了\n 匹配不到</span><br><span class="line">\w     匹配字母或数字或下划线 ,不要下划线 [a-zA-Z0-9]</span><br><span class="line">\s     匹配任意的空白符</span><br><span class="line">\d     匹配数字</span><br><span class="line">\n     匹配一个换行符</span><br><span class="line">\t     匹配一个制表符</span><br><span class="line"></span><br><span class="line">^      匹配字符串的开始</span><br><span class="line">$      匹配字符串的结尾</span><br><span class="line"></span><br><span class="line">\W     匹配非字符或数字或下划线</span><br><span class="line">\D     匹配非数字</span><br><span class="line">\S     匹配非空白符</span><br><span class="line">a|b    匹配字符a或字符b</span><br><span class="line">()     匹配括号内的表达式,也表示一个组</span><br><span class="line">[...]  匹配字符组中的字符</span><br><span class="line">[^...] 匹配除了字符组中字符的所以字符 (非)</span><br></pre></td></tr></table></figure><p>量词：控制前面的元字符出现次数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*       重复零次或更多次</span><br><span class="line">+       重复一次或更多</span><br><span class="line">?       重复零次或一次</span><br><span class="line">&#123;n&#125;     重复n次</span><br><span class="line">&#123;n,&#125;    重复n次或更多次</span><br><span class="line">&#123;n,m&#125;   重复n到m次</span><br></pre></td></tr></table></figure><p>贪婪匹配和惰性匹配</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.*      贪婪匹配</span><br><span class="line">.*?     惰性匹配</span><br></pre></td></tr></table></figure><p>爬虫用的最多的就是惰性匹配</p><p>案例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str: 玩吃鸡游戏,晚上一起上游戏,干嘛呢?打游戏啊</span><br><span class="line">reg: 玩.*?游戏</span><br><span class="line">匹配的是: 玩吃鸡游戏</span><br><span class="line"></span><br><span class="line">reg: 玩.*游戏</span><br><span class="line">此时匹配的是: 玩吃鸡游戏,晚上一起上游戏,干嘛呢?打游戏</span><br></pre></td></tr></table></figure><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><ol><li><p>findall 查找所有，返回list</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lst = re.findall(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;mai le fo len, mai ni mei!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [&#x27;m&#x27;, &#x27;m&#x27;, &#x27;m&#x27;]</span></span><br><span class="line">lst = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;5点之前,你要给我500万&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [&#x27;5&#x27;, &#x27;500&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>search 会进行匹配，但如果匹配到了第一个结果。就会返回这个结果，如果匹配不上search返回的则是 None</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ret = re.search(<span class="string">r&#x27;\d&#x27;</span>, <span class="string">&#x27;5点之前,你要给我500万&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></li><li><p>match 只能从字符串的开头进行匹配</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>).group()</span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># a</span></span><br></pre></td></tr></table></figure></li><li><p>finditer 和 findall 差不多，只不过这时返回的是迭代器（重点）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">it = re.finditer(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;mai le fo len, mai ni mei!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> el <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(el.group())  <span class="comment"># 依然需要分组</span></span><br></pre></td></tr></table></figure></li><li><p>compile  可以将一个长长的正则进行预加载. 方便以后使用</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\&#123;3&#125;&#x27;</span>)  <span class="comment"># 将正则表达式编译成为一个正则对象，规定要匹配的3个数字</span></span><br><span class="line">ret = obj.search(<span class="string">&#x27;abc123eee&#x27;</span>)  <span class="comment"># 正则表达式对象调用search，参数为待匹配字符串</span></span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure></li><li><p>正则中的内容如何单独提取?</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python50道练习题</title>
      <link href="/2025/02/23/Python50%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2025/02/23/Python50%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Python50道练习题"><a href="#Python50道练习题" class="headerlink" title="Python50道练习题"></a>Python50道练习题</h1><h3 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">20</span></span><br><span class="line">num2 = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">result = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="2、一百以内的偶数"><a href="#2、一百以内的偶数" class="headerlink" title="2、一百以内的偶数"></a>2、一百以内的偶数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        list1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="3、一百以内的奇数"><a href="#3、一百以内的奇数" class="headerlink" title="3、一百以内的奇数"></a>3、一百以内的奇数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        list1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">list2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">list3 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h3 id="4、判断素数"><a href="#4、判断素数" class="headerlink" title="4、判断素数"></a>4、判断素数</h3><p>编写程序，判断某一个数是否为素数。所谓素数指的是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">37</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,a):  <span class="comment"># 注意range 是左闭右开</span></span><br><span class="line">    <span class="keyword">if</span> a % i == <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 一旦判断成功后，后面就没必要继续了</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a不是素数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a是素数&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5、求阶乘"><a href="#5、求阶乘" class="headerlink" title="5、求阶乘"></a>5、求阶乘</h3><p>编写程序，求出某个自然数的阶乘。一个正整数的阶乘是所有小于及等于该数的正整数的积，并且0的阶乘为1。自然数n的阶乘写作n!</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> a == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阶乘为: 1&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,a+<span class="number">1</span>): <span class="comment"># 包括本身</span></span><br><span class="line">        <span class="built_in">sum</span> *= i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阶乘为:&#x27;</span>,<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * fun(x - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun(a))</span><br><span class="line"><span class="comment"># 方法三 math.factorial()</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.factorial(a))</span><br></pre></td></tr></table></figure><h3 id="6、求圆的周长"><a href="#6、求圆的周长" class="headerlink" title="6、求圆的周长"></a>6、求圆的周长</h3><p>程序编写：输入半径，求出圆的周长</p><p>圆的周长：<code>2πr</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径：&#x27;</span>))</span><br><span class="line">girth = <span class="number">2</span> * r * math.pi</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;周长是&#x27;</span>,<span class="built_in">round</span>(girth,<span class="number">2</span>))  <span class="comment"># round 保留两位小数</span></span><br></pre></td></tr></table></figure><h3 id="7、求圆的面积"><a href="#7、求圆的面积" class="headerlink" title="7、求圆的面积"></a>7、求圆的面积</h3><p>程序编写：输入半径，求出圆的面积</p><p>圆的周长：<code>πrr</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径：&#x27;</span>))</span><br><span class="line">girth = r * r * math.pi</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积是&#x27;</span>,<span class="built_in">round</span>(girth,<span class="number">2</span>))  <span class="comment"># round 保留两位小数</span></span><br></pre></td></tr></table></figure><h3 id="8、求直角三角形斜边的边长"><a href="#8、求直角三角形斜边的边长" class="headerlink" title="8、求直角三角形斜边的边长"></a>8、求直角三角形斜边的边长</h3><p>编写程序：输入两个直角边，求出三角形斜边的长度</p><p>勾股定理：a^2^ + b^2^ &#x3D; c^2^</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">cfang = math.<span class="built_in">pow</span>(a,<span class="number">2</span>) + math.<span class="built_in">pow</span>(b,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 或者 math.pow(cfang,0.5) or cfang ** 0.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三角形斜边的长度: &#x27;</span>,math.sqrt(cfang))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9、比较三个数大小"><a href="#9、比较三个数大小" class="headerlink" title="9、比较三个数大小"></a>9、比较三个数大小</h3><p>编写程序：输入三个数，从小到大输出三个数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个数：&#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个数：&#x27;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第三个数：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">lst = [a,b,c]</span><br><span class="line"><span class="comment"># 方法一：list.sort() ,sort(reverse=False) 默认False 升序</span></span><br><span class="line">lst.sort()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：sorted(lst)</span></span><br><span class="line">list1 = <span class="built_in">sorted</span>([a,b,c])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="10、找出区间内的素数"><a href="#10、找出区间内的素数" class="headerlink" title="10、找出区间内的素数"></a>10、找出区间内的素数</h3><p>编写程序，输入整数a、b表示一个闭区间，找出该区间内的所有素数并打印。 </p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断素数函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">x</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, x):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭区间</span></span><br><span class="line">a = <span class="number">10</span>  <span class="comment"># 左端点</span></span><br><span class="line">b = <span class="number">20</span>  <span class="comment"># 右端点</span></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a,b+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> prime(i):</span><br><span class="line">        num_list.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure><h3 id="11、组合数字"><a href="#11、组合数字" class="headerlink" title="11、组合数字"></a>11、组合数字</h3><p>有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数?各是多少?</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">str1 = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str1:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> str1:</span><br><span class="line">            <span class="keyword">if</span> i == j <span class="keyword">or</span> i == k <span class="keyword">or</span> j == k:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(i+j+k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span>(i == j <span class="keyword">or</span> i == k <span class="keyword">or</span> j == k):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span><span class="subst">&#123;j&#125;</span><span class="subst">&#123;k&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="12、打印乘法口诀表"><a href="#12、打印乘法口诀表" class="headerlink" title="12、打印乘法口诀表"></a>12、打印乘法口诀表</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\t<span class="subst">&#123;j&#125;</span> * <span class="subst">&#123;i&#125;</span> = <span class="subst">&#123;i * j&#125;</span>&#x27;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="13、水仙花数"><a href="#13、水仙花数" class="headerlink" title="13、水仙花数"></a>13、水仙花数</h3><p>水仙花数：是一个三位数，各位数字立方和等于该数字本身。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 水仙花数：是一个三位数，各位数字立方和等于该数字本身。</span></span><br><span class="line"></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    hundred = i // <span class="number">100</span></span><br><span class="line">    ten = i // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">    piece = i % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> (math.<span class="built_in">pow</span>(hundred,<span class="number">3</span>) + math.<span class="built_in">pow</span>(ten,<span class="number">3</span>)+ math.<span class="built_in">pow</span>(piece,<span class="number">3</span>)) == i:</span><br><span class="line">        num_list.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure><h3 id="14、反向输出四位数"><a href="#14、反向输出四位数" class="headerlink" title="14、反向输出四位数"></a>14、反向输出四位数</h3><p>编写程序，输入一个四位整数，反对输出对应四位数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写程序，输入一个四位整数，反对输出对应四位数</span></span><br><span class="line"></span><br><span class="line">st = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个四位数&#x27;</span>)</span><br><span class="line">st = st[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(st))</span><br></pre></td></tr></table></figure><h3 id="15、判断字母"><a href="#15、判断字母" class="headerlink" title="15、判断字母"></a>15、判断字母</h3><p>编写程序，输入字符，判断是否为字母</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 编写程序，输入字符，判断是否为字母</span><br><span class="line"></span><br><span class="line">a = input(&#x27;请输入字符: &#x27;)</span><br><span class="line">result = a.isalpha()  #  判断字母</span><br><span class="line">if result:</span><br><span class="line">    print(f&#x27;&#123;a&#125;是字母&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(f&#x27;&#123;a&#125;不是字母&#x27;)</span><br></pre></td></tr></table></figure><h3 id="16、判断三角形"><a href="#16、判断三角形" class="headerlink" title="16、判断三角形"></a>16、判断三角形</h3><p>编写程序，输入三组数据，判断能否构成三角形的三条边</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a, b, c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt;= <span class="number">0</span> <span class="keyword">or</span> b &lt;= <span class="number">0</span> <span class="keyword">or</span> c &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入的数据不合法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a + b &lt; c <span class="keyword">or</span> a + c &lt; b <span class="keyword">or</span> b + c &lt; a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不构成三角形&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;构成三角形&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="17、完数"><a href="#17、完数" class="headerlink" title="17、完数"></a>17、完数</h3><p>个数如恰好等于除了它以外的因子之和，这个数就称为“完数”。编程序找出1000以内的所有完数，(6是一个”完数”，它的因子是1,2,3)。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span> += j</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span> == i:</span><br><span class="line">        <span class="built_in">print</span>(i,<span class="string">&#x27;是完数&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="18、找出质数因子"><a href="#18、找出质数因子" class="headerlink" title="18、找出质数因子"></a>18、找出质数因子</h3><p>输入一个正整数，输出它的所有质数因子(如180的质数因子为2、2、3、3、5)。</p><p>多个素数的乘积</p><p>从第一个数开始，也就是说从2开始，整除一下输入的数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个自然数：&#x27;</span>))</span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">while</span> a != y:</span><br><span class="line">    <span class="keyword">if</span> a % y == <span class="number">0</span>:</span><br><span class="line">         list1.append(y)</span><br><span class="line">         a /= y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">list1.append(<span class="built_in">int</span>(a))  <span class="comment"># 最后剩下的a</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="19、海伦公式求三角形面积"><a href="#19、海伦公式求三角形面积" class="headerlink" title="19、海伦公式求三角形面积"></a>19、海伦公式求三角形面积</h3><p>海伦公式是利用三角形的三条边的边长直接求三角形面积的公式</p><p>$$<br>p &#x3D; (a+b+c)&#x2F;2<br>$$</p><p>$$<br>S &#x3D; \sqrt{p(p-a)(p-b)(p-c)}<br>$$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">p = (a+b+c)/<span class="number">2</span></span><br><span class="line">S = math.sqrt(p * (p-a) * (p-b) * (p-c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三角形的面积是:&#x27;</span>,<span class="built_in">round</span>(S,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="20、判断某年某天"><a href="#20、判断某年某天" class="headerlink" title="20、判断某年某天"></a>20、判断某年某天</h3><p>输入某年某月某日，判断这一天是这一年的第几天</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># map 把年月日都转成 int类型</span></span><br><span class="line">year,month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&#x27;请输入年月日: &#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到当年的第一天</span></span><br><span class="line">yundan = datetime.datetime(year,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">#</span></span><br><span class="line">now = datetime.datetime(year, month, day)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((now - yundan).days + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="21、斐波那契数列"><a href="#21、斐波那契数列" class="headerlink" title="21、斐波那契数列"></a>21、斐波那契数列</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">or</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(x-<span class="number">1</span>) + fib(x-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">fibs = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="comment"># fibs.append(fibs[-1] + fibs[-2])</span></span><br><span class="line">    fibs.append(fibs[i - <span class="number">1</span>] + fibs[i - <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(fibs[n-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="22、复制列表"><a href="#22、复制列表" class="headerlink" title="22、复制列表"></a>22、复制列表</h3><p>将一个列表中的数据，复制到另一个列表中</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list2 = copy.copy(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">lsit2 = list1.copy()</span><br><span class="line"><span class="built_in">print</span>(lsit2)</span><br></pre></td></tr></table></figure><h3 id="23、暂停后输出"><a href="#23、暂停后输出" class="headerlink" title="23、暂停后输出"></a>23、暂停后输出</h3><p>暂停一段时间后输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">time.sleep(1) # 以秒为单位</span><br><span class="line">print(&quot;Hello Python! &quot;)</span><br></pre></td></tr></table></figure><h3 id="24、成绩if语句"><a href="#24、成绩if语句" class="headerlink" title="24、成绩if语句"></a>24、成绩if语句</h3><p>利用条件运算符的嵌套来完成此题:学习成绩&gt;&#x3D;90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你的成绩: &#x27;</span>))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    flag = <span class="string">&quot;A&quot;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    flag = <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    flag = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="25、统计字符"><a href="#25、统计字符" class="headerlink" title="25、统计字符"></a>25、统计字符</h3><p>输入一行字符，分别统计出其中英文字母空格、数字和其它字符的个数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</span></span><br><span class="line"></span><br><span class="line">string = <span class="built_in">input</span>(<span class="string">&#x27;请输入一段字符串：&#x27;</span>)</span><br><span class="line">char,space,number,other = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        char += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        space += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha():  <span class="comment"># 判断字符串</span></span><br><span class="line">        char += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isdigit():  <span class="comment"># 判断数字</span></span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isspace():  <span class="comment"># 判断空格</span></span><br><span class="line">        space += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;英文字母有<span class="subst">&#123;char&#125;</span>个,数字有<span class="subst">&#123;number&#125;</span>个,空格有<span class="subst">&#123;space&#125;</span>个,其他字符有<span class="subst">&#123;other&#125;</span>个。&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="26、落体反弹问题"><a href="#26、落体反弹问题" class="headerlink" title="26、落体反弹问题"></a>26、落体反弹问题</h3><p>球从100米高度自由落下，每次落地后反跳回原高度的一半;再落下，求它在第10次落地时，共经过多少米?第10次反弹多高?</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>: <span class="comment"># 第一次弹跳，马上要落下来</span></span><br><span class="line">        list1.append(n)</span><br><span class="line">        n /= <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list1.append(<span class="number">2</span> * n)  <span class="comment"># 这是一个 上下的距离</span></span><br><span class="line">        n /= <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(list1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># 球的高度</span></span><br><span class="line">height = <span class="number">100</span></span><br><span class="line"><span class="comment"># 落地的次数</span></span><br><span class="line">frequency = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,frequency):</span><br><span class="line">    <span class="built_in">sum</span> += height  <span class="comment"># 落下</span></span><br><span class="line">    height /= <span class="number">2</span></span><br><span class="line">    <span class="built_in">sum</span> += height  <span class="comment"># 上来</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;i&#125;</span>次下落，高度为：<span class="subst">&#123;height&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="27、猴子吃桃问题"><a href="#27、猴子吃桃问题" class="headerlink" title="27、猴子吃桃问题"></a>27、猴子吃桃问题</h3><p>猴子吃桃问题：猴子第一天摘下若干个桃子当即吃了一半，还不瘾，又多吃了一个第天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每天吃了 一半 + 1, 第十天就剩下1个了, 求第一天摘了多少</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    x = (x + <span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="28、求指数数列的和"><a href="#28、求指数数列的和" class="headerlink" title="28、求指数数列的和"></a>28、求指数数列的和</h3><p>有一分数序列：2&#x2F;1，3&#x2F;2，5&#x2F;3，8&#x2F;5，13&#x2F;8，21&#x2F;13…求出这个数列的前20项之和。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">fibs = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    fibs.append(fibs[-<span class="number">1</span>] + fibs[-<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">22</span>):</span><br><span class="line">    <span class="built_in">sum</span> += fibs[i] / fibs[i-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>  <span class="comment"># 最后的结果</span></span><br><span class="line">up = <span class="number">2</span>  <span class="comment"># 分子</span></span><br><span class="line">down = <span class="number">1</span>  <span class="comment"># 分母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">sum</span> += up/down</span><br><span class="line">    up, down = down + up, up</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="29、求各个阶乘的和"><a href="#29、求各个阶乘的和" class="headerlink" title="29、求各个阶乘的和"></a>29、求各个阶乘的和</h3><p>求1+2!+3!+…+20!的和.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">21</span>):</span><br><span class="line">    target = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i + <span class="number">1</span>): <span class="comment"># 阶乘包括本身</span></span><br><span class="line">        target *= j</span><br><span class="line">    <span class="built_in">sum</span> += target</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="built_in">sum</span> += math.factorial(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="30、年龄急转弯"><a href="#30、年龄急转弯" class="headerlink" title="30、年龄急转弯"></a>30、年龄急转弯</h3><p>有5个人坐在一起，问第五个人多少岁?他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大?</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func(n - <span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="31、判断回文数"><a href="#31、判断回文数" class="headerlink" title="31、判断回文数"></a>31、判断回文数</h3><p>输入一个数，判断它是不是回文数。12321是回文数，个位与万位相同，十位与千位相同。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">number = <span class="string">&#x27;12321&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">if</span> number[<span class="number">0</span>] == number[-<span class="number">1</span>] <span class="keyword">and</span> number[<span class="number">1</span>] == number[-<span class="number">2</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line">w = number // <span class="number">10000</span></span><br><span class="line">q = number // <span class="number">1000</span> % <span class="number">10</span></span><br><span class="line">ten = number % <span class="number">100</span> // <span class="number">10</span></span><br><span class="line">g = number % <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> q == ten <span class="keyword">and</span> w == g:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是回文数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不是回文数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">a = <span class="string">&#x27;12321&#x27;</span></span><br><span class="line">b = a[::-<span class="number">1</span>]  <span class="comment"># 字符串反转</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是回文数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不是回文数&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="32、判断星期几"><a href="#32、判断星期几" class="headerlink" title="32、判断星期几"></a>32、判断星期几</h3><p>请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。<br>星期一 Monday、星期二 Tuesday、星期三Wednesday、星期四Thursday、星期五 Friday 、星期六 Saturday、星期日Sunday.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">weekdays = [<span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>, <span class="string">&quot;Sunday&quot;</span>]</span><br><span class="line">first_letter = <span class="built_in">input</span>(<span class="string">&quot;请输入星期几的第一个字母（大写）:&quot;</span>)</span><br><span class="line">matched_days = []</span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> weekdays:</span><br><span class="line">    <span class="keyword">if</span> day[<span class="number">0</span>] == first_letter:</span><br><span class="line">        matched_days.append(day)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(matched_days) == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是&quot;</span>, matched_days[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(matched_days) &gt; <span class="number">1</span>:</span><br><span class="line">    second_letter = <span class="built_in">input</span>(<span class="string">&quot;有多个匹配，请输入第二个字母（小写）:&quot;</span>)</span><br><span class="line">    final_matched = []</span><br><span class="line">    <span class="keyword">for</span> m_day <span class="keyword">in</span> matched_days:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m_day) &gt; <span class="number">1</span> <span class="keyword">and</span> m_day[<span class="number">1</span>] == second_letter:</span><br><span class="line">            final_matched.append(m_day)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(final_matched) == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是&quot;</span>, final_matched[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法准确判断，请输入更详细信息&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="33、相反顺序输出列表"><a href="#33、相反顺序输出列表" class="headerlink" title="33、相反顺序输出列表"></a>33、相反顺序输出列表</h3><p>按相反的顺序输出列表的值。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">list1.reverse()  <span class="comment"># 对原本的数据进行修改，没有返回值</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="34、对十个数进行排序"><a href="#34、对十个数进行排序" class="headerlink" title="34、对十个数进行排序"></a>34、对十个数进行排序</h3><p>对十个数进行排序</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&#x27;请输入10个数字&#x27;</span>).split())</span><br><span class="line">a = <span class="built_in">list</span>(a)</span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="35、求矩阵主对角线元素之和"><a href="#35、求矩阵主对角线元素之和" class="headerlink" title="35、求矩阵主对角线元素之和"></a>35、求矩阵主对角线元素之和</h3><p>求一个3*3矩阵主对角线元素之和</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    a.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        a[i].append(index)</span><br><span class="line">        <span class="comment"># 求对角线元素之和</span></span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="built_in">sum</span> += a[i][j]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">sum_list = np.diagonal(arr)   <span class="comment"># 把对角线取出来</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(sum_list))</span><br></pre></td></tr></table></figure><h3 id="36、有序列表添加数据"><a href="#36、有序列表添加数据" class="headerlink" title="36、有序列表添加数据"></a>36、有序列表添加数据</h3><p>有一个已经排好的序列。现输入一个数，要求按原来的规律将它插入数组中。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入数据:&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> list1[<span class="number">0</span>] &lt; list1[-<span class="number">2</span>]:</span><br><span class="line">    list1.append(n)</span><br><span class="line">    list1.sort()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    list1.append(n)</span><br><span class="line">    list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="37、变量值互换"><a href="#37、变量值互换" class="headerlink" title="37、变量值互换"></a>37、变量值互换</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br></pre></td></tr></table></figure><h3 id="38、产生随机数"><a href="#38、产生随机数" class="headerlink" title="38、产生随机数"></a>38、产生随机数</h3><p>生成随机数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = random.random() <span class="comment"># [0,1) float</span></span><br><span class="line">b = random.randint(<span class="number">1</span>,<span class="number">10</span>) <span class="comment"># [1,10] int</span></span><br><span class="line">c = random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>) <span class="comment"># 比 randint 多了一个步长</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="39、lambda表达式"><a href="#39、lambda表达式" class="headerlink" title="39、lambda表达式"></a>39、lambda表达式</h3><p>使用lambda来创建匿名函数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fun = <span class="keyword">lambda</span> x, y: x ** y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h3 id="40、温度转换"><a href="#40、温度转换" class="headerlink" title="40、温度转换"></a>40、温度转换</h3><p>输入摄氏度，将其转为华氏度</p><p>输入华氏度，将其转为摄氏度。</p><p>华氏温度与摄氏温度转换公式为：</p><p>华氏温度&#x3D;摄氏温度x1.8+32。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;摄氏度请按1,华氏度请按2: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入摄氏度: &#x27;</span>))</span><br><span class="line">    result = b * <span class="number">1.8</span> + <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;你输入的是摄氏度<span class="subst">&#123;b&#125;</span>, 转换为华氏度是<span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入华氏度: &#x27;</span>))</span><br><span class="line">    result = (b - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;你输入的是华氏度<span class="subst">&#123;b&#125;</span>, 转换为摄氏度是<span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="41、按位与"><a href="#41、按位与" class="headerlink" title="41、按位与"></a>41、按位与</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运算规则: 0&amp;0=0 0&amp;1=0  1&amp;0=0  1&amp;1=1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3 =&gt; 0011</span></span><br><span class="line"><span class="string">5 =&gt; 0101</span></span><br><span class="line"><span class="string">3 &amp; 5 =&gt; 0001  =&gt; 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 =&gt; 0100</span></span><br><span class="line"><span class="string">12 =&gt; 1100</span></span><br><span class="line"><span class="string">4 &amp; 12 =&gt; 0100  =&gt;4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &amp; <span class="number">5</span>) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &amp; <span class="number">12</span>) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="42、按位或"><a href="#42、按位或" class="headerlink" title="42、按位或"></a>42、按位或</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运算规则: 0|0=0, 0|1=1, 1|0=1, 1|1=1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3 =&gt; 0011</span></span><br><span class="line"><span class="string">7 =&gt; 0111</span></span><br><span class="line"><span class="string">3|7 =&gt; 0111 =&gt; 7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> | <span class="number">7</span>) <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h3 id="43、按位异或"><a href="#43、按位异或" class="headerlink" title="43、按位异或"></a>43、按位异或</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相同为0，不同为1</span></span><br><span class="line"><span class="comment"># 0^0=0  0^1=1  1^0=1  1^1=0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3 =&gt; 0011</span></span><br><span class="line"><span class="string">9 =&gt; 1001</span></span><br><span class="line"><span class="string">3^9 =&gt; 1010 =&gt; 10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> ^ <span class="number">9</span>) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h3 id="44、按位取反"><a href="#44、按位取反" class="headerlink" title="44、按位取反"></a>44、按位取反</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按位取反运算符(~): 对数据的每个二进制位取反,即把0变成1,把1变成0</span></span><br><span class="line"><span class="comment"># ~x = -(x+1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9 =&gt; 00001001</span></span><br><span class="line"><span class="string">  =&gt; 11110110</span></span><br><span class="line"><span class="string">  =&gt; 10001001</span></span><br><span class="line"><span class="string">  =&gt; 10001010 在这里加1</span></span><br><span class="line"><span class="string">  =&gt; -10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">9</span>)  <span class="comment"># -10</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">10</span>)  <span class="comment"># -11</span></span><br><span class="line"><span class="built_in">print</span>(~(-<span class="number">3</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 用十进制计算:正变负,负变正,然后减1</span></span><br></pre></td></tr></table></figure><h3 id="45、计算机字符串的长度"><a href="#45、计算机字符串的长度" class="headerlink" title="45、计算机字符串的长度"></a>45、计算机字符串的长度</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">length += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><h3 id="46、杨辉三角"><a href="#46、杨辉三角" class="headerlink" title="46、杨辉三角"></a>46、杨辉三角</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = []  <span class="comment"># 外围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    a.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        a[i].append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    a[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    a[i][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        a[i][j] = a[i-<span class="number">1</span>][j] + a[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(a[i][j], end=<span class="string">&#x27;  &#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="47、查找字符串"><a href="#47、查找字符串" class="headerlink" title="47、查找字符串"></a>47、查找字符串</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;World&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(b))</span><br></pre></td></tr></table></figure><h3 id="48、猜数字游戏"><a href="#48、猜数字游戏" class="headerlink" title="48、猜数字游戏"></a>48、猜数字游戏</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">target = random.randint(<span class="number">0</span>,<span class="number">99</span>)</span><br><span class="line">times = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;猜数字游戏开始,请猜一百以内的整数~&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> times != <span class="number">0</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你要猜的数字: \n&#x27;</span>))</span><br><span class="line">    times -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; target:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &gt; target:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;恭喜你才对了,答案是<span class="subst">&#123;target&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> times == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;很遗憾,机会用完了.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="49、第一个只出现一次的字符"><a href="#49、第一个只出现一次的字符" class="headerlink" title="49、第一个只出现一次的字符"></a>49、第一个只出现一次的字符</h3><p>在一个字符串中找到第一个只出现一次的字符,并返回它的位置,如果没有则返回 -1(需要区分大小写).(从0开始计数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">a = -<span class="number">1</span>  <span class="comment"># 默认为 -1</span></span><br><span class="line">mp = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> mp:</span><br><span class="line">        mp[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mp[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="keyword">if</span> mp[string[i]] == <span class="number">1</span>:</span><br><span class="line">        a = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="50、最大公因数"><a href="#50、最大公因数" class="headerlink" title="50、最大公因数"></a>50、最大公因数</h3><p>求最大公因数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a, b</span>): <span class="comment"># 枚举</span></span><br><span class="line">    <span class="keyword">if</span> a == b:  <span class="comment"># 如果两个数一样的话,那么就是他们本身</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    num = <span class="built_in">min</span>(a,b) <span class="comment"># 记录最小的</span></span><br><span class="line">    <span class="keyword">while</span> a % num != <span class="number">0</span> <span class="keyword">or</span> b % num != <span class="number">0</span>:</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun1(<span class="number">12</span>,<span class="number">18</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>: <span class="comment"># 除法求余</span></span><br><span class="line">        a,b = b,a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="built_in">print</span>(fun2(<span class="number">12</span>,<span class="number">18</span>))</span><br></pre></td></tr></table></figure><h3 id="51、数组里没有出现过的数字"><a href="#51、数组里没有出现过的数字" class="headerlink" title="51、数组里没有出现过的数字"></a>51、数组里没有出现过的数字</h3><p>给定一个长度为N的正整数数组nums，其中numsm的值都在区间[1,n]中，请你找出nums数组在[1,n]范围里面没有出现过的数字，并将它们放在数组里面返回(在数组里面的顺序可以不唯一)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">nums</span>):</span><br><span class="line">    l = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums) + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> [item <span class="keyword">for</span> item <span class="keyword">in</span> l <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> nums]</span><br><span class="line">func([<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="52、替换空格"><a href="#52、替换空格" class="headerlink" title="52、替换空格"></a>52、替换空格</h3><p>将字符串中的空格替换为 <code>%</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;My name is Taichi&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot; &quot;</span>:</span><br><span class="line">            res += <span class="string">&#x27;%&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="built_in">print</span>(func(str1))</span><br></pre></td></tr></table></figure><h3 id="53、快乐数"><a href="#53、快乐数" class="headerlink" title="53、快乐数"></a>53、快乐数</h3><p>给定一个正整数，请你判断这个数是不是快乐数快乐数:对于一个正整数，每次把他替换为他每个位置上的数字的平方和，如果这个数能变为1则是快乐数，如果不可能变成1则不是快乐数例如:正整数19转换过程为1<em>1+9</em>9&#x3D;82,8<em>8+2</em>2&#x3D;686<em>6+8</em>8&#x3D;100，1<em>1+0</em>0+0*0&#x3D;1，所以他是快乐数</p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests请求模块</title>
      <link href="/2025/02/23/requests%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97/"/>
      <url>/2025/02/23/requests%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Requests是用python语言基于urllib编写的，采用的是Apache2 Licensed开源协议的HTTP库，Requests它会比urllib更加方便，可以节约我们大量的工作。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="先上一串代码"><a href="#先上一串代码" class="headerlink" title="先上一串代码"></a>先上一串代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">response  = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text))</span><br><span class="line"><span class="comment">#获得响应头内容</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br><span class="line"><span class="built_in">print</span>(response.headers[<span class="string">&#x27;content-type&#x27;</span>])</span><br><span class="line"><span class="comment">#还可以用这种方式获取请求头内容</span></span><br><span class="line"><span class="built_in">print</span>(response.request.headers)</span><br><span class="line"> <span class="comment"># 解决乱码问题</span></span><br><span class="line">response.enconding = <span class="string">&quot;utf-8&#x27; </span></span><br><span class="line"><span class="string">print(response.text)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">print(response.cookies)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">print(response.content)</span></span><br><span class="line"><span class="string">print(response.content.decode(&quot;</span>utf-<span class="number">8</span><span class="string">&quot;))</span></span><br></pre></td></tr></table></figure><ul><li>response.text返回的是Unicode格式，通常需要转换为utf-8格式，否则就是乱码。</li><li>response.content是二进制模式，可以下载视频之类的，如果想看的话需要decode成utf-8格式。</li><li>不管是通过response.content.decode(“utf-8)的方式还是通过response.encoding&#x3D;”utf-8”的方式都可以避免乱码的问题发生</li></ul><h3 id="各种请求方式"><a href="#各种请求方式" class="headerlink" title="各种请求方式"></a>各种请求方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>) <span class="comment">#发送post请求</span></span><br><span class="line">requests.put(<span class="string">&quot;http://httpbin.org/put&quot;</span>)  <span class="comment">#提交修改信息</span></span><br><span class="line">requests.patch(<span class="string">&quot;http://httpbin.org/put&quot;</span>)  <span class="comment">#提交局部修改的请求</span></span><br><span class="line">requests.delete(<span class="string">&quot;http://httpbin.org/delete&quot;</span>) <span class="comment"># 提交删除请求</span></span><br><span class="line">requests.head(<span class="string">&quot;http://httpbin.org/get&quot;</span>) <span class="comment">#获取HTML头部信息</span></span><br><span class="line">requests.options(<span class="string">&quot;http://httpbin.org/get&quot;</span>)  </span><br></pre></td></tr></table></figure><h3 id="基本GET"><a href="#基本GET" class="headerlink" title="基本GET"></a>基本GET</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="带参数的GET请求"><a href="#带参数的GET请求" class="headerlink" title="带参数的GET请求"></a>带参数的GET请求</h3><p><code>如果想查询http://httpbin.org/get页面的具体参数，需要在url里面加上，例如我想看有没有Host=httpbin.org这条数据，url形式应该是http://httpbin.org/get?Host=httpbin.org</code></p><p>下面提交的数据是往这个地址传送data里面的数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带参数的get请求</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://tieba.baidu.com/f?&#x27;</span></span><br><span class="line">params = &#123;<span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;大学吧&#x27;</span>, <span class="string">&#x27;pn&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64)&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 开始请求</span></span><br><span class="line">html = requests.get(url=url, params=params, headers=headers).text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h3 id="Json数据"><a href="#Json数据" class="headerlink" title="Json数据"></a>Json数据</h3><p>从下面的数据中我们可以得出，如果结果：</p><p>1、requests中response.json()方法等同于json.loads（response.text）方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">response = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text))</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line"><span class="built_in">print</span>(json.loads(response.text))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.json())</span><br><span class="line"><span class="built_in">print</span>(response.json()[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h5><p>在上面提到了response.content，这样获取的数据是二进制数据，同样的这个方法也可以用于下载图片以及视频资源</p><h5 id="添加header"><a href="#添加header" class="headerlink" title="添加header"></a>添加header</h5><p><strong>首先说，为什么要加header（头部信息）呢？例如下面，我们试图访问知乎的登录页面（当然大家都你要是不登录知乎，就看不到里面的内容），我们试试不加header信息会报什么错。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.zhihu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="基本post请求："><a href="#基本post请求：" class="headerlink" title="基本post请求："></a>基本post请求：</h3><p>通过post把数据提交到url地址，等同于一字典的形式提交form表单里面的数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;23&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;form&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Accept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;close&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Content-Length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Content-Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/x-www-form-urlencoded&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpbin.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python-requests/2.13.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;json&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;118.144.137.95&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>语法结构</p><p><code>requests.post(url,data=None,json=None)</code></p></li><li><p>参数说明</p><ul><li>url: 需要爬取的网站的网址</li><li>data: 请求数据</li><li>json: json格式的数据</li></ul></li><li><p>案例:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.xslou.com/login.php&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;18600605736&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;57365736&#x27;</span>, <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line">resp = requests.post(url,data)</span><br><span class="line">resp.encoding=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;响应状态码：&#x27;</span>, resp.status_code)   <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;响应内容&#x27;</span>, resp.text)        <span class="comment"># &lt;html&gt;......&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应:"></a>响应:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment">#allow_redirects=False#设置这个属性为False则是不允许重定向，反之可以重定向 </span></span><br><span class="line">response = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#打印请求页面的状态（状态码）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.status_code),response.status_code)</span><br><span class="line"><span class="comment">#打印请求网址的headers所有信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.headers),response.headers)</span><br><span class="line"><span class="comment">#打印请求网址的cookies信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies),response.cookies)</span><br><span class="line"><span class="comment">#打印请求网址的地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.url),response.url)</span><br><span class="line"><span class="comment">#打印请求的历史记录（以列表的形式显示）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.history),response.history)</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>response.status_code</td><td>响应状态码</td></tr><tr><td>response.content</td><td>把response对象转换成二进制数据</td></tr><tr><td>response.text</td><td>把response对象转换成字符串数据</td></tr><tr><td>response.encoding</td><td>定义response对象的编码</td></tr><tr><td>response.cookie</td><td>获取请求后的cookie</td></tr><tr><td>response.url</td><td>获取请求网址</td></tr><tr><td>response.json()</td><td>内置的json解码器</td></tr><tr><td>response.headers</td><td>以字典对象存储服务器响应头,字典不区分大小写</td></tr></tbody></table><h3 id="内置的状态码"><a href="#内置的状态码" class="headerlink" title="内置的状态码:"></a>内置的状态码:</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span><span class="punctuation">:</span> (&#x27;continue&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">101</span><span class="punctuation">:</span> (&#x27;switching_protocols&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">102</span><span class="punctuation">:</span> (&#x27;processing&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">103</span><span class="punctuation">:</span> (&#x27;checkpoint&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">122</span><span class="punctuation">:</span> (&#x27;uri_too_long&#x27;<span class="punctuation">,</span> &#x27;request_uri_too_long&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">200</span><span class="punctuation">:</span> (&#x27;ok&#x27;<span class="punctuation">,</span> &#x27;okay&#x27;<span class="punctuation">,</span> &#x27;all_ok&#x27;<span class="punctuation">,</span> &#x27;all_okay&#x27;<span class="punctuation">,</span> &#x27;all_good&#x27;<span class="punctuation">,</span> &#x27;\\o/&#x27;<span class="punctuation">,</span> &#x27;✓&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">201</span><span class="punctuation">:</span> (&#x27;created&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">202</span><span class="punctuation">:</span> (&#x27;accepted&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">203</span><span class="punctuation">:</span> (&#x27;non_authoritative_info&#x27;<span class="punctuation">,</span> &#x27;non_authoritative_information&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">204</span><span class="punctuation">:</span> (&#x27;no_content&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">205</span><span class="punctuation">:</span> (&#x27;reset_content&#x27;<span class="punctuation">,</span> &#x27;reset&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">206</span><span class="punctuation">:</span> (&#x27;partial_content&#x27;<span class="punctuation">,</span> &#x27;partial&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">207</span><span class="punctuation">:</span> (&#x27;multi_status&#x27;<span class="punctuation">,</span> &#x27;multiple_status&#x27;<span class="punctuation">,</span> &#x27;multi_stati&#x27;<span class="punctuation">,</span> &#x27;multiple_stati&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">208</span><span class="punctuation">:</span> (&#x27;already_reported&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">226</span><span class="punctuation">:</span> (&#x27;im_used&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"># Redirection.</span><br><span class="line"><span class="number">300</span><span class="punctuation">:</span> (&#x27;multiple_choices&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">301</span><span class="punctuation">:</span> (&#x27;moved_permanently&#x27;<span class="punctuation">,</span> &#x27;moved&#x27;<span class="punctuation">,</span> &#x27;\\o-&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">302</span><span class="punctuation">:</span> (&#x27;found&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">303</span><span class="punctuation">:</span> (&#x27;see_other&#x27;<span class="punctuation">,</span> &#x27;other&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">304</span><span class="punctuation">:</span> (&#x27;not_modified&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">305</span><span class="punctuation">:</span> (&#x27;use_proxy&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">306</span><span class="punctuation">:</span> (&#x27;switch_proxy&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">307</span><span class="punctuation">:</span> (&#x27;temporary_redirect&#x27;<span class="punctuation">,</span> &#x27;temporary_moved&#x27;<span class="punctuation">,</span> &#x27;temporary&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">308</span><span class="punctuation">:</span> (&#x27;permanent_redirect&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;resume_incomplete&#x27;<span class="punctuation">,</span> &#x27;resume&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span> # These <span class="number">2</span> to be removed in <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"># Client Error.</span><br><span class="line"><span class="number">400</span><span class="punctuation">:</span> (&#x27;bad_request&#x27;<span class="punctuation">,</span> &#x27;bad&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">401</span><span class="punctuation">:</span> (&#x27;unauthorized&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">402</span><span class="punctuation">:</span> (&#x27;payment_required&#x27;<span class="punctuation">,</span> &#x27;payment&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">403</span><span class="punctuation">:</span> (&#x27;forbidden&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">404</span><span class="punctuation">:</span> (&#x27;not_found&#x27;<span class="punctuation">,</span> &#x27;-o-&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">405</span><span class="punctuation">:</span> (&#x27;method_not_allowed&#x27;<span class="punctuation">,</span> &#x27;not_allowed&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">406</span><span class="punctuation">:</span> (&#x27;not_acceptable&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">407</span><span class="punctuation">:</span> (&#x27;proxy_authentication_required&#x27;<span class="punctuation">,</span> &#x27;proxy_auth&#x27;<span class="punctuation">,</span> &#x27;proxy_authentication&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">408</span><span class="punctuation">:</span> (&#x27;request_timeout&#x27;<span class="punctuation">,</span> &#x27;timeout&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">409</span><span class="punctuation">:</span> (&#x27;conflict&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">410</span><span class="punctuation">:</span> (&#x27;gone&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">411</span><span class="punctuation">:</span> (&#x27;length_required&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">412</span><span class="punctuation">:</span> (&#x27;precondition_failed&#x27;<span class="punctuation">,</span> &#x27;precondition&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">413</span><span class="punctuation">:</span> (&#x27;request_entity_too_large&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">414</span><span class="punctuation">:</span> (&#x27;request_uri_too_large&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">415</span><span class="punctuation">:</span> (&#x27;unsupported_media_type&#x27;<span class="punctuation">,</span> &#x27;unsupported_media&#x27;<span class="punctuation">,</span> &#x27;media_type&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">416</span><span class="punctuation">:</span> (&#x27;requested_range_not_satisfiable&#x27;<span class="punctuation">,</span> &#x27;requested_range&#x27;<span class="punctuation">,</span> &#x27;range_not_satisfiable&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">417</span><span class="punctuation">:</span> (&#x27;expectation_failed&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">418</span><span class="punctuation">:</span> (&#x27;im_a_teapot&#x27;<span class="punctuation">,</span> &#x27;teapot&#x27;<span class="punctuation">,</span> &#x27;i_am_a_teapot&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">421</span><span class="punctuation">:</span> (&#x27;misdirected_request&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">422</span><span class="punctuation">:</span> (&#x27;unprocessable_entity&#x27;<span class="punctuation">,</span> &#x27;unprocessable&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">423</span><span class="punctuation">:</span> (&#x27;locked&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">424</span><span class="punctuation">:</span> (&#x27;failed_dependency&#x27;<span class="punctuation">,</span> &#x27;dependency&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">425</span><span class="punctuation">:</span> (&#x27;unordered_collection&#x27;<span class="punctuation">,</span> &#x27;unordered&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">426</span><span class="punctuation">:</span> (&#x27;upgrade_required&#x27;<span class="punctuation">,</span> &#x27;upgrade&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">428</span><span class="punctuation">:</span> (&#x27;precondition_required&#x27;<span class="punctuation">,</span> &#x27;precondition&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">429</span><span class="punctuation">:</span> (&#x27;too_many_requests&#x27;<span class="punctuation">,</span> &#x27;too_many&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">431</span><span class="punctuation">:</span> (&#x27;header_fields_too_large&#x27;<span class="punctuation">,</span> &#x27;fields_too_large&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">444</span><span class="punctuation">:</span> (&#x27;no_response&#x27;<span class="punctuation">,</span> &#x27;none&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">449</span><span class="punctuation">:</span> (&#x27;retry_with&#x27;<span class="punctuation">,</span> &#x27;retry&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">450</span><span class="punctuation">:</span> (&#x27;blocked_by_windows_parental_controls&#x27;<span class="punctuation">,</span> &#x27;parental_controls&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">451</span><span class="punctuation">:</span> (&#x27;unavailable_for_legal_reasons&#x27;<span class="punctuation">,</span> &#x27;legal_reasons&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">499</span><span class="punctuation">:</span> (&#x27;client_closed_request&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"># Server Error.</span><br><span class="line"><span class="number">500</span><span class="punctuation">:</span> (&#x27;internal_server_error&#x27;<span class="punctuation">,</span> &#x27;server_error&#x27;<span class="punctuation">,</span> &#x27;/o\\&#x27;<span class="punctuation">,</span> &#x27;✗&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">501</span><span class="punctuation">:</span> (&#x27;not_implemented&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">502</span><span class="punctuation">:</span> (&#x27;bad_gateway&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">503</span><span class="punctuation">:</span> (&#x27;service_unavailable&#x27;<span class="punctuation">,</span> &#x27;unavailable&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">504</span><span class="punctuation">:</span> (&#x27;gateway_timeout&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">505</span><span class="punctuation">:</span> (&#x27;http_version_not_supported&#x27;<span class="punctuation">,</span> &#x27;http_version&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">506</span><span class="punctuation">:</span> (&#x27;variant_also_negotiates&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">507</span><span class="punctuation">:</span> (&#x27;insufficient_storage&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">509</span><span class="punctuation">:</span> (&#x27;bandwidth_limit_exceeded&#x27;<span class="punctuation">,</span> &#x27;bandwidth&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">510</span><span class="punctuation">:</span> (&#x27;not_extended&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">511</span><span class="punctuation">:</span> (&#x27;network_authentication_required&#x27;<span class="punctuation">,</span> &#x27;network_auth&#x27;<span class="punctuation">,</span> &#x27;network_authentication&#x27;)<span class="punctuation">,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.jianshu.com/404.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用request内置的字母判断状态码</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果response返回的状态码是非正常的就返回404错误</span></span><br><span class="line"><span class="keyword">if</span> response.status_code != requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果页面返回的状态码是200，就打印下面的状态</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.jianshu.com&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;200&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="request-高级操作"><a href="#request-高级操作" class="headerlink" title="request 高级操作"></a>request 高级操作</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">files= &#123;<span class="string">&quot;files&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;test.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>)&#125;</span><br><span class="line">response = requests.post(url,files=files)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    <span class="built_in">print</span>(key,<span class="string">&#x27;==&#x27;</span>,value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h3><p>cookie的一个作用就是可以用于模拟登录，做会话保持</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.session()</span><br><span class="line">session.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/12456&#x27;</span>)</span><br><span class="line">response = session.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h4 id="cookie-和-session-区别"><a href="#cookie-和-session-区别" class="headerlink" title="cookie 和 session 区别"></a>cookie 和 session 区别</h4><ul><li>cookie数据存放在客户的浏览器上，session数据放在服务器上</li><li>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗</li><li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能</li><li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie</li></ul><h4 id="session发送请求后-实现登录后继续访问"><a href="#session发送请求后-实现登录后继续访问" class="headerlink" title="session发送请求后,实现登录后继续访问"></a>session发送请求后,实现登录后继续访问</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.xslou.com/login.php&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;18600605736&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;57365736&#x27;</span>, <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用session发送请求</span></span><br><span class="line">session = requests.session()</span><br><span class="line">resp=session.post(url,data=data)    <span class="comment"># 使用session发送post请求</span></span><br><span class="line">resp.encoding=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="comment"># print( resp.text)        # &lt;html&gt;..&lt;title&gt;登录成功&lt;/title&gt;....&lt;/html&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 推荐小说      # 推荐成功的链接</span></span><br><span class="line">hot_url=<span class="string">&#x27;https://www.xslou.com/modules/article/uservote.php?id=71960&#x27;</span></span><br><span class="line">resp2=session.get(hot_url)    <span class="comment"># 使用session发送get请求</span></span><br><span class="line">resp2.encoding=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(resp2.text)        <span class="comment"># &lt;html&gt;..&lt;title&gt;处理成功&lt;/title&gt;....&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SSL证书认证参数-verify"><a href="#SSL证书认证参数-verify" class="headerlink" title="SSL证书认证参数 verify"></a>SSL证书认证参数 verify</h4><ul><li>参数值：True（默认）| False</li><li>适用网站：https类型网站但是没有经过 证书认证机构 认证的网站</li><li>适用场景：当程序中抛出SSLError异常则考虑使用此参数</li><li>使用示例：<code>requests.get(url=url,headers=headers,verify=False)</code></li><li>当verify参数设置为False时，则不会再对网站进行SSL证书认证</li></ul><h4 id="设置超时时间-timeout"><a href="#设置超时时间-timeout" class="headerlink" title="设置超时时间 timeout"></a>设置超时时间 timeout</h4><p>我们可以通过timeout属性设置超时时间，一旦超过这个时间还没获得响应内容，就会提示错误。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests.get(<span class="string">&#x27;http://github.com&#x27;</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line"> </span><br><span class="line">---------------------以下为输出结果（报错）---------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">&#x27;github.com&#x27;</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><h4 id="代理IP参数-proxies"><a href="#代理IP参数-proxies" class="headerlink" title="代理IP参数 proxies"></a>代理IP参数 proxies</h4><ul><li><p>语法格式：<strong>proxies &#x3D; { ‘协议’:’协议:&#x2F;&#x2F;IP:端口号’}</strong></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://IP:端口号&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;http://IP:端口号&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当我们抓取的地址为http时，则会选择proxies中http的代理，反之为https</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/get&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 定义代理，再代理IP网站中查找免费代理IP</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://112.85.164.220:9999&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://112.85.164.220:9999&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url=url,proxies=proxies,headers=headers,timeout=<span class="number">5</span>).text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p><em><strong>*私密代理和独享代理*</strong></em></p><ul><li><p>语法格式: <strong><u>proxies &#x3D; {‘协议’:’协议:&#x2F;&#x2F;用户名:密码@IP:端口号’}</u></strong></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://用户名:密码@IP:端口号&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;http://用户名:密码@IP:端口号&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当我们抓取的地址为http时，则会选择proxies中http的代理，反之为https</p></li></ul><h3 id="获取二进制数据-1"><a href="#获取二进制数据-1" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h3><p>一般来说，对于非文本请求，可以以字节形式访问响应正文。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取二进制数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 案例：保存百度图片</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.baidu.com/img/bd_logo1.png&#x27;</span></span><br><span class="line">resp=requests.get(url)</span><br><span class="line"><span class="comment"># 存储</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;logo.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># resp.content：把response对象转换为二进制数据</span></span><br><span class="line">    file.write(resp.content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试平台笔记</title>
      <link href="/2024/12/29/Python%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/12/29/Python%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="模块-语法基础与算法分析"><a href="#模块-语法基础与算法分析" class="headerlink" title="模块- 语法基础与算法分析"></a>模块- 语法基础与算法分析</h1><h3 id="1-1-求两数之和"><a href="#1-1-求两数之和" class="headerlink" title="1.1:求两数之和"></a>1.1:求两数之和</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出“和”为目标值的两个整数，并返回他们的数组下标。</span><br><span class="line">你可以假设每种输入只会对应一个答案，数组中元素不能重复输入。</span><br><span class="line">请根据上面的要求，编写相应的算法，将右边的函数 twoSum() 补充完整。</span><br><span class="line">举例</span><br><span class="line">给定 nums = [2, 7, 11, 15]，target = 9；</span><br><span class="line">nums[0] + nums[1] = 2 + 7 = 9，返回[0, 1]。</span><br><span class="line">任务要求</span><br><span class="line">1. 代码编写必须在右边指定的区域编写；</span><br><span class="line">2. 函数接收两个变量，一个是整数数组 nums：list，另一个是目标值 target: int；</span><br><span class="line">3. 如果存在两种或以上符合目标值 target 的情况，返回下标相加之和较小的数组；</span><br><span class="line"></span><br><span class="line">4. 函数返回的值必须为一个数组，list数据类型，元素排序为正序排序，如返回 [1, 3] 符合条件，[3, 1] 不符合条件。</span><br><span class="line">测试用例</span><br><span class="line">用例一</span><br><span class="line">输入：[2，3，2，4], 7</span><br><span class="line">输出：[1, 3]</span><br><span class="line"></span><br><span class="line">用例二</span><br><span class="line">输入：[2, 6, 7, 7], 9</span><br><span class="line">输出：[0, 2]</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, arr:<span class="type">List</span>[<span class="built_in">int</span>],target:<span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        k = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,k):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,k):</span><br><span class="line">                <span class="keyword">if</span> arr[i] + arr[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">target = <span class="number">9</span></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.twoSum(arr=arr, target=target)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="1-2-判断数组重复元素"><a href="#1-2-判断数组重复元素" class="headerlink" title="1.2:判断数组重复元素"></a>1.2:判断数组重复元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">编写一个函数 arrayRepeat()，对于任意输入的一个整数数组，如果整数数组中存在重复元素且重复元素均不相邻，函数返回 字符&quot;01&quot;；</span><br><span class="line">如果整数数组每个元素均不相同且偶数元素个数大于奇数元素个数，函数返回字符&quot;02&quot;；</span><br><span class="line">如果整数数组均不满足上述两个条件，函数返回字符 &quot;03&quot;</span><br><span class="line">任务要求</span><br><span class="line">1. 代码编写必须在右边指定的区域编写；</span><br><span class="line">2. 函数接收一个变量 arr，list 数据类型；</span><br><span class="line">3. 函数返回值必须为字符串数据类型。</span><br><span class="line">测试用例 </span><br><span class="line">输入：[1, 2, 6, 4, 6]    输出：&#x27;01&#x27;；</span><br><span class="line">输入：[2, 3, 8, 5, 6]    输出：&#x27;02&#x27;；</span><br><span class="line">输入：[2, 2, 5, 3, 5]    输出：&#x27;03&#x27;；</span><br><span class="line">输入：[0, 0, 0, 0, 0]    输出：&#x27;03&#x27;。</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrayRepeat</span>(<span class="params">self, arr:<span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="built_in">len</span>(<span class="built_in">set</span>(arr)): <span class="comment"># 无重复</span></span><br><span class="line">            o,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">2</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    o += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> o &gt; j: <span class="keyword">return</span> <span class="string">&#x27;02&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 有重复</span></span><br><span class="line">            <span class="comment"># 重复元素均不相邻</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr) - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> arr[i] == arr[i+<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;03&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;03&#x27;</span></span><br><span class="line"></span><br><span class="line">test = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>], <span class="comment"># 1</span></span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="comment"># 2</span></span><br><span class="line">    [<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>], <span class="comment"># 3</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 3</span></span><br><span class="line">]</span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.arrayRepeat(test[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="1-3-简单数学公式"><a href="#1-3-简单数学公式" class="headerlink" title="1.3:简单数学公式"></a>1.3:简单数学公式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">编写Python程序计算下列数学表达式的结果并输出，结果向上取整保留整数。</span><br><span class="line">res = √(( 3 ^ 4 + 5 * 6 ^ 5) / num)</span><br><span class="line">程序接收变量 num，返回的是 res。</span><br><span class="line">注明：</span><br><span class="line">* 代表乘。如 2 * 3 代表2乘以3，结果是 6；</span><br><span class="line">^ 代表次方。如2 ^ 3代表2的3次方，结果是 8。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收 int 类型的变量 num，返回结果 res 数据类型是 int。</span><br><span class="line">测试用例</span><br><span class="line">输入：30        输出：37</span><br><span class="line">解释：√((3^4+5*6^5)/30)=36.03...，向上取整结果是37。</span><br><span class="line"></span><br><span class="line">输入：5          输出：89</span><br><span class="line">解释：√((3^4+5*6^5)/5)=88.27...，向上取整结果是89。</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">self, num:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> math.ceil(math.sqrt(( <span class="number">3</span> ** <span class="number">4</span> + <span class="number">5</span> * <span class="number">6</span> ** <span class="number">5</span>) / num))</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.function(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>向上取整：math.ceil()</li><li>向下取整：math.floor()、整除”&#x2F;&#x2F;“</li><li>四舍五入：round()——<em><strong>*奇数向远离0取整，偶数去尾取整；或言之：奇数进位，偶数去尾*</strong></em></li><li>向0取整：int()</li></ul><h3 id="1-4-句子拼写检查-25年原题"><a href="#1-4-句子拼写检查-25年原题" class="headerlink" title="1.4:句子拼写检查(25年原题)"></a>1.4:句子拼写检查(25年原题)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一段英文句子，判断句中单词拼写是否满足以下规则。</span><br><span class="line">除以下特殊情况外，句子中第一个单词首字母必须大写，其它所有单词小写：</span><br><span class="line">1. 如果句中的某个单词或短语，字母全部为大写，则该单词或短语拼写正确。比如“USA”、“UK”、“JUST  DO  IT”等；</span><br><span class="line">2. “Python”、“Java”、“MachineLearning”、“DataMining”四个单词必须为双引号中给出的形式，否则拼写不正确；</span><br><span class="line">3. 如果句中单词为“数字+字母”的混合形式，比如“5G”，该单词所有字母全部大写。</span><br><span class="line">任务要求</span><br><span class="line">1. 输入英文句子为 str 类型，输出为 bool 类型；</span><br><span class="line">2. 如果句子满足规则要求，程序返回结果为 True；否则返回 False。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;I love Python&#x27;        输出：True</span><br><span class="line">输入：&#x27;python love me&#x27;        输出：False</span><br><span class="line">输入： &#x27;JUST DO IT&#x27;        输出：True</span><br><span class="line">输入： &#x27;I come from HK&#x27;        输出：True</span><br><span class="line">输入： &#x27;Machinelearning is so hot&#x27;        输出：False</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-重复子字符串"><a href="#1-5-重复子字符串" class="headerlink" title="1.5:重复子字符串"></a>1.5:重复子字符串</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个字符串 s，判断它是否由它的子串重复多次构成。如果由子串重复多次构成，输出子串，否则输出整个字符串。</span><br><span class="line">任务要求</span><br><span class="line">给定字符串 s 为 str 类型，输出字符串为 str 类型。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;abcabc&#x27;</span><br><span class="line">输出：&#x27;abc&#x27;</span><br><span class="line"></span><br><span class="line">输入：&#x27;abefd&#x27;</span><br><span class="line">输出：&#x27;abefd&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入：&#x27;&#x27;</span><br><span class="line">输出：&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数-25年原题"><a href="#动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数-25年原题" class="headerlink" title="动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数(25年原题)"></a>动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数(25年原题)</h3><blockquote><p>问题描述：<br>设A 和B 是2 个字符串。要用最少的字符操作将字符串A 转换为字符串B。<br>这里所说的字符操作包括<br>(1)删除一个字符；<br>(2)插入一个字符；<br>(3)将一个字符改为另一个字符。<br>将字符串A变换为字符串B 所用的最少字符操作次数也称为字符串A到B 的编辑距离，记为 D(A,B)。<br>试设计一个有效算法，对任给的2 个字符串A和B，计算出它们的编辑距离D(A,B)。</p></blockquote><h1 id="模块二-网页处理与文本分析"><a href="#模块二-网页处理与文本分析" class="headerlink" title="模块二 网页处理与文本分析"></a>模块二 网页处理与文本分析</h1><h3 id="2-1-选取网页表格中的数字"><a href="#2-1-选取网页表格中的数字" class="headerlink" title="2.1:选取网页表格中的数字"></a>2.1:选取网页表格中的数字</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个由表格构成的网页，返回指定位置中的数字，数字类型要转换为 int 类型。</span><br><span class="line">后台给出指定位置，位置由行（row）和列（col）构成，如 row = 2, col = 1, 表示第二行第一列，对应的数字是 249；</span><br><span class="line">程序返回的数字必须是 int 类型，类型不正确将导致结果不正确；</span><br><span class="line">后台给出的所有的位置都在表格中，无需考虑边界情况；</span><br><span class="line">表格的第一行是列名，由 A-Z 构成，共 26 列；第一列是行索引，由 1-30 构成，共 30 行。</span><br><span class="line">任务要求</span><br><span class="line">程序给出 int 类型的参数 row 和 col；</span><br><span class="line">程序返回参数是 int 类型。</span><br><span class="line">测试用例</span><br><span class="line">输入：row=29, col=20</span><br><span class="line">输出：252</span><br><span class="line">解释：表格第 29 行第 20 列中的数字是 252</span><br><span class="line">输入：row=23, col=15</span><br><span class="line">输出：582</span><br><span class="line">解释：表格第 23 行第 15 列中的数字是 252</span><br><span class="line">输入：row=10, col=11</span><br><span class="line">输出：219</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/random-num/index.html</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self, row: <span class="built_in">int</span>, col: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/random-num/index.html&#x27;</span></span><br><span class="line">responese = requests.get(url=url)</span><br><span class="line">responese.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(responese.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">trs = bs.select(<span class="string">&#x27;body &gt; table &gt; tbody:nth-child(2) &gt; tr&#x27;</span>)</span><br><span class="line">res = trs[row-<span class="number">1</span>].select(<span class="string">&#x27;td&#x27;</span>)[col].get_text()</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(res)</span><br><span class="line">    </span><br><span class="line">solu = Solution()</span><br><span class="line"><span class="built_in">print</span>(solu.fun(<span class="number">23</span>,<span class="number">15</span>))</span><br></pre></td></tr></table></figure><h3 id="2-2-商品信息关键词权重计算"><a href="#2-2-商品信息关键词权重计算" class="headerlink" title="2.2:商品信息关键词权重计算"></a>2.2:商品信息关键词权重计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line"></span><br><span class="line">根据提供的商品文本信息，对商品的标题内容、属性内容和描述内容进行分词（不包含标题和商品的属性名），完成文本分析工作。</span><br><span class="line">请根据以上要求，将以下所需的函数补充完整。</span><br><span class="line">本任务提供了 jieba 中文分词库和 requests 库。</span><br><span class="line">任务要求</span><br><span class="line">1. 构建函数 wordTfidf()，对商品中关键词，计算其TF-IDF值；</span><br><span class="line">2. 返回文本中 TF-IDF 最大的前5个关键词，返回结果为 list 数据类型；</span><br><span class="line">3. 只保留词性为 n、nr、ns 的关键词；</span><br><span class="line">4. 下方给出的文本编码为UTF-8。</span><br><span class="line">测试用例</span><br><span class="line">输入：任务中商品信息</span><br><span class="line">输出：[&#x27;裙子&#x27;, &#x27;***&#x27;, &#x27;***&#x27;, ...]</span><br><span class="line">（此处隐藏剩余四个关键词的数据）</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/61/fj_chiffon_lady_dress.txt</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><p>对商品中关键词，计算其TF-IDF值；</p><p>返回文本中 TF-IDF 最大的前5个关键词，返回结果为 list 数据类型；</p><p> 只保留词性为 n、nr、ns 的关键词；</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 运行或提交代码不需要自己编写测试用例，后台自动进行测试检查。</span></span><br><span class="line"><span class="comment"># 2. 您编写代码的区域需要限制在Solution类或其他类和函数体内，保证输入与输出符合任务要求即可。</span></span><br><span class="line"><span class="comment"># 3. 点击“提交代码”按钮，系统将查看程序是否正确，并保存代码，记录任务数据。</span></span><br><span class="line"><span class="comment"># 4. 提交代码次数越多，任务得分越低。</span></span><br><span class="line"><span class="comment"># 5. 点击右上方“结束任务”按钮，系统将在后台计算任务得分，任务结束。</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> jieba <span class="keyword">import</span> analyse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordTfidf</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/61/fj_chiffon_lady_dress.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        <span class="comment"># 使用jieba的analyse模块的extract_tags函数来提取关键词</span></span><br><span class="line">        <span class="comment"># zt.text是从网页获取到的文本内容</span></span><br><span class="line">        <span class="comment"># topK=5表示只提取最重要的5个关键词</span></span><br><span class="line">        <span class="comment"># allowPOS=(&quot;n&quot;, &quot;nr&quot;, &quot;ns&quot;)表示只提取名词、人名、地名这几种词性的关键词</span></span><br><span class="line">        jg = jieba.analyse.extract_tags(zt.text,topK=<span class="number">5</span>,allowPOS=(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;nr&quot;</span>,<span class="string">&quot;ns&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> jg</span><br></pre></td></tr></table></figure><h3 id="2-3-微信公众号排行榜分析-25年原题"><a href="#2-3-微信公众号排行榜分析-25年原题" class="headerlink" title="2.3:微信公众号排行榜分析(25年原题)"></a>2.3:微信公众号排行榜分析(25年原题)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">下方的网页为微信公共号数据分析展示页，网页数量为1。</span><br><span class="line">请根据网页给出的信息，完成以下任务，将右边的函数 weixinData() 补充完整。</span><br><span class="line">给定原创排行榜里任一微信公众号的名称，请判断该公众号是否满足以下条件：</span><br><span class="line">1.“头条平均阅读”数 &gt; 90000</span><br><span class="line">2.“原创平均阅读”数 &gt; 80000</span><br><span class="line">3.“预估活跃粉丝”数 &lt; 300万</span><br><span class="line">如果满足，函数 weixinData() 返回大写英文单词“YES”，否则返回“NO”。</span><br><span class="line">任务要求</span><br><span class="line">1. 函数接收 str 数据类型的微信公众号名称 name；</span><br><span class="line">2. 函数返回为英文字符“YES”或“NO”，返回参数为 str 数据类型；</span><br><span class="line">3. 不得修改函数 weixinData() 的名称；</span><br><span class="line">4. 题目所需网站链接已经在下方给出，编码方式为UTF-8。</span><br><span class="line">测试用例</span><br><span class="line">输入：“占豪”            输出：“NO”</span><br><span class="line">输入：“Vista看天下” 输出：“YES”</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/weixindata.html</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weixinData</span>(<span class="params">self, name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        data_list = &#123;&#125;</span><br><span class="line">        url:<span class="built_in">str</span> = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/weixindata.html&#x27;</span></span><br><span class="line">        response = requests.get(url=url)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        table = soup.find_all(<span class="string">&#x27;table&#x27;</span>, class_=<span class="string">&#x27;table&#x27;</span>)</span><br><span class="line">        trs = table[<span class="number">1</span>].find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            tds = tr.find_all(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            wxname = tds[<span class="number">1</span>].select(<span class="string">&#x27;span &gt; span&#x27;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">            <span class="comment"># 头条平均阅读 , 原创平均阅读 , 预估活跃粉丝</span></span><br><span class="line">            data_list[wxname] = [tds[<span class="number">4</span>].get_text(), tds[<span class="number">7</span>].get_text(), tds[<span class="number">3</span>].get_text()]</span><br><span class="line">        <span class="built_in">print</span>(data_list)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> data_list.keys():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">        <span class="comment"># 当前名字</span></span><br><span class="line">        acdata = data_list[name]</span><br><span class="line">        <span class="comment"># print(acdata)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(acdata)):</span><br><span class="line">            <span class="keyword">if</span> acdata[i][-<span class="number">2</span>:] == <span class="string">&#x27;万+&#x27;</span>:</span><br><span class="line">                acdata[i] = acdata[i].split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;00000&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> acdata[i]:</span><br><span class="line">                acdata[i] = acdata[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            acdata[i] = <span class="built_in">int</span>(acdata[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 头条平均阅读 &gt; 9万</span></span><br><span class="line">        <span class="comment"># 原创平均阅读 &gt; 8万</span></span><br><span class="line">        <span class="comment"># 预估活跃粉丝 &lt; 300万</span></span><br><span class="line">        <span class="keyword">if</span> (acdata[<span class="number">0</span>] &gt; <span class="number">900000</span>) <span class="keyword">and</span> (acdata[<span class="number">1</span>] &gt; <span class="number">800000</span>) <span class="keyword">and</span> (acdata[<span class="number">2</span>] &lt; <span class="number">300</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.weixinData(<span class="string">&#x27;Vista看天下&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>第二次编写</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weixinData</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/weixindata.html&#x27;</span></span><br><span class="line">response =  requests.get(url)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">trs = bs.select(<span class="string">&#x27;#XiGuaDataPage &gt; div.d-main.d-main-w &gt; div.rank-industry &gt; div.wrapper-col-right.wrapper-col-all &gt; table &gt; tbody &gt; tr&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line"><span class="keyword">if</span> tr.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;js-rank-detail-btn&#x27;</span>).get_text() == name:</span><br><span class="line"><span class="comment"># 头条平均阅读</span></span><br><span class="line">tt = tr.select_one(<span class="string">&#x27;td:nth-child(5)&#x27;</span>).get_text()</span><br><span class="line">tt = <span class="built_in">int</span>(tt) <span class="keyword">if</span> tt[-<span class="number">2</span>] != <span class="string">&#x27;万&#x27;</span> <span class="keyword">else</span> <span class="built_in">int</span>(tt[:-<span class="number">2</span>]) * <span class="number">10000</span></span><br><span class="line">tt = <span class="literal">True</span> <span class="keyword">if</span> tt &gt; <span class="number">90000</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原创平均阅读</span></span><br><span class="line">yc = tr.select_one(<span class="string">&#x27;td:nth-child(8)&#x27;</span>).get_text()</span><br><span class="line">yc = <span class="built_in">int</span>(yc) <span class="keyword">if</span> yc[-<span class="number">2</span>] != <span class="string">&#x27;万&#x27;</span> <span class="keyword">else</span> <span class="built_in">int</span>(yc[:-<span class="number">2</span>]) * <span class="number">10000</span></span><br><span class="line">yc = <span class="literal">True</span> <span class="keyword">if</span> yc &gt; <span class="number">80000</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预估活跃粉丝</span></span><br><span class="line">yg = tr.select_one(<span class="string">&#x27;td:nth-child(4)&#x27;</span>).get_text()</span><br><span class="line">yg = <span class="literal">True</span> <span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">float</span>(yg[:-<span class="number">1</span>])) &lt; <span class="number">300</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tt <span class="keyword">and</span> yc <span class="keyword">and</span> yg:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;No&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;未找到&#x27;</span></span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line"><span class="built_in">print</span>(solu.weixinData(<span class="string">&#x27;Vista看天下&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="2-4-爱丽丝梦游仙境文本规范化"><a href="#2-4-爱丽丝梦游仙境文本规范化" class="headerlink" title="2.4:爱丽丝梦游仙境文本规范化"></a>2.4:爱丽丝梦游仙境文本规范化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">采用Python自带的函数库进行数据操作，完成任务下方《爱丽丝梦游仙境》英文文本词频的分析。</span><br><span class="line">请将右边的函数  aliceText() 补充完整，使其能够输出某个单词的词频。</span><br><span class="line">任务要求</span><br><span class="line">1. 不得直接使用 Jieba 库对文本进行分词；</span><br><span class="line">2. 函数 aliceText() 接收一个英文单词 word，str 数据类型；返回该单词的词频，int 数据类型；</span><br><span class="line">3. 只保留单词长度大于等于 3 的单词的词频统计；</span><br><span class="line">4. 英文单词不区分大小写；</span><br><span class="line">5. 不同时态和单复数的英文单词为不同英文单词，不需要合并词频统计。如果文本中没有该单词，词频为0；</span><br><span class="line">6. 文本可以使用 requests 库进行读取，UTF-8 编码方式，否则无法正确读取文本。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;Pictures&#x27;        输出：3</span><br><span class="line">输入：&#x27;nothing&#x27;        输出：13</span><br><span class="line">输入：&#x27;caterpillar&#x27;     输出：14</span><br><span class="line">输入：&#x27;python&#x27;          输出：0</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/76/fj_alice_adventure.txt</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><ul><li>保留单词长度 &gt;&#x3D; 3</li><li>不区分大小写</li></ul></blockquote><p>做题思路</p><blockquote><ul><li>数据清洗：清除空格、换行、单词长度&lt; 3</li><li>全部转换为小写</li><li>使用 count 函数 统计单词出现的次数</li></ul></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word:<span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url:<span class="built_in">str</span> = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/76/fj_alice_adventure.txt&#x27;</span></span><br><span class="line">        response = requests.get(url=url)</span><br><span class="line">        response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        data = response.text</span><br><span class="line">        data = data.lower()  <span class="comment"># 转换为小写</span></span><br><span class="line">        <span class="comment"># 判断字符长度</span></span><br><span class="line">        st = data</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        index_bool = <span class="literal">True</span>  <span class="comment"># 判断第一次 &gt;= 3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(st)):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= st[i] &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> index &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> index_bool:</span><br><span class="line">                        res += st[i-<span class="number">2</span>:i+<span class="number">1</span>]</span><br><span class="line">                        index_bool = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += st[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = <span class="number">0</span></span><br><span class="line">                index_bool = <span class="literal">True</span></span><br><span class="line">                res += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="comment"># 判断出现的次数</span></span><br><span class="line">        <span class="keyword">return</span> res.count(word.lower(),<span class="number">0</span>,<span class="built_in">len</span>(st))</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.aliceText(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 运行或提交代码不需要自己编写测试用例，后台自动进行测试检查。</span></span><br><span class="line"><span class="comment"># 2. 您编写代码的区域需要限制在Solution类或其他类和函数体内，保证输入与输出符合任务要求即可。</span></span><br><span class="line"><span class="comment"># 3. 点击“提交代码”按钮，系统将查看程序是否正确，并保存代码，记录任务数据。</span></span><br><span class="line"><span class="comment"># 4. 提交代码次数越多，任务得分越低。</span></span><br><span class="line"><span class="comment"># 5. 点击右上方“结束任务”按钮，系统将在后台计算任务得分，任务结束。</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        response = requests.get(<span class="string">&#x27;http://72.itmc.org.cn/JS001/data/user/16937/76/fj_alice_adventure.txt&#x27;</span>)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        text = response.text</span><br><span class="line">        <span class="comment"># 使用正则表达式提取单词</span></span><br><span class="line">        words = re.findall(<span class="string">r&#x27;\w+&#x27;</span>, text.lower())</span><br><span class="line">        <span class="comment"># 筛选出长度大于等于3的单词</span></span><br><span class="line">        filtered_words = [word <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> <span class="built_in">len</span>(word) &gt;= <span class="number">3</span>]</span><br><span class="line">        </span><br><span class="line">        index = filtered_words.count(word.lower())</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-影片票房任务"><a href="#2-5-影片票房任务" class="headerlink" title="2.5:影片票房任务"></a>2.5:影片票房任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定内地某日票房排行榜，输入指定影片名称 movie_name，如：&#x27;金刚川&#x27;。完成以下任务：</span><br><span class="line">1. 任务一：获取指定影片的上映天数。如“金刚川”上映20天，返回 20；“一日成交”上映首日，返回0，“翱翔雄心”点映，返回 -1；</span><br><span class="line">2. 任务二：获取指定影片的综合票房（万元）。如“金刚川”，返回 432.33；</span><br><span class="line">3. 任务三：获取指定影片的排片占比。如“金刚川”，返回 0.248。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收 str 类型的变量 movie_name，返回 list 类型的变量；</span><br><span class="line">2. 返回列表包含参数如下：[任务一：int, 任务二：float，任务三：float]；</span><br><span class="line">3. 任务一中，如果是上映天数是“上映首日”，返回0；如果上映天数是“点映”，返回 -1；</span><br><span class="line">4. 任务三中需要将百分比形式转换为小数点形式。如 &#x27;24.8%&#x27; 需要转换为 0.248；如果票房 &lt;0.1%，返回 0.001；</span><br><span class="line">5. 票房信息排行榜在下方给出，utf-8编码。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;金刚川&#x27;</span><br><span class="line">输出：[20, 431.33, 0.248]</span><br><span class="line"></span><br><span class="line">输入：&#x27;半条棉被&#x27;</span><br><span class="line">输出：[69, 2.54, 0.001]</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/box_office_on_a_certain_day.html</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><ul><li>通过 电影名称</li><li>获取上映时间<ul><li>如果是上映天数是“上映首日”，返回0；如果上映天数是“点映”，返回 -1；</li></ul></li><li>获取 综合票房（万元<ul><li>“金刚川”，返回 432.33；</li></ul></li><li>获取 排片占比<ul><li>‘24.8%’ 需要转换为 0.248；如果票房 &lt;0.1%，返回 0.001；</li><li>先判断文字 &lt;0.1%</li><li>数字处理  <code>float(s[:-1]) / 100</code></li></ul></li><li>接受 movie_name: str</li><li>返回<ul><li>[任务一：int, 任务二：float，任务三：float]；</li></ul></li></ul></blockquote><p>做题思路</p><blockquote><p>先把所以数据获取过来</p><p>找到 电影名称 对应的 行数</p><p>找到后 单独对 各个任务 进行处理</p><p>存储到一个list 里面 最后返回</p></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">BoxOfficeSpider</span>(<span class="params">self, movie_name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/box_office_on_a_certain_day.html&#x27;</span></span><br><span class="line">        response = requests.get(url=url)</span><br><span class="line">        response.encoding = <span class="string">&#x27;uft-8&#x27;</span></span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        trs = soup.select(<span class="string">&#x27;#app &gt; div &gt; div.home-content &gt; div &gt; div.box-table &gt; table &gt; tbody &gt; tr&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(trs)</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trs:</span><br><span class="line">            <span class="comment"># 找电影名字</span></span><br><span class="line">            <span class="keyword">if</span> movie_name == i.find(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;movie-name&#x27;</span>).get_text():</span><br><span class="line">                <span class="comment"># 任务一: 上映时间</span></span><br><span class="line">                rwone = i.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;releaseInfo&#x27;</span>).get_text()</span><br><span class="line">                <span class="keyword">if</span> rwone == <span class="string">&#x27;上映首日&#x27;</span>:</span><br><span class="line">                    res[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> rwone == <span class="string">&#x27;点映&#x27;</span>:</span><br><span class="line">                    res[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># 把数字提取出来</span></span><br><span class="line">                    numlist = [char <span class="keyword">for</span> char <span class="keyword">in</span> rwone <span class="keyword">if</span> char.isdigit()]</span><br><span class="line">                    resnum = <span class="string">&#x27;&#x27;</span>.join(numlist)</span><br><span class="line">                    res.append(<span class="built_in">int</span>(resnum))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 任务二: 综合票房（万元</span></span><br><span class="line">                res.append(<span class="built_in">float</span>(i.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;boxDesc-wrap&#x27;</span>).get_text()))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 任务三: 排片占比  24.8%&#x27; 需要转换为 0.248</span></span><br><span class="line">                s = i.select_one(<span class="string">&#x27;td:nth-child(4) &gt; div&#x27;</span>).get_text()</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">&#x27;&lt;0.1%&#x27;</span>:</span><br><span class="line">                    res.append(<span class="number">0.001</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    float_value = <span class="built_in">float</span>(s[:-<span class="number">1</span>]) / <span class="number">100</span></span><br><span class="line">                    res.append(float_value)</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.BoxOfficeSpider(<span class="string">&quot;半条棉被&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BoxOfficeSpider</span>(<span class="params">self, movie_name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">res = [] <span class="comment"># [任务一：int, 任务二：float，任务三：float]</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://72.itmc.org.cn/JS001/open/show/box_office_on_a_certain_day.html&#x27;</span>)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">trs = bs.select(<span class="string">&#x27;#app &gt; div &gt; div.home-content &gt; div &gt; div.box-table &gt; table &gt; tbody &gt; tr&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line"><span class="comment"># 通过电影名找打该电影</span></span><br><span class="line"><span class="keyword">if</span> tr.find(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;movie-name&#x27;</span>).get_text() == movie_name:</span><br><span class="line"><span class="comment"># 任务一: 上映天数</span></span><br><span class="line">syts = tr.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;releaseInfo&#x27;</span>).get_text()</span><br><span class="line"><span class="keyword">if</span> syts == <span class="string">&#x27;上映首日&#x27;</span>:</span><br><span class="line">syts = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> syts == <span class="string">&#x27;点映&#x27;</span>:</span><br><span class="line">syts = -<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">syts = <span class="built_in">int</span>(syts[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务二: 综合票房</span></span><br><span class="line">zhpf = tr.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;boxDesc-wrap&#x27;</span>).get_text()</span><br><span class="line">zhpf = <span class="built_in">round</span>(<span class="built_in">float</span>(zhpf), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务三: 排片占比</span></span><br><span class="line">pmzb = tr.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;countRate-wrap&#x27;</span>).get_text()</span><br><span class="line"><span class="keyword">if</span> pmzb == <span class="string">&#x27;&lt;0.1%&#x27;</span>:</span><br><span class="line">pmzb = <span class="number">0.001</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pmzb = <span class="built_in">float</span>(pmzb[:-<span class="number">1</span>]) / <span class="number">100</span></span><br><span class="line"></span><br><span class="line">res.append(syts)</span><br><span class="line">res.append(zhpf)</span><br><span class="line">res.append(pmzb)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line"><span class="built_in">print</span>(solu.BoxOfficeSpider(<span class="string">&#x27;半条棉被&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="2-6-商品搜系结果分析"><a href="#2-6-商品搜系结果分析" class="headerlink" title="2.6:商品搜系结果分析"></a>2.6:商品搜系结果分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">根据任务详情下方提供的网页（数量为1），完成商品搜索结果分析。</span><br><span class="line">请将右侧的函数 itemSearch() 补充完整，使其能完成以下功能：</span><br><span class="line">对于网页中出现的任一网店名称 ，函数返回以下信息，请将以上获取的信息保存在数组中，按顺序返回。</span><br><span class="line">任务要求</span><br><span class="line">该网店对应商品，是否参与满减促销（非满件促销），返回值为 True 或 False；</span><br><span class="line">该网店对应商品的价格，是否存在会员价，如果存在，则返回会员价，返回类型为 float（保留1位小数），如果不存在，返回原始价格；</span><br><span class="line">该网店对应商品的评论数，返回类型为 int；</span><br><span class="line">如果该网店存在两个及以上商品，返回价格较高的商品信息；如果商品价格相同，返回搜索结果最靠前的商品信息；</span><br><span class="line">链接地址在下方专题地址中给出，点击链接可以直接获取。</span><br><span class="line"></span><br><span class="line">测试用例</span><br><span class="line">输入：&quot;花花公子官方旗舰店&quot;    输出：[False, 139.0, 4400]</span><br><span class="line">解释：该网店价格最高的商品未参加满减促销活动，对应价格为139.0，商品评论数为4400</span><br><span class="line"></span><br><span class="line">输入：&quot;陌芙丝欧旗舰店&quot;           输出：[True, 139.0, 12000]</span><br><span class="line">解释：该网店价格最高的商品参加满减促销活动，对应价格为139.0，商品评论数为12000</span><br><span class="line"></span><br><span class="line">输入：&quot;合众服饰专营店&quot;           输出：[True,118.0,10000]</span><br><span class="line">解释：该网店价格最高的商品参加满减促销活动，对应价格为118.0，商品评论数为10000</span><br><span class="line">说明</span><br><span class="line">1. 会员价格是商品价格右边小字出现的价格信息；</span><br><span class="line">2. 评论数为“1万+”就代表评论数为“10000”；</span><br><span class="line">3. 函数接收“网店名称”这一变量，返回类型为数组；</span><br><span class="line">4. 不得修改函数的名称；</span><br><span class="line">5.“满减促销”和“满件促销”是不一样的概念；</span><br><span class="line">6. 网页中存在相同店铺名称的商品，请注意甄别。</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/ecjd.html</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><p>接受： 网店名称</p><ul><li>满减促销 bool</li><li>是否存在会员价，如果存在，则返回会员价 float (保留1位小数)</li><li>评论数  int</li><li>如果该网店存在两个及以上商品，返回价格较高的商品信息；如果商品价格相同，返回搜索结果最靠前的商品信息；</li></ul></blockquote><p>做题思路</p><blockquote><p>先判断网店 &gt;&#x3D; 2 , 如果大于等于二 进行 判断价格 选择价格较为高的 , 如果价格相同选择第一个  √</p><p>对筛选出来的数据, 进行判断 三个任务</p><p>三个任务</p><ul><li>满减促销  是否参与满减促销（非满件促销）  True</li><li>是否存在会员价，如果存在，则返回会员价 float (保留1位小数)</li><li>评论数  int</li></ul><p>参数</p><ul><li>接受 店铺名称</li><li>返回 list</li></ul></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">itemSearch</span>(<span class="params">self,name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/ecjd.html&#x27;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        lis = soup.select(<span class="string">&#x27;#J_goodsList &gt; ul &gt; li&#x27;</span>)</span><br><span class="line">        res = []</span><br><span class="line">        li = <span class="literal">None</span></span><br><span class="line">        li_bool = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="keyword">if</span> name == i.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;J_im_icon&#x27;</span>).get_text():</span><br><span class="line">                <span class="keyword">if</span> li_bool:  <span class="comment"># 把第一个li 赋值过去</span></span><br><span class="line">                    li = i</span><br><span class="line">                    li_bool = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 价格 </span></span><br><span class="line">                jg = li.select_one(<span class="string">&#x27;div.p-price i&#x27;</span>).get_text()</span><br><span class="line">                <span class="comment"># 当 后面的价格贵的时候 进行替换</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">float</span>(jg) &lt; <span class="built_in">float</span>(i.select_one(<span class="string">&#x27;div.p-price i&#x27;</span>).get_text()):</span><br><span class="line">                    li = i</span><br><span class="line">        <span class="comment"># 是否参与 满减活动</span></span><br><span class="line">        <span class="keyword">if</span> li.find(<span class="string">&#x27;i&#x27;</span>,&#123;<span class="string">&#x27;data-tips&#x27;</span>: <span class="string">&#x27;本商品参与满减促销&#x27;</span>&#125;):</span><br><span class="line">            res.append(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 价格标签</span></span><br><span class="line">        price = li.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;p-price&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断 是否存在 会员价格</span></span><br><span class="line">        <span class="keyword">if</span> price.find(<span class="string">&#x27;span&#x27;</span>,&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&quot;PLUS会员专享价&quot;</span>&#125;):</span><br><span class="line">            res.append(<span class="built_in">float</span>(price.find(<span class="string">&#x27;span&#x27;</span>,&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&quot;PLUS会员专享价&quot;</span>&#125;).get_text()[<span class="number">1</span>:]))</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 如果不存在会员价格</span></span><br><span class="line">            res.append(<span class="built_in">float</span>(price.find(<span class="string">&#x27;i&#x27;</span>).get_text()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 评论数  int</span></span><br><span class="line">        pl = li.select_one(<span class="string">&#x27;div.p-commit a&#x27;</span>).get_text()[:-<span class="number">1</span>]  <span class="comment"># 去掉最后一个加号</span></span><br><span class="line">        <span class="comment"># 判断最后面是不是 万</span></span><br><span class="line">        <span class="keyword">if</span> pl[-<span class="number">1</span>] == <span class="string">&#x27;万&#x27;</span>:</span><br><span class="line">            pl = <span class="built_in">float</span>(pl[:-<span class="number">1</span>]) * <span class="number">10000</span></span><br><span class="line">        </span><br><span class="line">        res.append(<span class="built_in">int</span>(pl))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.itemSearch(<span class="string">&#x27;花花公子官方旗舰店&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">先判断网店 &gt;= 2 , 如果大于等于二 进行 判断价格 选择价格较为高的 , 如果价格相同选择第一个  √</span></span><br><span class="line"><span class="string">对筛选出来的数据, 进行判断 三个任务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">三个任务</span></span><br><span class="line"><span class="string">- 满减促销  是否参与满减促销（非满件促销）  True</span></span><br><span class="line"><span class="string">- 是否存在会员价，如果存在，则返回会员价 float (保留1位小数)</span></span><br><span class="line"><span class="string">- 评论数  int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 接受 店铺名称</span></span><br><span class="line"><span class="string">- 返回 list</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">url:<span class="built_in">str</span> = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/ecjd.html&#x27;</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">res = []</span><br><span class="line">lis = bs.select(<span class="string">&#x27;#J_goodsList &gt; ul &gt; li&#x27;</span>) <span class="comment"># 拿到所有的商品</span></span><br><span class="line">lis_name = []</span><br><span class="line">max_num = []</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line"><span class="comment"># 如果不是空，就是找对了</span></span><br><span class="line"><span class="keyword">if</span> li.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>: name&#125;):</span><br><span class="line"><span class="comment"># 价格</span></span><br><span class="line">lis_name.append(li)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis_name:</span><br><span class="line">perice = i.select_one(<span class="string">&#x27;div &gt; div.p-price &gt; strong &gt; i&#x27;</span>).get_text()</span><br><span class="line">max_num.append(perice)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(max(max_num))</span></span><br><span class="line"><span class="comment"># val = max[0]</span></span><br><span class="line"><span class="comment"># key = 0  没做 先判断网店 &gt;= 2 ,</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(1,len(max_num)):</span></span><br><span class="line"><span class="comment"># if val &gt; max_num:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = lis_name[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> i.find(<span class="string">&#x27;i&#x27;</span>, &#123;<span class="string">&#x27;data-tips&#x27;</span>: <span class="string">&#x27;本商品参与满减促销&#x27;</span>&#125;):</span><br><span class="line">res.append(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res.append(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;PLUS会员专享价&#x27;</span>&#125;):</span><br><span class="line">puls_perice = i.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;PLUS会员专享价&#x27;</span>&#125;).get_text()[<span class="number">1</span>:]</span><br><span class="line">puls_perice = <span class="built_in">round</span>(<span class="built_in">float</span>(puls_perice),<span class="number">1</span>) <span class="comment"># 保留一位小数</span></span><br><span class="line">res.append(puls_perice)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">perice = i.select_one(<span class="string">&#x27;div.p-price &gt; strong &gt; i&#x27;</span>).get_text()</span><br><span class="line">perice = <span class="built_in">round</span>(<span class="built_in">float</span>(perice), <span class="number">1</span>)</span><br><span class="line">res.append(perice)</span><br><span class="line"></span><br><span class="line">commit = i.select_one(<span class="string">&#x27;div.p-commit a&#x27;</span>).get_text()</span><br><span class="line">commit = <span class="built_in">int</span>(<span class="built_in">float</span>(commit[:-<span class="number">2</span>]) * <span class="number">10000</span>) <span class="keyword">if</span> commit[-<span class="number">2</span>] == <span class="string">&#x27;万&#x27;</span> <span class="keyword">else</span> commit[:-<span class="number">1</span>]</span><br><span class="line">res.append(commit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">solu  = Solution()</span><br><span class="line">res = solu.search(<span class="string">&#x27;陌芙丝欧旗舰店&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7-商品关键词权重分析"><a href="#2-7-商品关键词权重分析" class="headerlink" title="2.7:商品关键词权重分析"></a>2.7:商品关键词权重分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">请使用 杭州大牌女装.txt 文本完成提取文本中权重最高的 5 个关键词的任务。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序以数组的形式返回五个关键词，关键词类型是 str；</span><br><span class="line">2. 使用结巴库内置的TextRank 算法抽取关键词，只返回关键词，不必返回权重。关键词的词性必须是名词和动词；</span><br><span class="line">3. 返回的5个关键词至少要有4个关键词与系统内置的答案一致；</span><br><span class="line">4. 返回关键词不需要考虑顺序；</span><br><span class="line"></span><br><span class="line">5. 杭州大牌女装.txt使用 requests 库读取，UTF-8编码，链接在下方给出；</span><br><span class="line">6. Jieba库词性表及说明.xlsx 也在下方给出，作为参考。</span><br><span class="line"></span><br><span class="line">测试用例</span><br><span class="line">输入：无</span><br><span class="line">输出：[&#x27;印花&#x27; ，&#x27;关键词2&#x27;，&#x27;关键词3&#x27;，&#x27;关键词4&#x27;，&#x27;关键词5&#x27;]</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/77/fj_Jieba词性表及说明.xlsx</span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/77/fj_5392_hangzhou_top_woman_wear.txt</span><br></pre></td></tr></table></figure><h1 id="模块三-数据处理与分析"><a href="#模块三-数据处理与分析" class="headerlink" title="模块三 数据处理与分析"></a>模块三 数据处理与分析</h1><h3 id="3-1-电商订单数据清洗"><a href="#3-1-电商订单数据清洗" class="headerlink" title="3.1:电商订单数据清洗"></a>3.1:电商订单数据清洗</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 任务详情 </span><br><span class="line">请根据系统提供的订单数据表，按要求完成以下任务：</span><br><span class="line">统计订单表格中，商品描述(choice_description)中为“NaN”的数量，并将其批量替换为“banana”，</span><br><span class="line">请根据以上要求，将函数 nanCount() 补充完整，函数的返回值为整数值，既为“NaN”的数量。</span><br><span class="line">任务要求</span><br><span class="line">1. 订单数据表为以逗号为分隔符的csv文件，编码方式为 UTF-8；</span><br><span class="line">2. 注意：DataFrame 由后台生成，作为参数 order_data 传递到 nonCount() 中，不需要生成新的 DataFrame；</span><br><span class="line">3. DataFrame 读取为订单数据表；</span><br><span class="line">3. 返回值为 NaN 的数量，int 数据类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">订单数据访问地址请见下方：</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv</span><br></pre></td></tr></table></figure><h3 id="3-2-电商订单数据计算"><a href="#3-2-电商订单数据计算" class="headerlink" title="3.2:电商订单数据计算"></a>3.2:电商订单数据计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">请根据系统提供的订单数据表，按要求完成以下三个任务：</span><br><span class="line">传入一个字符串，返回订单总金额 (quantity * item_price) 最大或最小的商品，并返回商品的名称(item_name)。</span><br><span class="line">请根据以上要求，将函数 salesStr() 补充完整，函数的返回值为字符(str)，比如：&quot;Steak Burrito&quot;</span><br><span class="line">订单数据访问地址请见下方：</span><br><span class="line">字段名中文含义</span><br><span class="line">order_id 商品编号 </span><br><span class="line">quantity 数量 </span><br><span class="line">item_name 商品名称 </span><br><span class="line">choice_description 描述 </span><br><span class="line">item_price 单价 </span><br><span class="line">任务要求</span><br><span class="line">1. 传入一个字符串(&#x27;max&#x27; 或 &#x27;min&#x27;)，返回订单总金额最大或最小的商品的名称(item_name) ；</span><br><span class="line"></span><br><span class="line">2. 传入的字符串不区分大小写，即传入值可能是&quot;Max&quot;，也可能是&quot;max&quot;；</span><br><span class="line">3. 传入&quot;max&quot;，返回订单总金额 (quantity * item_price) 最大的商品名称；传入“min”，返回订单总金额 (quantity * item_price) 最小的商品名称；</span><br><span class="line">4. 返回字符串区分大小写，且保留字符串中间空格。</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/80/fj_order_data.csv</span><br></pre></td></tr></table></figure><h3 id="3-3-DataFrame计算平均值"><a href="#3-3-DataFrame计算平均值" class="headerlink" title="3.3:DataFrame计算平均值"></a>3.3:DataFrame计算平均值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个DataFrame对象 df，要求返回各行的平均值。</span><br><span class="line">具体操作如下：</span><br><span class="line">添加新列 &#x27;avg&#x27; 用于计算各行的平均值；</span><br><span class="line">使用数组返回新列 &#x27;avg&#x27;。</span><br><span class="line">任务要求</span><br><span class="line">程序接收 DataFrame 对象 df，返回结果是 list 数据类型；</span><br><span class="line">注意：平均值需要四舍五入保留两位小数。</span><br><span class="line">测试用例</span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">0123456</span><br><span class="line">024 27 7 23 25 7 21 </span><br><span class="line">116 30 8 4 26 30 8 </span><br><span class="line">218 28 7 17 17 16 25 </span><br><span class="line">输出：</span><br><span class="line">[19.14, 17.43, 18.29]</span><br><span class="line">解释：首先生成新列&#x27;avg&#x27;，需要注意平均数需要四舍五入保留小数点后两位</span><br><span class="line"></span><br><span class="line">0123456avg</span><br><span class="line">024 27 7 23 25 7 21 19.14 </span><br><span class="line">116 30 8 4 26 30 8 17.43 </span><br><span class="line">218 28 7 17 17 16 25 18.29 </span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">0123</span><br><span class="line">010 19 4 7 </span><br><span class="line">19 5 28 14 </span><br><span class="line">230 27 1 13 </span><br><span class="line">321 14 19 9 </span><br><span class="line">41 25 30 16 </span><br><span class="line"></span><br><span class="line">输出：[10.0, 14.0, 17.75, 15.75, 18.0]</span><br><span class="line"></span><br><span class="line">解释：首先生成新列&#x27;avg&#x27;，其次返回&#x27;avg&#x27;列</span><br><span class="line"></span><br><span class="line">0123avg</span><br><span class="line">010 19 4 7 10.00 </span><br><span class="line">19 5 28 14 14.00 </span><br><span class="line">230 27 1 13 17.75 </span><br><span class="line">321 14 19 9 15.75 </span><br><span class="line">41 25 30 16 18.00 </span><br></pre></td></tr></table></figure><h3 id="3-4-乐高商店收入计算"><a href="#3-4-乐高商店收入计算" class="headerlink" title="3.4:乐高商店收入计算"></a>3.4:乐高商店收入计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述</span><br><span class="line">我们需要完成乐高商店的分析，请你根据指引完成以下任务：</span><br><span class="line">使用 Pandas 读取数据；</span><br><span class="line">去掉没有价格的数据，将销量为空的数据填充为0；</span><br><span class="line">计算所有产品总收入；</span><br><span class="line">计算该数据中产品价格的平均值;</span><br><span class="line">程序后台传入产品标题title，要求计算该产品的收入（收入总计）；</span><br><span class="line">将总收入、平均价格、产品收入保存到列表里，返回给后台。</span><br><span class="line">题目要求</span><br><span class="line">程序传入标题title数据类型是str；</span><br><span class="line">程序传出数据类型是列表类型，列表中所有元素的数据类型均是 float；</span><br><span class="line">如果产品标题title存在多个，则计算相同title商品的总收入；</span><br><span class="line">平均价格需要四舍五入保留小数点后2位。</span><br><span class="line">测试用例</span><br><span class="line">输入：’乐高旗舰店官网大电影系列70837Shimmer&amp;Shine闪亮水疗馆玩具积木’</span><br><span class="line">输出；[xxx, xxx, 1598.0]</span><br><span class="line">解释：总收入和平均价格隐藏，当前产品收入总计是1598.0</span><br><span class="line">输入：’乐高旗舰店幻影忍者系列70668雷电忍者杰的暴风战机’</span><br><span class="line">输出：[xxx, xxx, 259073.0]</span><br><span class="line">解释：总收入和平均价格隐藏，当前产品收入总计是259073.0</span><br><span class="line">输入：’乐高旗舰店官网创意百变高手系列10261大型过山车积木成人送礼’</span><br><span class="line">输出：[xxx, xxx, 41986.0]</span><br><span class="line">数据说明</span><br><span class="line">文本数据是excel文件，字段含义如下：</span><br><span class="line">字段含义实例</span><br><span class="line">title 商品名 乐高旗舰店官网 LEGO积木 儿童玩具男孩 积木拼装玩具益智 </span><br><span class="line">age_range 商品对应的年龄等级 适用年纪6+岁 </span><br><span class="line">price 商品价格 899.0 </span><br><span class="line">sales_num 售卖数量 217.0 </span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/241/fj_lego_tmallshop_sales_data.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-5-部门平均薪资汇总计算"><a href="#3-5-部门平均薪资汇总计算" class="headerlink" title="3.5:部门平均薪资汇总计算"></a>3.5:部门平均薪资汇总计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务说明</span><br><span class="line">        读取给定的职工薪酬考勤簿，职工薪酬考勤簿由两个表格组成，分别是 基本薪资 工作表和 上班通勤 工作表。要求计算每一个部门内部的平均薪资，并把结果 降序 排列，返回给判定程序。</span><br><span class="line">        员工个人薪酬计算过程如下：</span><br><span class="line">        1.薪资由两部分组成， 月基本薪资 和 通勤工资，另外需要扣除需要缴纳的 社保费及公积金；</span><br><span class="line">        2.月基本薪资 = 基本薪资 + 岗位工资 + 绩效工资；</span><br><span class="line">        3.通勤工资中计算如下：</span><br><span class="line">            日薪 = (基本薪资 + 岗位工资 + 绩效工资) / 应出勤天数</span><br><span class="line">            时薪 = 日薪 / 8</span><br><span class="line">        4.通勤工资中，法定节假日加班薪资是工作日加班的 2 倍，周末加班工资是工作日加班的 1.5 倍，工作日加班工资与时薪 相同；</span><br><span class="line">        5.通勤工资需要扣除因请假导致的缺勤，请假/小时需要扣除的工资按照时薪计算。</span><br><span class="line">        6.社保费及公积金个人缴费按照社会保险缴费基数计算：</span><br><span class="line">            a.养老保险个人缴费比例是 8%</span><br><span class="line">            b.医疗保险个人缴费比例是 2%</span><br><span class="line">            c.失业保险个人缴费比例是 1%</span><br><span class="line">            d.公积金缴费比例是 10%</span><br><span class="line">       </span><br><span class="line">        示例：</span><br><span class="line">        小王基本薪资 2000，岗位工资 2000，社会保险缴费基数是 2000。绩效工资 0，应出勤天数 20 天，请假 1 天，工作日加班 8 小时，法定节假日加班 4 小时，周末加班 4 小时。</span><br><span class="line">        小王基本薪资+岗位工资+绩效工资是：2000 + 2000 = 4000；</span><br><span class="line">        小王时薪：4000 / 20 / 8 = 25；</span><br><span class="line">        小王加班工资：25 * 8 + 25 * 4 * 1.5 + 25 * 4 * 2 = 550；</span><br><span class="line">        小王请假扣除：25 * 8 = 200；</span><br><span class="line">        小王五险一金扣除：2000 * 0.08 + 2000 * 0.02 + 2000 * 0.01 + 2000 * 0.1 = 420；</span><br><span class="line">        小王本月实发工资：4000 + 550 - 200 - 420 = 3930。</span><br><span class="line">        假设小王所在部门有 5 个人，5 个人工资分别是 4050，4010，4120，4000，4500。小王所在部门的平均工资是：(3930+ 4010 + 4120 + 4000 + 4500) /5 = 4112。同理可算出其他部门的平均工资。</span><br><span class="line"></span><br><span class="line">        注意：返回结果需四舍五入保留小数点后两位！  </span><br><span class="line">        返回结果参数类型是 pd.Series。Series 的索引应为部门名，Series 的数据应为部门平均工资，Series 的 Name 属性应修改为 “平均薪资”。</span><br><span class="line">任务要求</span><br><span class="line">程序无需接收参数输入，需要返回结果参数的格式是 pd.Series；</span><br><span class="line">返回结果时需要四舍五入保留小数点后两位，计算过程内保留小数点后两位可能导致最后结果不正确；</span><br><span class="line">部门平均工资需要降序排列；</span><br><span class="line">本题所需的基本薪资表和上班通勤表均在职工薪酬工作簿中，按需读取。</span><br><span class="line">Series 数据的类型应为 float 64，Name 属性应为 “平均薪资”。</span><br><span class="line">index 的属性名应为部门。</span><br><span class="line">测试用例</span><br><span class="line">部分返回数据：</span><br><span class="line">部门  </span><br><span class="line">销售部       15767.86</span><br><span class="line">运营部       ****</span><br><span class="line">工程部       ****  </span><br><span class="line">财务部       ****  </span><br><span class="line">研发部       ****  </span><br><span class="line">市场部       ****  </span><br><span class="line">人力资源部    4233.27  </span><br><span class="line">Name: 平均薪资, dtype: float64附件信息</span><br><span class="line">职工薪酬簿.xlsx，职工薪酬工作簿由 基本薪资 工作表和 上班通勤 工作表组成。</span><br><span class="line">基本薪资工作表。基本薪资工作表包含个人所属部门，各部分薪资状况和社会保险缴纳基数。共 7 个部门共 50 条数据，其中只有销售部有绩效工资。</span><br><span class="line">上班通勤工作表。上班通勤工作表包含本月应出勤天数，实际出勤天数。请假加班天数等。工作表中的名字与基本薪资工作表中的名字一一对应。共 50 条数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-6-编制比较资产负债表"><a href="#3-6-编制比较资产负债表" class="headerlink" title="3.6:编制比较资产负债表"></a>3.6:编制比较资产负债表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务描述</span><br><span class="line"></span><br><span class="line">“A企业资产负债表.xlsx”文件的“比较资产负债表”包含 A 企业 2020 年和 2021 年的资产负债数据，请完成以下指定任务。</span><br><span class="line">使用 0 填充表格中的空值；</span><br><span class="line">计算 2021 年各项目变动额和变动率并添加相关数据列；</span><br><span class="line">程序接受某项目的项目名称 name，要求输出该项目对应的变动额和变动率。</span><br><span class="line">任务要求</span><br><span class="line"></span><br><span class="line">代码要编辑在 balance_sheet 函数下；</span><br><span class="line">变动额需要四舍五入保留小数点后 2 位，变动率需要四舍五入保留小数点后 4 位；</span><br><span class="line">变动额和变动率的数据类型都是浮点数数据类型；</span><br><span class="line">程序只判定 return后的结果值，输出（print）后的结果值不作为判断依据；</span><br><span class="line">程序返回结果的数据类型为列表。</span><br><span class="line"></span><br><span class="line">测试用例</span><br><span class="line"></span><br><span class="line">输入：name=&quot;负债总计&quot;</span><br><span class="line">输出：[26928392.51, 0.2567]</span><br><span class="line">解释：负债总计变动额是 26928392.51，变动率是 0.2567</span><br><span class="line"></span><br><span class="line">输入：name=&quot;无形资产&quot;</span><br><span class="line">输出：[-600000.0, -0.0667]</span><br><span class="line">解释：无形资产变动额是 -600000.0，变动率是 -0.0667</span><br><span class="line"></span><br><span class="line">输入：name=&quot;负债合计&quot;</span><br><span class="line">输出：[26928392.51, 0.2567]</span><br><span class="line"></span><br><span class="line">代码提示</span><br><span class="line"></span><br><span class="line">我们通过将 Series 转换为列表的形式，将其中的数字提取出来。</span><br><span class="line"></span><br><span class="line">通过如下案例，我们取出 DataFrame 中的 1。</span><br><span class="line">In [1]: import pandas as pd</span><br><span class="line"></span><br><span class="line"># 定义一个 DataFrame</span><br><span class="line">In [2]: df = pd.DataFrame([[1, 2], [3, 4]], columns=[&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class="line"></span><br><span class="line"># 预览下 df</span><br><span class="line">In [3]: df</span><br><span class="line">Out[3]:</span><br><span class="line">   A  B</span><br><span class="line">0  1  2</span><br><span class="line">1  3  4</span><br><span class="line"></span><br><span class="line"># 通过列名取出 A 列</span><br><span class="line">In [4]: df[&#x27;A&#x27;]</span><br><span class="line">Out[4]:</span><br><span class="line">0    1</span><br><span class="line">1    3</span><br><span class="line">Name: A, dtype: int64</span><br><span class="line"></span><br><span class="line"># 取出 A 列再将 A 列转换为列表</span><br><span class="line">In [5]: df[&#x27;A&#x27;].tolist()</span><br><span class="line">Out[5]: [1, 3]</span><br><span class="line"></span><br><span class="line"># 取出列表中的第一个元素，就是我们想要的 1</span><br><span class="line">In [6]: df[&#x27;A&#x27;].tolist()[0]</span><br><span class="line">Out[6]: 1</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/243/fj_Interprice_balance_data.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-7-某店铺不同地区销售情况分析福香"><a href="#3-7-某店铺不同地区销售情况分析福香" class="headerlink" title="3.7:某店铺不同地区销售情况分析福香"></a>3.7:某店铺不同地区销售情况分析福香</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述</span><br><span class="line">下方是某店铺在 2 月份的订单数据，共 28010 行、7 列。 在该数据中，每一行代表一笔订单，每一笔订单可以 看做是一位顾客（买家），价格相同的产品可视为同一产品；</span><br><span class="line">请编写程序，完成以下任务：</span><br><span class="line">程序传入参数 area（收货地址），要求计算该地区订单的’订单的付款转化率’、’买家全额支付的转化率’、’买家实际支付总金额’、’客单价’、’销量（订单量）最多的产品的价格’、’买家实际支付总金额在所有地区实际支付总金额中的占比’，并将结果以列表形式返回。</span><br><span class="line">题目要求</span><br><span class="line">程序接收 str 类型的 area，返回的结果为 list 数据类型；</span><br><span class="line">返回的结果中，列表中各个数据的数据类型为 str，其中转化率数据及占比数据需以百分比的形式输出，并且需要保留小数点后2位，如’13.14%’，其余结果不需要以百分比形式输出，但需要保留小数点后2位；</span><br><span class="line">如果某地区所有买家的买家实际支付金额为 0，即该地区没有付费行为。则该地区的’客单价’、’销量（订单量）最多的产品的价格’需返回字符串’本地区无销量’，其他结果则正常计算；</span><br><span class="line">如果该产品（订单）被全额退款，那么该产品不计入销量。</span><br><span class="line">参考公式</span><br><span class="line">付款转化率 = 付款订单数 / 总订单数；</span><br><span class="line">买家全额支付的转化率 = 买家全额支付的订单数 / 总订单数；</span><br><span class="line">客单价 = 实际支付金额 / 支付买家数；</span><br><span class="line">测试用例</span><br><span class="line">输入：area = ‘河南省’</span><br><span class="line">输出：[‘81.99%’, ‘61.18%’, ‘56354.03’, ‘92.84’, ‘37.00’, ‘2.96%’]</span><br><span class="line">解释：河南省’订单的付款转化率’为’81.99%’，’买家全额支付的转化率’为’61.18%’，’买家实际支付总金额’为’56354.03’，’客单价’为’92.84’，’销量（订单量）最多的产品的价格’为’37.00’，’买家实际支付总金额在所有地区实际支付总金额中的占比’为’2.96%’</span><br><span class="line"></span><br><span class="line">输入：area = ‘江苏省’</span><br><span class="line">输出：[‘86.78%’, ‘66.75%’, ‘159359.18’, ‘109.22’, ‘37.00’, ‘8.38%’]</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/240/fj_7568_tmall_order_report.csv</span><br></pre></td></tr></table></figure><h3 id="3-8-用户职位信息统计"><a href="#3-8-用户职位信息统计" class="headerlink" title="3.8:用户职位信息统计"></a>3.8:用户职位信息统计</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">请根据任务下方提供的用户职位统计信息表，完成以下任务：</span><br><span class="line">职位表中每个字段含义如下：</span><br><span class="line">字段说明</span><br><span class="line"></span><br><span class="line">user_id 用户序号 </span><br><span class="line"> </span><br><span class="line">age 用户年龄 </span><br><span class="line"> </span><br><span class="line">gender 用户性别 </span><br><span class="line"> </span><br><span class="line">occupation 用户职位 </span><br><span class="line"> </span><br><span class="line">zip_code 用户邮编 </span><br><span class="line"> </span><br><span class="line">编写一个职位统计函数 jobStatistics()，给定表格里的任一职位，统计其以下信息</span><br><span class="line">1. 任务一：统计该职位女性用户的百分占比（结果保留两位小数），输出数据类型为 str；</span><br><span class="line">2. 任务二：统计该职位女性用户百分占比在所有职位女性用户百分占比中的排名（降序），输出数据类型为 int。</span><br><span class="line">将以上2个结果保存在 数组(list) 中，按顺序返回。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收一个 str 类型的变量 op，返回一个 list 类型的变量；</span><br><span class="line">2. &quot;gender&quot; 列中，&quot;F&quot; 代表女性，&quot;M&quot; 代表男性；</span><br><span class="line">3. 返回结果格式如下：[任务一: str, 任务二: int]。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;artist&#x27;</span><br><span class="line">输出：[ &#x27;46.43%&#x27;, 4]</span><br><span class="line">解释：该职位中女性用户占据该职位所有用户的46.43%，该职位女性占比排名在所有职位女性占比排名中位列第 4</span><br><span class="line"></span><br><span class="line">输入：&#x27;student&#x27;</span><br><span class="line">输出：[&#x27;30.61%&#x27;, 10]</span><br><span class="line">解释：该职位中女性用户占据该职位所有用户的30.61%，该职位女性占比排名在所有职位女性占比排名中位列第 10</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/67/fj_jobstatics.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-9-某知名网站高质量视频主挖掘"><a href="#3-9-某知名网站高质量视频主挖掘" class="headerlink" title="3.9:某知名网站高质量视频主挖掘"></a>3.9:某知名网站高质量视频主挖掘</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">根据下方提供的某知名网站视频信息数据，构造一个打分模型，并根据分值挖掘高质量视频主，要求输入视频主的名字author，返回对应的UP主分层。</span><br><span class="line"></span><br><span class="line">IFL模型</span><br><span class="line">针对视频主的视频信息构建了IFL模型，以评估视频的质量。</span><br><span class="line"></span><br><span class="line">I (Interaction_rate)</span><br><span class="line">I 值反映的是平均每个视频的互动率，互动率越高，表明其视频更能产生用户的共鸣，使其有话题感。</span><br><span class="line">I = (总弹幕数 + 总评论数) / (总播放量 * 统计范围内视频数量) * 100。</span><br><span class="line"></span><br><span class="line">F (Frequence)</span><br><span class="line">F 值表示的是每个视频的平均发布周期，每个视频之间的发布周期越短，说明内容生产者创作视频的时间也就越短，创作时间太长，不是忠实粉丝的用户可能将其遗忘。</span><br><span class="line">F = (统计范围内最晚发布视频时间 - 最早发布视频时间) / 发布视频的数量。</span><br><span class="line">如果 F 的值为 0，表示该视频主仅发布一条视频。那么将 F 的值重新赋值为 F 的最大值 + 1，如原有数据中，F 的最大值是 100，那么就将 F 的最大值设置为 100 + 1 = 101。</span><br><span class="line"></span><br><span class="line">L (Like_rate)</span><br><span class="line">L值表示的是统计时间内发布视频的平均点赞率，越大表示视频质量越稳定，用户对up主的认可度也就越高。</span><br><span class="line">L = (点赞数 * 1 + 投币数 * 2 + 收藏数 * 3 + 分享数 * 4) / (播放量 * 发布视频数) * 100。</span><br><span class="line"></span><br><span class="line">维度打分</span><br><span class="line">维度确认的核心是分值确定，按照设定的标准，我们给每个视频主的 I/F/L 值打分，分值的大小取决于我们的偏好，</span><br><span class="line">即我们越喜欢的行为，打的分数就越高 ：</span><br><span class="line">- I 值。表示 up 主视频的平均评论率，这个值越大，就说明其视频越能使用户有话题，当I值越大时，分值越大。</span><br><span class="line">- F 值。表示视频的平均发布周期，我们当然想要经常看到，所以这个值越大时，分值越小。</span><br><span class="line">- L 值。表示发布视频的平均点赞率，S 值越大时，质量越稳定，分值也就越大。</span><br><span class="line"></span><br><span class="line">视频主主分层 我们根据每一项指标是否高于平均值，把UP主划分为8类，我们根据案例中的情况进行划分，具体如下表</span><br><span class="line"></span><br><span class="line">视频主分类I值是否大于平均值F值是否小于平均值L值是否大于平均值解释</span><br><span class="line">高质量视频主 1 1 1 用户活跃高，更新周期短，视频质量高 </span><br><span class="line">高质量拖更视频主 1 0 1 用户活跃高，更新周期长，视频质量高 </span><br><span class="line">高质量内容高深视频主 0 1 1 用户活跃低，更新周期短，视频质量高 </span><br><span class="line">高质量内容高深拖更视频主 0 0 1 用户活跃低，更新周期长，视频质量高 </span><br><span class="line">接地气活跃视频主 1 1 0 用户活跃高，更新周期短，视频质量低 </span><br><span class="line">活跃视频主 0 1 0 用户活跃低，更新周期短，视频质量低 </span><br><span class="line">接地气视频主 1 0 0 用户活跃高，更新周期长，视频质量低 </span><br><span class="line">还在成长的视频主 0 0 0 用户活跃低，更新周期长，视频质量低 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据链接已经在下方给出： 各字段表示含义如下：</span><br><span class="line">字段名含义</span><br><span class="line">pubdate 发布时间 </span><br><span class="line">bv BV号 </span><br><span class="line">url 视频链接 </span><br><span class="line">title 标题 </span><br><span class="line">author 作者 </span><br><span class="line">description 视频简介 </span><br><span class="line">tag 标签 </span><br><span class="line">favorites 收藏 </span><br><span class="line">coins 投币 </span><br><span class="line">danmu 弹幕 </span><br><span class="line">likes 点赞 </span><br><span class="line">reply 评论 </span><br><span class="line">views 播放量 </span><br><span class="line">share 分享</span><br><span class="line"> </span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收 str 类型的变量 author，返回结果的数据类型是str类型；</span><br><span class="line">2. 便于数据美观，IFL 的值需要保留小数点后两位（四舍五入）；</span><br><span class="line">3. 数据中可能存在重复数据；</span><br><span class="line">4. 某知名视频网站视频数据为逗号分割的 csv 文件，utf-8 编码。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;龙爪洪荒&#x27;</span><br><span class="line">输出：&#x27;高质量拖更视频主&#x27;</span><br><span class="line"></span><br><span class="line">输入：&#x27;AO摆渡人&#x27;</span><br><span class="line">输出：&#x27;活跃视频主&#x27;</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/94/fj_B_video_web_data.csv</span><br></pre></td></tr></table></figure><h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.1：求两数之和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="built_in">list</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        zt = []</span><br><span class="line">        qc = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> qc == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(i) + <span class="built_in">int</span>(z) == target:</span><br><span class="line">                    qc = <span class="literal">True</span></span><br><span class="line">                    zt.append(nums.index(i))</span><br><span class="line">                    zt.append(nums.index(z,nums.index(i)+<span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> zt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2：判断数组重复元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrayRepeat</span>(<span class="params">self, arr: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(arr) != <span class="built_in">len</span>(<span class="built_in">set</span>(arr)):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">                <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> arr[i] != arr[i - <span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;03&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;01&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            zt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    zt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num &gt; zt:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;02&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.3：简单数学公式</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SpMtFml</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> math.ceil(math.sqrt((<span class="number">3</span>**<span class="number">4</span>+<span class="number">5</span>*<span class="number">6</span>**<span class="number">5</span>)/num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.4：句子拼写检查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detectCapital</span>(<span class="params">self, st: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        list1 = st.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        t=<span class="number">0</span></span><br><span class="line">        ww=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">            t=t+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i.upper() <span class="keyword">in</span> [<span class="string">&#x27;PYTHON&#x27;</span>, <span class="string">&#x27;JAVA&#x27;</span>, <span class="string">&#x27;MACHINELEARNING&#x27;</span>, <span class="string">&#x27;DATAMINING&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;MachineLearning&quot;</span>, <span class="string">&quot;DataMining&quot;</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(char.isdigit() <span class="keyword">for</span> char <span class="keyword">in</span> i):</span><br><span class="line">                <span class="keyword">if</span> i.upper() != i:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> t == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i.capitalize() != i:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> i.lower() != i <span class="keyword">and</span> i.upper() != i:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.5：重复子字符串 100.0分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">patternRepeatedSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        ss = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            ss += i</span><br><span class="line">            <span class="keyword">if</span> s.count(ss) == <span class="built_in">len</span>(s) / <span class="built_in">len</span>(ss):</span><br><span class="line">                <span class="keyword">return</span> ss</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1：选取网页表格中的数字</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">table_num</span>(<span class="params">self, row: <span class="built_in">int</span>, col: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/open/show/random-num/index.html&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding= <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        qc = BeautifulSoup(zt.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        jg = qc.find_all(<span class="string">&quot;td&quot;</span>)[(row-<span class="number">1</span>)*<span class="number">26</span>+row-<span class="number">1</span>+col].text</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(jg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2：商品信息关键词权重计算</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> jieba <span class="keyword">import</span> analyse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordTfidf</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/61/fj_chiffon_lady_dress.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        <span class="comment"># 使用jieba的analyse模块的extract_tags函数来提取关键词</span></span><br><span class="line">        <span class="comment"># zt.text是从网页获取到的文本内容</span></span><br><span class="line">        <span class="comment"># topK=5表示只提取最重要的5个关键词</span></span><br><span class="line">        <span class="comment"># allowPOS=(&quot;n&quot;, &quot;nr&quot;, &quot;ns&quot;)表示只提取名词、人名、地名这几种词性的关键词</span></span><br><span class="line">        jg = jieba.analyse.extract_tags(zt.text,topK=<span class="number">5</span>,allowPOS=(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;nr&quot;</span>,<span class="string">&quot;ns&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> jg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3：微信公众号排行榜分析</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weixinData</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/weixindata.html&#x27;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        qc = BeautifulSoup(zt.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                txt = qc.find_all(<span class="string">&quot;span&quot;</span>,class_=<span class="string">&quot;js-rank-detail-btn&quot;</span>)[i].text</span><br><span class="line">                txt1 = qc.find_all(<span class="string">&quot;td&quot;</span>)[i*<span class="number">11</span>+<span class="number">4</span>+i].text</span><br><span class="line">                txt2 = qc.find_all(<span class="string">&quot;td&quot;</span>)[i*<span class="number">11</span>+<span class="number">7</span>+i].text</span><br><span class="line">                txt3 = qc.find_all(<span class="string">&quot;td&quot;</span>)[i*<span class="number">11</span>+<span class="number">3</span>+i].text</span><br><span class="line">                <span class="keyword">if</span> txt == name :</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;万&quot;</span> <span class="keyword">in</span> txt1 <span class="keyword">or</span> <span class="built_in">float</span>(txt1) &gt; <span class="number">90000</span>:</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&quot;万&quot;</span> <span class="keyword">in</span> txt2 <span class="keyword">or</span> <span class="built_in">float</span>(txt2) &gt;<span class="number">80000</span>:</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">float</span>(txt3[<span class="number">0</span>:-<span class="number">1</span>]) &lt; <span class="number">300</span>:</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                          <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.4：爱丽丝梦游仙境文本规范化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/76/fj_alice_adventure.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(word) &lt; <span class="number">3</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        qc = re.findall(word,zt.text,re.I)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(qc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.5：影片票房任务</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">BoxOfficeSpider</span>(<span class="params">self, movie_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/open/show/box_office_on_a_certain_day.html&quot;</span></span><br><span class="line">    zt = requests.get(url)</span><br><span class="line">    zt.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    qc = BeautifulSoup(zt.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    name = qc.find_all(<span class="string">&quot;p&quot;</span>,class_=<span class="string">&quot;movie-name&quot;</span>)</span><br><span class="line">    txt1 = qc.find_all(<span class="string">&quot;span&quot;</span>,class_=<span class="string">&quot;releaseInfo&quot;</span>)</span><br><span class="line">    txt2 = qc.find_all(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;boxDesc-wrap red-color&quot;</span>)</span><br><span class="line">    txt3 = qc.find_all(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;countRate-wrap&quot;</span>)</span><br><span class="line">    key = &#123;&#125;</span><br><span class="line">    val = [[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(txt1)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (re.findall(<span class="string">r&quot;\d+&quot;</span>,txt1[i].text)):</span><br><span class="line">                val[i][j] = <span class="built_in">int</span>(re.findall(<span class="string">r&quot;\d+&quot;</span>,txt1[i].text)[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">elif</span> (<span class="string">&quot;点映&quot;</span> <span class="keyword">in</span>  txt1[i].text):</span><br><span class="line">                val[i][j] = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val[i][j] = <span class="number">0</span></span><br><span class="line">            val[i][j+<span class="number">1</span>] = <span class="built_in">float</span>(txt2[i].text)</span><br><span class="line">            val[i][j+<span class="number">2</span>] = txt3[i].text[:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;&lt;&quot;</span> <span class="keyword">in</span> val[i][j+<span class="number">2</span>]):</span><br><span class="line">                val[i][j+<span class="number">2</span>] = <span class="number">0.001</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val[i][j+<span class="number">2</span>] = <span class="built_in">float</span>(val[i][j+<span class="number">2</span>])*<span class="number">0.01</span></span><br><span class="line">                val[i][j+<span class="number">2</span>] = <span class="built_in">float</span>(<span class="built_in">str</span>(val[i][j+<span class="number">2</span>])[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line">        key[name[i].text] = val[i]</span><br><span class="line">    <span class="keyword">return</span> key[movie_name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.6：商品搜索结果分析</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">itemSearch</span>(<span class="params">self, shop_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;###/open/show/ecjd.html&quot;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.ok:</span><br><span class="line">            response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.parseItem(response.text)[shop_name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseItem</span>(<span class="params">self, html</span>):</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="comment"># 父目录</span></span><br><span class="line">        temp_dict = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> soup.findAll(class_=<span class="string">&quot;gl-item&quot;</span>):</span><br><span class="line">            <span class="comment"># 商品名称</span></span><br><span class="line">            item_name = child.find(class_=<span class="string">&quot;J_im_icon&quot;</span>).a.text</span><br><span class="line">            temp_list = []</span><br><span class="line">            temp = child.find(class_=<span class="string">&quot;p-icons&quot;</span>).text</span><br><span class="line">            <span class="comment">#         print(child.find(&quot;i&quot;,&#123;&quot;data-tips&quot;:&quot;本商品参与满减促销&quot;&#125;))</span></span><br><span class="line">            <span class="comment"># 是否有满减活动</span></span><br><span class="line">            temp_list.append(re.search(<span class="string">&quot;满\d+-\d+&quot;</span>, temp) != <span class="literal">None</span>)</span><br><span class="line">            <span class="comment"># 是否有会员价</span></span><br><span class="line">            temp_list.append(<span class="built_in">float</span>(child.find(class_=<span class="string">&quot;p-price&quot;</span>).strong.i.text))</span><br><span class="line">            <span class="keyword">if</span> child.find(class_=<span class="string">&quot;price-plus-1&quot;</span>):</span><br><span class="line">                temp_list.pop()</span><br><span class="line">                temp_list.append(</span><br><span class="line">                    <span class="built_in">round</span>(<span class="built_in">float</span>(child.find(class_=<span class="string">&quot;price-plus-1&quot;</span>).text[<span class="number">1</span>:])))</span><br><span class="line">            <span class="comment"># 该网店对应商品的评论数</span></span><br><span class="line">            <span class="keyword">if</span> child.find(class_=<span class="string">&quot;p-commit&quot;</span>):</span><br><span class="line">                temp_commit = child.select_one(<span class="string">&quot;.p-commit strong a&quot;</span>).text</span><br><span class="line">                temp_list.append(<span class="built_in">int</span>(<span class="built_in">float</span>(</span><br><span class="line">                    temp_commit[:-<span class="number">2</span>]) * <span class="number">10000</span>) <span class="keyword">if</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">in</span> temp_commit <span class="keyword">else</span> <span class="built_in">int</span>(<span class="built_in">float</span>(temp_commit[:-<span class="number">1</span>])))</span><br><span class="line">            <span class="comment"># 该商品的价格</span></span><br><span class="line">            <span class="comment"># 如果该网店存在两个及以上商品，返回价格较高的商品信息；如果商品价格相同，返回排名最靠前的商品信息</span></span><br><span class="line">            <span class="keyword">if</span> item_name <span class="keyword">in</span> temp_dict.keys() <span class="keyword">and</span> temp_dict[item_name][<span class="number">1</span>] &gt;= temp_list[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 保存数据</span></span><br><span class="line">            temp_dict.update(&#123;item_name: temp_list&#125;)</span><br><span class="line">        <span class="keyword">return</span> temp_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.7：商品关键词权重分析</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> jieba.analyse <span class="keyword">import</span> textrank</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">itemAnalyse</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/77/fj_5392_hangzhou_top_woman_wear.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        qc = textrank(zt.text,topK=<span class="number">5</span>,allowPOS=(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;v&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> qc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.1：电商订单数据清洗</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nanCount</span>(<span class="params">self, order_data:<span class="string">&#x27;DataFrame&#x27;</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/63/fj_order_data.csv&quot;</span></span><br><span class="line">        zt = pd.read_csv(url)</span><br><span class="line">        mo = zt[<span class="string">&quot;choice_description&quot;</span>].isnull().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="keyword">return</span> mo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2：电商订单数据计算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salesStr</span>(<span class="params">self, condition: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/80/fj_order_data.csv&quot;</span></span><br><span class="line">        zt = pd.read_csv(url)</span><br><span class="line">        zt[<span class="string">&quot;item_price&quot;</span>] = zt[<span class="string">&quot;item_price&quot;</span>].apply(<span class="keyword">lambda</span> x:x.replace(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;&quot;</span>)).astype(<span class="built_in">float</span>)</span><br><span class="line">        zt[<span class="string">&quot;总金额&quot;</span>] = zt[<span class="string">&quot;item_price&quot;</span>] * zt[<span class="string">&quot;quantity&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> condition.lower() == <span class="string">&quot;max&quot;</span>:</span><br><span class="line">            jg = zt.groupby(<span class="string">&quot;item_name&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;总金额&quot;</span>).index[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            jg = zt.groupby(<span class="string">&quot;item_name&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;总金额&quot;</span>).index[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> jg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3：DataFrame计算平均值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">CalAvg</span>(<span class="params">self, df: <span class="string">&#x27;pandas.DataFrame&#x27;</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        df[<span class="string">&quot;avg&quot;</span>] = df.mean(axis=<span class="number">1</span>).<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> df[<span class="string">&quot;avg&quot;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.4：乐高商店收入计算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self, title</span>):</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/241/fj_lego_tmallshop_sales_data.xlsx&quot;</span></span><br><span class="line">        zt = pd.read_excel(url)</span><br><span class="line">        zt.dropna(subset=[<span class="string">&quot;price&quot;</span>])</span><br><span class="line">        zt[<span class="string">&quot;sales_num&quot;</span>] = zt[<span class="string">&quot;sales_num&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        mo = <span class="built_in">sum</span>(zt[<span class="string">&quot;sales_num&quot;</span>] * zt[<span class="string">&quot;price&quot;</span>])</span><br><span class="line">        age = zt[<span class="string">&quot;price&quot;</span>].mean().<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">        title = zt[zt[<span class="string">&quot;title&quot;</span>] == title]</span><br><span class="line">        jg = <span class="built_in">sum</span>(title[<span class="string">&quot;sales_num&quot;</span>] * title[<span class="string">&quot;price&quot;</span>])</span><br><span class="line">        <span class="keyword">return</span> [mo,age,jg]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.5：部门平均薪资汇总计算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">department_salary_summary</span>(<span class="params">self</span>) -&gt; pd.Series:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/242/fj_employee_salary_work_books.xlsx&quot;</span></span><br><span class="line">        zt = pd.read_excel(url, sheet_name=<span class="string">&quot;基本薪资&quot;</span>)</span><br><span class="line">        qc = pd.read_excel(url, sheet_name=<span class="string">&quot;上班通勤&quot;</span>)</span><br><span class="line">        mo = pd.merge(zt, qc, on=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">        mo.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        mo[<span class="string">&quot;月基本薪资&quot;</span>] = mo[<span class="string">&quot;基本薪资&quot;</span>] + mo[<span class="string">&quot;岗位工资&quot;</span>] + mo[<span class="string">&quot;绩效工资&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;日薪&quot;</span>] = mo[<span class="string">&quot;月基本薪资&quot;</span>] / mo[<span class="string">&quot;应出勤天数（天）&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;时薪&quot;</span>] = mo[<span class="string">&quot;日薪&quot;</span>] / <span class="number">8</span></span><br><span class="line">        mo[<span class="string">&quot;法定节假日加班&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;法定假日加班（小时）&quot;</span>] * <span class="number">2</span></span><br><span class="line">        mo[<span class="string">&quot;周末加班&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;周末加班（小时）&quot;</span>] * <span class="number">1.5</span></span><br><span class="line">        mo[<span class="string">&quot;工作日加班&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;工作日加班（小时）&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;通勤工资&quot;</span>] = mo[<span class="string">&quot;法定节假日加班&quot;</span>] + mo[<span class="string">&quot;周末加班&quot;</span>] + mo[<span class="string">&quot;工作日加班&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;请假扣费&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;请假（小时）&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;社保缴费&quot;</span>] = (mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.08</span> + mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.02</span> + mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.01</span> + mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.10</span>)</span><br><span class="line">        mo[<span class="string">&quot;实发工资&quot;</span>] = mo[<span class="string">&quot;月基本薪资&quot;</span>] + mo[<span class="string">&quot;通勤工资&quot;</span>] - mo[<span class="string">&quot;请假扣费&quot;</span>] - mo[<span class="string">&quot;社保缴费&quot;</span>]</span><br><span class="line">        jg = mo.groupby(<span class="string">&quot;部门&quot;</span>)[<span class="string">&quot;实发工资&quot;</span>].mean().<span class="built_in">round</span>(<span class="number">2</span>).astype(<span class="built_in">float</span>).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        jg.name = <span class="string">&quot;平均薪资&quot;</span></span><br><span class="line">        jg.index.name = <span class="string">&quot;部门&quot;</span></span><br><span class="line">        <span class="keyword">return</span> jg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.6：编制比较资产负债表</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balance_sheet</span>(<span class="params">self, name</span>):</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/243/fj_Interprice_balance_data.xlsx&quot;</span></span><br><span class="line">        zt = pd.read_excel(url,sheet_name=<span class="string">&quot;比较资产负债表&quot;</span>)</span><br><span class="line">        zt.fillna(<span class="number">0</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">        zt[<span class="string">&quot;变动额&quot;</span>] = zt[<span class="string">&quot;2021.12.31&quot;</span>] - zt[<span class="string">&quot;2020.12.31&quot;</span>]</span><br><span class="line">        zt[<span class="string">&quot;变动率&quot;</span>] = zt[<span class="string">&quot;变动额&quot;</span>] / zt[<span class="string">&quot;2020.12.31&quot;</span>]</span><br><span class="line">        mo = zt[zt[<span class="string">&quot;项目&quot;</span>]==name]</span><br><span class="line">        txt1 = (mo[<span class="string">&quot;变动额&quot;</span>].values[<span class="number">0</span>]).<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">        txt2 = (mo[<span class="string">&quot;变动率&quot;</span>].values[<span class="number">0</span>]).<span class="built_in">round</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> [txt1,txt2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.7：某店铺不同地区销售情况分析</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self, area: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/240/fj_7568_tmall_order_report.csv&quot;</span></span><br><span class="line">        zt = pd.read_csv(url)</span><br><span class="line">        qc = zt[zt[<span class="string">&quot;收货地址&quot;</span>] == area]</span><br><span class="line">        mo = <span class="built_in">len</span>(qc)</span><br><span class="line"></span><br><span class="line">        fkdds = <span class="built_in">len</span>(qc.query(<span class="string">&quot;买家实际支付金额 !=0 | 退款金额 != 0&quot;</span>))</span><br><span class="line">        fkzhl = <span class="string">f&quot;<span class="subst">&#123;(fkdds / mo) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line"></span><br><span class="line">        qefkdds = <span class="built_in">len</span>(qc.query(<span class="string">&quot;买家实际支付金额 == 总金额&quot;</span>))</span><br><span class="line">        qefkzhl = <span class="string">f&quot;<span class="subst">&#123;(qefkdds / mo) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line"></span><br><span class="line">        zfzje = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">sum</span>(qc[<span class="string">&#x27;买家实际支付金额&#x27;</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        sjzfje = <span class="built_in">sum</span>(qc[<span class="string">&quot;买家实际支付金额&quot;</span>])</span><br><span class="line">        zfmjs = <span class="built_in">len</span>(qc[qc[<span class="string">&quot;买家实际支付金额&quot;</span>] != <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> zfmjs &gt; <span class="number">0</span>:</span><br><span class="line">            kdj = <span class="string">f&quot;<span class="subst">&#123;sjzfje / zfmjs:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            kdj = <span class="string">&quot;本地沒有銷量&quot;</span></span><br><span class="line">        txt = qc[qc[<span class="string">&quot;买家实际支付金额&quot;</span>] != <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> zfmjs &gt; <span class="number">0</span>:</span><br><span class="line">            po = <span class="string">f&quot;<span class="subst">&#123;txt[<span class="string">&#x27;买家实际支付金额&#x27;</span>].mode()[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            po = <span class="string">&quot;本地沒有銷量&quot;</span></span><br><span class="line">        ni = <span class="built_in">sum</span>(zt[<span class="string">&quot;买家实际支付金额&quot;</span>])</span><br><span class="line">        ll = <span class="string">f&quot;<span class="subst">&#123;(sjzfje / ni) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [fkzhl, qefkzhl, zfzje, kdj, po, ll]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.8：用户职位信息统计</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jobStatistics</span>(<span class="params">self, occupation: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url =<span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15930/67/fj_jobstatics.xlsx&#x27;</span></span><br><span class="line">        chipo = pd.read_excel(url)</span><br><span class="line">        chipo1 = chipo[chipo[<span class="string">&quot;occupation&quot;</span>] == occupation]</span><br><span class="line">        num = <span class="string">&quot;&#123;:.2%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(chipo1[chipo1[<span class="string">&quot;gender&quot;</span>]==<span class="string">&quot;F&quot;</span>]) / <span class="built_in">len</span>(chipo1))</span><br><span class="line">        num1 = chipo.groupby([<span class="string">&quot;occupation&quot;</span>,<span class="string">&quot;gender&quot;</span>]).count()[<span class="string">&quot;user_id&quot;</span>].unstack().fillna(<span class="number">0</span>)</span><br><span class="line">        num1[<span class="string">&quot;占比&quot;</span>] = num1[<span class="string">&quot;F&quot;</span>] / (num1[<span class="string">&quot;F&quot;</span>] + num1[<span class="string">&quot;M&quot;</span>])</span><br><span class="line">        <span class="keyword">return</span> [num,<span class="built_in">int</span>(num1[<span class="string">&quot;占比&quot;</span>].rank(ascending = <span class="literal">False</span>)[occupation])]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup</title>
      <link href="/2024/12/18/BeautifulSoup/"/>
      <url>/2024/12/18/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;https://www.something.com/&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(res.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.title)</span><br><span class="line"><span class="built_in">print</span>(soup.title.name)</span><br><span class="line"><span class="built_in">print</span>(soup.title.parent)  <span class="comment"># 找到父级</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;Dormouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.p.children))  <span class="comment"># 子节点可以调用contents 和 children属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>父级</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="string">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.a.parent)  <span class="comment"># 找到父级</span></span><br></pre></td></tr></table></figure><p>多个父级</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="string">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.a.parents))  <span class="comment"># 找到父级</span></span><br></pre></td></tr></table></figure><p>兄弟</p><p><strong>next_sibling、previous_sibling、next_siblings、previous_siblings</strong>这四个属性来获取。</p><p>而next_siblings和previous_siblings是获取前面和后面的兄弟节点，返回的类型依然是生成器类型。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;hello</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.a.next_sibling)  <span class="comment"># next_sibling上个兄弟元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.a.next_siblings))</span><br><span class="line"><span class="built_in">print</span>(soup.a.previous_sibling)  <span class="comment"># previous_sibling下个兄弟元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.a.previous_siblings))</span><br></pre></td></tr></table></figure><h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;Dormouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;span&gt;Elsie&lt;/span&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;&lt;span&gt;Lacie&lt;/span&gt;&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;&lt;span&gt;Tillie&lt;/span&gt;&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(name=<span class="string">&#x27;p&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;link1&#x27;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Dormouse&#x27;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(class_=<span class="string">&#x27;sister&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;link1&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup-后继元素"><a href="#BeautifulSoup-后继元素" class="headerlink" title="BeautifulSoup 后继元素"></a>BeautifulSoup 后继元素</h2><p>使用<code>descendants</code>属性，我们可以获得标签的所有后代（所有级别的子级）。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    contents = f.read()</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(contents, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    root = soup.body</span><br><span class="line"></span><br><span class="line">    root_childs = [e.name <span class="keyword">for</span> e <span class="keyword">in</span> root.descendants <span class="keyword">if</span> e.name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]</span><br><span class="line">    <span class="built_in">print</span>(root_childs) <span class="comment"># [&#x27;h2&#x27;, &#x27;ul&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;p&#x27;, &#x27;p&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JIeba文本处理</title>
      <link href="/2024/12/16/Jieba%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
      <url>/2024/12/16/Jieba%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="JIeba文本处理"><a href="#JIeba文本处理" class="headerlink" title="JIeba文本处理"></a>JIeba文本处理</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动paddle模式。 0.40版之后开始支持，早期版本不支持</span></span><br><span class="line">jieba.enable_paddle()</span><br><span class="line">strs=[<span class="string">&quot;我来到北京清华大学&quot;</span>,<span class="string">&quot;乒乓球拍卖完了&quot;</span>,<span class="string">&quot;中国科学技术大学&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">    seg_list = jieba.cut(<span class="built_in">str</span>,use_paddle=<span class="literal">True</span>) <span class="comment"># 使用paddle模式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Paddle Mode: &quot;</span> + <span class="string">&#x27;/&#x27;</span>.join(<span class="built_in">list</span>(seg_list)))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 全模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Full Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Default Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 默认是精确模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;他来到了网易杭研大厦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>.join(seg_list))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 搜索引擎模式</span></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">&quot;小明硕士毕业于中国科学院计算所，后在日本京都大学深造&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>.join(seg_list))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">【精确模式】: 我/ 来到/ 北京/ 清华大学</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="jieba三种模式"><a href="#jieba三种模式" class="headerlink" title="jieba三种模式"></a>jieba三种模式</h3><ul><li><code>jieba.cut()</code>：生成的是一个生成器，generator，也就是可以通过for循环来取里面的每一个词。</li><li><code>jieba.lcut()</code>：生成一个list</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">st = <span class="string">&#x27;注意：该代码tf计算使用的是整个语料，这里只是举个简单的例子，大家在写的时候按文档计算词频即可！我这里就不做修改了&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(st))  <span class="comment"># 精简模式</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(st, cut_all=<span class="literal">True</span>))  <span class="comment"># 全模式，使用cut_all=True 指定</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut_for_search(st))  <span class="comment"># 搜素引擎模式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例 统计出现次数最多的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;三国演义.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">words = jieba.lcut(txt)     <span class="comment"># 使用精确模式对文本进行分词</span></span><br><span class="line">counts = &#123;&#125;     <span class="comment"># 通过键值对的形式存储词语及其出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:    <span class="comment"># 单个词语不计算在内</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[word] = counts.get(word, <span class="number">0</span>) + <span class="number">1</span>    <span class="comment"># 遍历所有词语，每出现一次其对应的值加 1</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)    <span class="comment"># 根据词语出现的次数进行从大到小排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;5&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/16937/76/fj_alice_adventure.txt&#x27;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        words = response.text.lower()</span><br><span class="line">        word = word.lower()  <span class="comment"># 转小写</span></span><br><span class="line">        counts = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> words.split():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                counts[s] = counts.get(s,<span class="number">0</span>) + <span class="number">1</span> <span class="comment"># 遍历所有词语，每出现一次其对应的值加 1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 字典转换二维数组</span></span><br><span class="line">        items = <span class="built_in">list</span>(counts.items())<span class="comment">#list 里面存放的是 元组</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) <span class="comment"># 降序</span></span><br><span class="line">        <span class="built_in">print</span>(items)</span><br><span class="line">        <span class="keyword">return</span> counts[word]</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">solu.aliceText(<span class="string">&#x27;Pictures&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Jieba实现TF-IDF算法"><a href="#Jieba实现TF-IDF算法" class="headerlink" title="Jieba实现TF-IDF算法"></a><strong>Jieba实现TF-IDF算法</strong></h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;关键词是能够表达文档中心内容的词语，常用于计算机系统标引论文内容特征、</span></span><br><span class="line"><span class="string">信息检索、系统汇集以供读者检阅。关键词提取是文本挖掘领域的一个分支，是文本检索、</span></span><br><span class="line"><span class="string">文档比较、摘要生成、文档分类和聚类等文本挖掘研究的基础性工作&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">keywords = jieba.analyse.extract_tags(text, topK=<span class="number">5</span>, withWeight=<span class="literal">False</span>, allowPOS=())</span><br><span class="line"><span class="built_in">print</span>(keywords)  <span class="comment"># [&#x27;文档&#x27;, &#x27;文本&#x27;, &#x27;关键词&#x27;, &#x27;挖掘&#x27;, &#x27;文本检索&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>公式：<code>jieba.analyse.extract_tags(text, topK=5, withWeight=False, allowPOS=())</code></p><ul><li><code>text</code>：为待提取的文本</li><li><code>topK</code>：权重最大的关键字，默认值为 20</li><li><code>withWeight</code>：是否返回关键字的权重，默认为 <code>False</code></li><li><code>allowPOS</code>：指定词性，默认为空，即不筛选</li></ul></blockquote><h3 id="Jieba实现Textrank算法"><a href="#Jieba实现Textrank算法" class="headerlink" title="Jieba实现Textrank算法"></a>Jieba实现Textrank算法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;关键词是能够表达文档中心内容的词语，常用于计算机系统标引论文内容特征、</span></span><br><span class="line"><span class="string">信息检索、系统汇集以供读者检阅。关键词提取是文本挖掘领域的一个分支，是文本检索、</span></span><br><span class="line"><span class="string">文档比较、摘要生成、文档分类和聚类等文本挖掘研究的基础性工作&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">keyword = jieba.analyse.textrank(text, topK=<span class="number">5</span>, withWeight=<span class="literal">False</span>, allowPOS=(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;ns&#x27;</span>, <span class="string">&#x27;nr&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(keyword)  <span class="comment"># [&#x27;文档&#x27;, &#x27;内容&#x27;, &#x27;文本&#x27;, &#x27;特征&#x27;, &#x27;词语&#x27;]</span></span><br></pre></td></tr></table></figure><p>中文文本：《三国演义》 分析人物<a href="https://python123.io/resources/pye/threekingdoms.txt">https://python123.io/resources/pye/threekingdoms.txt</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">中文文本分词,使用字典表达词频</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self, ren_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://python123.io/resources/pye/threekingdoms.txt&#x27;</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        words = jieba.lcut(r.text)</span><br><span class="line">        name = <span class="built_in">dict</span>()</span><br><span class="line">        jieba</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(word) &lt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;诸葛亮&#x27;</span>,<span class="string">&#x27;孔明曰&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;孔明&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;关公&#x27;</span>,<span class="string">&#x27;云长&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;关羽&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;玄德&#x27;</span>,<span class="string">&#x27;玄德曰&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;刘备&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;孟德&#x27;</span>, <span class="string">&#x27;丞相&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;曹操&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rword = word</span><br><span class="line">            name[rword] = name.get(rword, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> name[ren_name]</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="built_in">print</span>(s.fun(<span class="string">&#x27;曹操&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现明明是同一个人,不过有别的称号罢了,但是统计的却不一样,所以我们要进行修改:</p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用模块大全（总结）</title>
      <link href="/2024/12/12/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%A4%A7%E5%85%A8%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/"/>
      <url>/2024/12/12/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%A4%A7%E5%85%A8%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Python常用模块大全（总结）"><a href="#Python常用模块大全（总结）" class="headerlink" title="Python常用模块大全（总结）"></a>Python常用模块大全（总结）</h1><h2 id="os模块："><a href="#os模块：" class="headerlink" title="os模块："></a>os模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.remove() 删除文件 </span><br><span class="line">os.unlink() 删除文件 </span><br><span class="line">os.rename() 重命名文件 </span><br><span class="line">os.listdir() 列出指定目录下所有文件 </span><br><span class="line">os.chdir() 改变当前工作目录</span><br><span class="line">os.getcwd() 获取当前文件路径</span><br><span class="line">os.mkdir() 新建目录</span><br><span class="line">os.rmdir() 删除空目录(删除非空目录, 使用shutil.rmtree())</span><br><span class="line">os.makedirs() 创建多级目录</span><br><span class="line">os.removedirs() 删除多级目录</span><br><span class="line">os.stat(file) 获取文件属性</span><br><span class="line">os.chmod(file) 修改文件权限</span><br><span class="line">os.utime(file) 修改文件时间戳</span><br><span class="line">os.name(file) 获取操作系统标识</span><br><span class="line">os.system() 执行操作系统命令</span><br><span class="line">os.execvp() 启动一个新进程</span><br><span class="line">os.fork() 获取父进程ID，在子进程返回中返回0</span><br><span class="line">os.execvp() 执行外部程序脚本（Uinx）</span><br><span class="line">os.spawn() 执行外部程序脚本（Windows）</span><br><span class="line">os.access(path, mode) 判断文件权限(详细参考cnblogs)</span><br><span class="line">os.wait() 暂时未知</span><br><span class="line">os.path模块：</span><br><span class="line">os.path.split(filename) 将文件路径和文件名分割(会将最后一个目录作为文件名而分离)</span><br><span class="line">os.path.splitext(filename) 将文件路径和文件扩展名分割成一个元组</span><br><span class="line">os.path.dirname(filename) 返回文件路径的目录部分</span><br><span class="line">os.path.basename(filename) 返回文件路径的文件名部分</span><br><span class="line">os.path.join(dirname,basename) 将文件路径和文件名凑成完整文件路径</span><br><span class="line">os.path.abspath(name) 获得绝对路径</span><br><span class="line">os.path.splitunc(path) 把路径分割为挂载点和文件名</span><br><span class="line">os.path.normpath(path) 规范path字符串形式</span><br><span class="line">os.path.exists() 判断文件或目录是否存在</span><br><span class="line">os.path.isabs() 如果path是绝对路径，返回True</span><br><span class="line">os.path.realpath(path) #返回path的真实路径</span><br><span class="line">os.path.relpath(path[, start]) #从start开始计算相对路径 </span><br><span class="line">os.path.normcase(path) #转换path的大小写和斜杠</span><br><span class="line">os.path.isdir() 判断name是不是一个目录，name不是目录就返回false</span><br><span class="line">os.path.isfile() 判断name是不是一个文件，不存在返回false</span><br><span class="line">os.path.islink() 判断文件是否连接文件,返回boolean</span><br><span class="line">os.path.ismount() 指定路径是否存在且为一个挂载点，返回boolean</span><br><span class="line">os.path.samefile() 是否相同路径的文件，返回boolean</span><br><span class="line">os.path.getatime() 返回最近访问时间 浮点型</span><br><span class="line">os.path.getmtime() 返回上一次修改时间 浮点型</span><br><span class="line">os.path.getctime() 返回文件创建时间 浮点型</span><br><span class="line">os.path.getsize() 返回文件大小 字节单位</span><br><span class="line">os.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径</span><br><span class="line">os.path.lexists #路径存在则返回True,路径损坏也返回True</span><br><span class="line">os.path.expanduser(path) #把path中包含的”~”和”~user”转换成用户目录</span><br><span class="line">os.path.expandvars(path) #根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span><br><span class="line">os.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件</span><br><span class="line">os.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件</span><br><span class="line">os.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组</span><br><span class="line">os.path.walk(path, visit, arg) #遍历path，给每个path执行一个函数详细见手册</span><br><span class="line">os.path.supports_unicode_filenames() 设置是否支持unicode路径名</span><br></pre></td></tr></table></figure><h2 id="stat模块："><a href="#stat模块：" class="headerlink" title="stat模块："></a>stat模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述os.stat()返回的文件属性列表中各值的意义</span><br><span class="line">fileStats = os.stat(path) 获取到的文件属性列表</span><br><span class="line">fileStats[stat.ST_MODE] 获取文件的模式</span><br><span class="line">fileStats[stat.ST_SIZE] 文件大小</span><br><span class="line">fileStats[stat.ST_MTIME] 文件最后修改时间</span><br><span class="line">fileStats[stat.ST_ATIME] 文件最后访问时间</span><br><span class="line">fileStats[stat.ST_CTIME] 文件创建时间</span><br><span class="line">stat.S_ISDIR(fileStats[stat.ST_MODE]) 是否目录</span><br><span class="line">stat.S_ISREG(fileStats[stat.ST_MODE]) 是否一般文件</span><br><span class="line">stat.S_ISLNK(fileStats[stat.ST_MODE]) 是否连接文件</span><br><span class="line">stat.S_ISSOCK(fileStats[stat.ST_MODE]) 是否COCK文件</span><br><span class="line">stat.S_ISFIFO(fileStats[stat.ST_MODE]) 是否命名管道</span><br><span class="line">stat.S_ISBLK(fileStats[stat.ST_MODE]) 是否块设备</span><br><span class="line">stat.S_ISCHR(fileStats[stat.ST_MODE]) 是否字符设置</span><br></pre></td></tr></table></figure><h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块:"></a>sys模块:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.argv 命令行参数List，第一个元素是程序本身路径 </span><br><span class="line">sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </span><br><span class="line">sys.modules.keys() 返回所有已经导入的模块列表</span><br><span class="line">sys.modules 返回系统导入的模块字段，key是模块名，value是模块 </span><br><span class="line">sys.exc_info() 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span><br><span class="line">sys.exit(n) 退出程序，正常退出时exit(0)</span><br><span class="line">sys.hexversion 获取Python解释程序的版本值，16进制格式如：0x020403F0</span><br><span class="line">sys.version 获取Python解释程序的版本信息</span><br><span class="line">sys.platform 返回操作系统平台名称</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdout.write(‘aaa‘) 标准输出内容</span><br><span class="line">sys.stdout.writelines() 无换行输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stdin.read() 输入一行</span><br><span class="line">sys.stderr 错误输出</span><br><span class="line">sys.exc_clear() 用来清除当前线程所出现的当前的或最近的错误信息 </span><br><span class="line">sys.exec_prefix 返回平台独立的python文件安装的位置 </span><br><span class="line">sys.byteorder 本地字节规则的指示器，big-endian平台的值是‘big‘,little-endian平台的值是‘little‘ </span><br><span class="line">sys.copyright 记录python版权相关的东西 </span><br><span class="line">sys.api_version 解释器的C的API版本 </span><br><span class="line">sys.version_info ‘final‘表示最终,也有‘candidate‘表示候选，表示版本级别，是否有后继的发行 </span><br><span class="line">sys.getdefaultencoding() 返回当前你所用的默认的字符编码格式 </span><br><span class="line">sys.getfilesystemencoding() 返回将Unicode文件名转换成系统文件名的编码的名字 </span><br><span class="line">sys.builtin_module_names Python解释器导入的内建模块列表 </span><br><span class="line">sys.executable Python解释程序路径 </span><br><span class="line">sys.getwindowsversion() 获取Windows的版本 </span><br><span class="line">sys.stdin.readline() 从标准输入读一行，sys.stdout.write(“a”) 屏幕输出a</span><br><span class="line">sys.setdefaultencoding(name) 用来设置当前默认的字符编码(详细使用参考文档) </span><br><span class="line">sys.displayhook(value) 如果value非空，这个函数会把他输出到sys.stdout(详细使用参考文档)</span><br></pre></td></tr></table></figure><h2 id="datetime-date-time模块："><a href="#datetime-date-time模块：" class="headerlink" title="datetime,date,time模块："></a>datetime,date,time模块：</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">datetime.date.today() 本地日期对象,(用<span class="built_in">str</span>函数可得到它的字面表示(<span class="number">2014</span>-03-<span class="number">24</span>))</span><br><span class="line">datetime.date.isoformat(obj) 当前[年-月-日]字符串表示(<span class="number">2014</span>-03-<span class="number">24</span>)</span><br><span class="line">datetime.date.fromtimestamp() 返回一个日期对象，参数是时间戳,返回 [年-月-日]</span><br><span class="line">datetime.date.weekday(obj) 返回一个日期对象的星期数,周一是<span class="number">0</span></span><br><span class="line">datetime.date.isoweekday(obj) 返回一个日期对象的星期数,周一是<span class="number">1</span></span><br><span class="line">datetime.date.isocalendar(obj) 把日期对象返回一个带有年月日的元组</span><br><span class="line">datetime对象：</span><br><span class="line">datetime.datetime.today() 返回一个包含本地时间(含微秒数)的datetime对象 <span class="number">2014</span>-03-<span class="number">24</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">50.419000</span></span><br><span class="line">datetime.datetime.now([tz]) 返回指定时区的datetime对象 <span class="number">2014</span>-03-<span class="number">24</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">50.419000</span></span><br><span class="line">datetime.datetime.utcnow() 返回一个零时区的datetime对象</span><br><span class="line">datetime.fromtimestamp(timestamp[,tz]) 按时间戳返回一个datetime对象，可指定时区,可用于strftime转换为日期表示 </span><br><span class="line">datetime.utcfromtimestamp(timestamp) 按时间戳返回一个UTC-datetime对象</span><br><span class="line">datetime.datetime.strptime(‘<span class="number">2014</span>-03-<span class="number">16</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">21</span>‘,”%Y-%m-%d %H:%M:%S”) 将字符串转为datetime对象</span><br><span class="line">datetime.datetime.strftime(datetime.datetime.now(), ‘%Y%m%d %H%M%S‘) 将datetime对象转换为<span class="built_in">str</span>表示形式</span><br><span class="line">datetime.date.today().timetuple() 转换为时间戳datetime元组对象，可用于转换时间戳</span><br><span class="line">datetime.datetime.now().timetuple()</span><br><span class="line">time.mktime(timetupleobj) 将datetime元组对象转为时间戳</span><br><span class="line">time.time() 当前时间戳</span><br><span class="line">time.localtime</span><br><span class="line">time.gmtime</span><br></pre></td></tr></table></figure><h2 id="hashlib-md5模块："><a href="#hashlib-md5模块：" class="headerlink" title="hashlib,md5模块："></a>hashlib,md5模块：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hashlib.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</span><br><span class="line">md5.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</span><br></pre></td></tr></table></figure><h2 id="random模块："><a href="#random模块：" class="headerlink" title="random模块："></a>random模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random.random() 产生0-1的随机浮点数</span><br><span class="line">random.uniform(a, b) 产生指定范围内的随机浮点数</span><br><span class="line">random.randint(a, b) 产生指定范围内的随机整数</span><br><span class="line">random.randrange([start], stop[, step]) 从一个指定步长的集合中产生随机数</span><br><span class="line">random.choice(sequence) 从序列中产生一个随机数</span><br><span class="line">random.shuffle(x[, random]) 将一个列表中的元素打乱</span><br><span class="line">random.sample(sequence, k) 从序列中随机获取指定长度的片断</span><br></pre></td></tr></table></figure><h2 id="types模块："><a href="#types模块：" class="headerlink" title="types模块："></a>types模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存了所有数据类型名称。</span><br><span class="line">if type(‘1111‘) == types.StringType:</span><br><span class="line">MySQLdb模块：</span><br><span class="line">MySQLdb.get_client_info() 获取API版本</span><br><span class="line">MySQLdb.Binary(‘string‘) 转为二进制数据形式</span><br><span class="line">MySQLdb.escape_string(‘str‘) 针对mysql的字符转义函数</span><br><span class="line">MySQLdb.DateFromTicks(1395842548) 把时间戳转为datetime.date对象实例</span><br><span class="line">MySQLdb.TimestampFromTicks(1395842548) 把时间戳转为datetime.datetime对象实例</span><br><span class="line">MySQLdb.string_literal(‘str‘) 字符转义</span><br><span class="line">MySQLdb.cursor()游标对象上的方法：《python核心编程》P624</span><br></pre></td></tr></table></figure><h2 id="atexit模块："><a href="#atexit模块：" class="headerlink" title="atexit模块："></a>atexit模块：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">atexit.register(fun,args,args2..) 注册函数func，在解析器退出前调用该函数</span><br></pre></td></tr></table></figure><h2 id="string模块"><a href="#string模块" class="headerlink" title="string模块"></a>string模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.capitalize() 把字符串的第一个字符大写</span><br><span class="line">str.center(width) 返回一个原字符串居中，并使用空格填充到width长度的新字符串</span><br><span class="line">str.ljust(width) 返回一个原字符串左对齐，用空格填充到指定长度的新字符串</span><br><span class="line">str.rjust(width) 返回一个原字符串右对齐，用空格填充到指定长度的新字符串</span><br><span class="line">str.zfill(width) 返回字符串右对齐，前面用0填充到指定长度的新字符串</span><br><span class="line">str.count(str,[beg,len]) 返回子字符串在原字符串出现次数，beg,len是范围</span><br><span class="line">str.decode(encodeing[,replace]) 解码string,出错引发ValueError异常</span><br><span class="line">str.encode(encodeing[,replace]) 解码string</span><br><span class="line">str.endswith(substr[,beg,end]) 字符串是否以substr结束，beg,end是范围</span><br><span class="line">str.startswith(substr[,beg,end]) 字符串是否以substr开头，beg,end是范围</span><br><span class="line">str.expandtabs(tabsize = 8) 把字符串的tab转为空格，默认为8个</span><br><span class="line">str.find(str,[stat,end]) 查找子字符串在字符串第一次出现的位置，否则返回-1</span><br><span class="line">str.index(str,[beg,end]) 查找子字符串在指定字符中的位置，不存在报异常</span><br><span class="line">str.isalnum() 检查字符串是否以字母和数字组成，是返回true否则False</span><br><span class="line">str.isalpha() 检查字符串是否以纯字母组成，是返回true,否则false</span><br><span class="line">str.isdecimal() 检查字符串是否以纯十进制数字组成，返回布尔值</span><br><span class="line">str.isdigit() 检查字符串是否以纯数字组成，返回布尔值</span><br><span class="line">str.islower() 检查字符串是否全是小写，返回布尔值</span><br><span class="line">str.isupper() 检查字符串是否全是大写，返回布尔值</span><br><span class="line">str.isnumeric() 检查字符串是否只包含数字字符，返回布尔值</span><br><span class="line">str.isspace() 如果str中只包含空格，则返回true,否则FALSE</span><br><span class="line">str.title() 返回标题化的字符串（所有单词首字母大写，其余小写）</span><br><span class="line">str.istitle() 如果字符串是标题化的(参见title())则返回true,否则false</span><br><span class="line">str.join(seq) 以str作为连接符，将一个序列中的元素连接成字符串</span><br><span class="line">str.split(str=‘‘,num) 以str作为分隔符，将一个字符串分隔成一个序列，num是被分隔的字符串</span><br><span class="line">str.splitlines(num) 以行分隔，返回各行内容作为元素的列表</span><br><span class="line">str.lower() 将大写转为小写</span><br><span class="line">str.upper() 转换字符串的小写为大写</span><br><span class="line">str.swapcase() 翻换字符串的大小写</span><br><span class="line">str.lstrip() 去掉字符左边的空格和回车换行符</span><br><span class="line">str.rstrip() 去掉字符右边的空格和回车换行符</span><br><span class="line">str.strip() 去掉字符两边的空格和回车换行符</span><br><span class="line">str.partition(substr) 从substr出现的第一个位置起，将str分割成一个3元组。</span><br><span class="line">str.replace(str1,str2,num) 查找str1替换成str2，num是替换次数</span><br><span class="line">str.rfind(str[,beg,end]) 从右边开始查询子字符串</span><br><span class="line">str.rindex(str,[beg,end]) 从右边开始查找子字符串位置 </span><br><span class="line">str.rpartition(str) 类似partition函数，不过从右边开始查找</span><br><span class="line">str.translate(str,del=‘‘) 按str给出的表转换string的字符，del是要过虑的字符</span><br></pre></td></tr></table></figure><h2 id="urllib模块："><a href="#urllib模块：" class="headerlink" title="urllib模块："></a>urllib模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urllib.quote(string[,safe]) 对字符串进行编码。参数safe指定了不需要编码的字符</span><br><span class="line">urllib.unquote(string) 对字符串进行解码</span><br><span class="line">urllib.quote_plus(string[,safe]) 与urllib.quote类似，但这个方法用‘+‘来替换‘ ‘，而quote用‘%20‘来代替‘ ‘</span><br><span class="line">urllib.unquote_plus(string ) 对字符串进行解码</span><br><span class="line">urllib.urlencode(query[,doseq]) 将dict或者包含两个元素的元组列表转换成url参数。</span><br><span class="line">例如 字典&#123;‘name‘:‘wklken‘,‘pwd‘:‘123‘&#125;将被转换为”name=wklken&amp;pwd=123″</span><br><span class="line">urllib.pathname2url(path) 将本地路径转换成url路径</span><br><span class="line">urllib.url2pathname(path) 将url路径转换成本地路径</span><br><span class="line">urllib.urlretrieve(url[,filename[,reporthook[,data]]]) 下载远程数据到本地</span><br><span class="line">filename：指定保存到本地的路径（若未指定该，urllib生成一个临时文件保存数据）</span><br><span class="line">reporthook：回调函数，当连接上服务器、以及相应的数据块传输完毕的时候会触发该回调</span><br><span class="line">data：指post到服务器的数据</span><br><span class="line">rulrs = urllib.urlopen(url[,data[,proxies]]) 抓取网页信息，[data]post数据到Url,proxies设置的代理</span><br><span class="line">urlrs.readline() 跟文件对象使用一样</span><br><span class="line">urlrs.readlines() 跟文件对象使用一样</span><br><span class="line">urlrs.fileno() 跟文件对象使用一样</span><br><span class="line">urlrs.close() 跟文件对象使用一样</span><br><span class="line">urlrs.info() 返回一个httplib.HTTPMessage对象，表示远程服务器返回的头信息</span><br><span class="line">urlrs.getcode() 获取请求返回状态HTTP状态码</span><br><span class="line">urlrs.geturl() 返回请求的URL</span><br></pre></td></tr></table></figure><h2 id="re模块："><a href="#re模块：" class="headerlink" title="re模块："></a>re模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一.常用正则表达式符号和语法：</span><br><span class="line">&#x27;.&#x27; 匹配所有字符串，除\n以外</span><br><span class="line">‘-’ 表示范围[0-9]</span><br><span class="line">&#x27;*&#x27; 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</span><br><span class="line">&#x27;+&#x27; 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+</span><br><span class="line">&#x27;^&#x27; 匹配字符串开头</span><br><span class="line">‘$’ 匹配字符串结尾 re</span><br><span class="line">&#x27;\&#x27; 转义字符， 使后一个字符改变原来的意思，如果字符串中有字符*需要匹配，可以\*或者字符集[*] re.findall(r&#x27;3\*&#x27;,&#x27;3*ds&#x27;)结[&#x27;3*&#x27;]</span><br><span class="line">&#x27;*&#x27; 匹配前面的字符0次或多次 re.findall(&quot;ab*&quot;,&quot;cabc3abcbbac&quot;)结果：[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;a&#x27;]</span><br><span class="line">‘?’ 匹配前一个字符串0次或1次 re.findall(&#x27;ab?&#x27;,&#x27;abcabcabcadf&#x27;)结果[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;a&#x27;]</span><br><span class="line">&#x27;&#123;m&#125;&#x27; 匹配前一个字符m次 re.findall(&#x27;cb&#123;1&#125;&#x27;,&#x27;bchbchcbfbcbb&#x27;)结果[&#x27;cb&#x27;, &#x27;cb&#x27;]</span><br><span class="line">&#x27;&#123;n,m&#125;&#x27; 匹配前一个字符n到m次 re.findall(&#x27;cb&#123;2,3&#125;&#x27;,&#x27;bchbchcbfbcbb&#x27;)结果[&#x27;cbb&#x27;]</span><br><span class="line">&#x27;\d&#x27; 匹配数字，等于[0-9] re.findall(&#x27;\d&#x27;,&#x27;电话:10086&#x27;)结果[&#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;8&#x27;, &#x27;6&#x27;]</span><br><span class="line">&#x27;\D&#x27; 匹配非数字，等于[^0-9] re.findall(&#x27;\D&#x27;,&#x27;电话:10086&#x27;)结果[&#x27;电&#x27;, &#x27;话&#x27;, &#x27;:&#x27;]</span><br><span class="line">&#x27;\w&#x27; 匹配字母和数字，等于[A-Za-z0-9] re.findall(&#x27;\w&#x27;,&#x27;alex123,./;;;&#x27;)结果[&#x27;a&#x27;, &#x27;l&#x27;, &#x27;e&#x27;, &#x27;x&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span><br><span class="line">&#x27;\W&#x27; 匹配非英文字母和数字,等于[^A-Za-z0-9] re.findall(&#x27;\W&#x27;,&#x27;alex123,./;;;&#x27;)结果[&#x27;,&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;;&#x27;, &#x27;;&#x27;, &#x27;;&#x27;]</span><br><span class="line">&#x27;\s&#x27; 匹配空白字符 re.findall(&#x27;\s&#x27;,&#x27;3*ds \t\n&#x27;)结果[&#x27; &#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;]</span><br><span class="line">&#x27;\S&#x27; 匹配非空白字符 re.findall(&#x27;\s&#x27;,&#x27;3*ds \t\n&#x27;)结果[&#x27;3&#x27;, &#x27;*&#x27;, &#x27;d&#x27;, &#x27;s&#x27;]</span><br><span class="line">&#x27;\A&#x27; 匹配字符串开头</span><br><span class="line">&#x27;\Z&#x27; 匹配字符串结尾</span><br><span class="line">&#x27;\b&#x27; 匹配单词的词首和词尾，单词被定义为一个字母数字序列，因此词尾是用空白符或非字母数字符来表示的</span><br><span class="line">&#x27;\B&#x27; 与\b相反，只在当前位置不在单词边界时匹配</span><br><span class="line">&#x27;(?P&lt;name&gt;...)&#x27; 分组，除了原有编号外在指定一个额外的别名 re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;)(?P&lt;birthday&gt;[0-9]&#123;8&#125;)&quot;,&quot;371481199306143242&quot;).groupdict(&quot;city&quot;) 结果&#123;&#x27;province&#x27;: &#x27;3714&#x27;, &#x27;city&#x27;: &#x27;81&#x27;, &#x27;birthday&#x27;: &#x27;19930614&#x27;&#125;</span><br><span class="line">[] 是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\s*]表示空格或者*号。</span><br><span class="line">二.常用的re函数：</span><br><span class="line">方法/属性 作用</span><br><span class="line">re.match(pattern, string, flags=0) 从字符串的起始位置匹配，如果起始位置匹配不成功的话，match()就返回none</span><br><span class="line">re.search(pattern, string, flags=0) 扫描整个字符串并返回第一个成功的匹配</span><br><span class="line">re.findall(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个列表返回</span><br><span class="line">re.finditer(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个迭代器返回</span><br><span class="line">re.sub(pattern, repl, string, count=0, flags=0) 替换匹配到的字符串</span><br></pre></td></tr></table></figure><h2 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceil:取大于等于x的最小的整数值，如果x是一个整数，则返回x</span><br><span class="line">copysign:把y的正负号加到x前面，可以使用0</span><br><span class="line">cos:求x的余弦，x必须是弧度</span><br><span class="line">degrees:把x从弧度转换成角度</span><br><span class="line">e:表示一个常量</span><br><span class="line">exp:返回math.e,也就是2.71828的x次方</span><br><span class="line">expm1:返回math.e的x(其值为2.71828)次方的值减１</span><br><span class="line">fabs:返回x的绝对值</span><br><span class="line">factorial:取x的阶乘的值</span><br><span class="line">floor:取小于等于x的最大的整数值，如果x是一个整数，则返回自身</span><br><span class="line">fmod:得到x/y的余数，其值是一个浮点数</span><br><span class="line">frexp:返回一个元组(m,e),其计算方式为：x分别除0.5和1,得到一个值的范围</span><br><span class="line">fsum:对迭代器里的每个元素进行求和操作</span><br><span class="line">gcd:返回x和y的最大公约数</span><br><span class="line">hypot:如果x是不是无穷大的数字,则返回True,否则返回False</span><br><span class="line">isfinite:如果x是正无穷大或负无穷大，则返回True,否则返回False</span><br><span class="line">isinf:如果x是正无穷大或负无穷大，则返回True,否则返回False</span><br><span class="line">isnan:如果x不是数字True,否则返回False</span><br><span class="line">ldexp:返回x*(2**i)的值</span><br><span class="line">log:返回x的自然对数，默认以e为基数，base参数给定时，将x的对数返回给定的base,计算式为：log(x)/log(base)</span><br><span class="line">log10:返回x的以10为底的对数</span><br><span class="line">log1p:返回x+1的自然对数(基数为e)的值</span><br><span class="line">log2:返回x的基2对数</span><br><span class="line">modf:返回由x的小数部分和整数部分组成的元组</span><br><span class="line">pi:数字常量，圆周率</span><br><span class="line">pow:返回x的y次方，即x**y</span><br><span class="line">radians:把角度x转换成弧度</span><br><span class="line">sin:求x(x为弧度)的正弦值</span><br><span class="line">sqrt:求x的平方根</span><br><span class="line">tan:返回x(x为弧度)的正切值</span><br><span class="line">trunc:返回x的整数部分</span><br></pre></td></tr></table></figure><h4 id="说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！"><a href="#说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！" class="headerlink" title="说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！"></a>说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！</h4>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python IDLE 使用教程</title>
      <link href="/2024/12/05/IDLE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/05/IDLE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-IDLE-使用教程"><a href="#Python-IDLE-使用教程" class="headerlink" title="Python IDLE 使用教程"></a>Python IDLE 使用教程</h1><h3 id="IDLE字体的修改Options-Configure-IDLE"><a href="#IDLE字体的修改Options-Configure-IDLE" class="headerlink" title="IDLE字体的修改Options-Configure IDLE"></a>IDLE字体的修改Options-Configure IDLE</h3><ul><li>Font Face：设置字体 <code>courier</code>字体</li><li>Size：设置字体大小</li><li>Indentation Width：按一个Tab键缩进的长度，默认是四个空格</li></ul><p><strong>背景颜色</strong></p><p>如果想要将背景色设置为<strong>黑色</strong>，可以选择<code>Highlights</code>按钮，然后点击<code>idle dark</code>。切换之后就是如图所示效果。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/673e65265b3f3070fceb83f6b0426aab.png" alt="img"></p><h3 id="Python-IDLE-快捷键"><a href="#Python-IDLE-快捷键" class="headerlink" title="Python IDLE 快捷键"></a>Python IDLE 快捷键</h3><p><a href="https://www.bilibili.com/video/BV1Me4y1r7Dt/">BIlibili</a></p><ul><li><code>F5</code> 运行程序</li><li><code>Ctrl + [</code> 、<code>Ctrl + ]</code> 缩进代码 </li><li><code>Alt+3</code> 、<code>Alt+4</code> 注释、取消注释代码行 </li><li><code>Alt+5</code> 、<code>Alt+6</code> 切换缩进方式 空格&lt;&#x3D;&gt;Tab </li><li><code>Alt+/</code> 单词完成，&#x3D;&#x3D;只要文中出现过&#x3D;&#x3D;，就可以帮你&#x3D;&#x3D;自动补齐&#x3D;&#x3D;。多按几次可以循环选择 </li><li><code>Alt+M</code> 打开模块代码，<u>先选中模块</u>，然后按下此快捷键，打开该模块的py源码供浏览</li><li><code>F1</code> 打开Python文档</li><li><code>Ctrl+Z</code> 撤销一步操作 </li><li><code>Ctrl+Shift+Z</code> 恢复上—次的撤销操作 </li><li><code>Ctrl+C</code>、 <code>Ctrl+V</code> 复制，粘贴</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛内容</title>
      <link href="/2024/12/02/%E6%AF%94%E8%B5%9B%E5%86%85%E5%AE%B9/"/>
      <url>/2024/12/02/%E6%AF%94%E8%B5%9B%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛内容"><a href="#比赛内容" class="headerlink" title="比赛内容"></a>比赛内容</h1><p>比赛内容:包括 Python 语言基础与算法设计、Python 网页与文本分析、Python 数据处理与分析三项竞赛内容。赛项设置理论竞赛和实操竞赛两个环节，全部采用电脑作答的方式。</p><h3 id="（1）Python-语言基础与算法设计"><a href="#（1）Python-语言基础与算法设计" class="headerlink" title="（1）Python 语言基础与算法设计"></a>（1）Python 语言基础与算法设计</h3><p>本部分重点考察参赛选手对于 Python 基础语法和常见计算机算法的掌握情况与实际使用能力。赛项要求参赛选手能够根据任务要求，输出正确的计算结果。<br>任务考察点分为两方面，一方面考察参赛选手对于 Python基础语法中的掌握，例如**<u>逻辑判断、循环、遍历、字符串、列表、字典、元组、集合、函数、类</u>**等相关知识点;另一方面考察参赛选手的算法设计能力，例如常见的&#x3D;&#x3D;初级排序算法&#x3D;&#x3D;、&#x3D;&#x3D;查找算法&#x3D;&#x3D;等相关知识点。</p><h3 id="（2）Python-网页与文本分析"><a href="#（2）Python-网页与文本分析" class="headerlink" title="（2）Python 网页与文本分析"></a>（2）Python 网页与文本分析</h3><p>本部分考察点分为两方面，一方面需要选手了解常用&#x3D;&#x3D;网页结构&#x3D;&#x3D;，熟练使用 Python 相关工具获取内置专题**<u>页面的指定数据</u><strong>;另一方面需要选手了解 Python 常用</strong><u>文本处理与分析的模块</u>**(库)，能够根据任务要求完成指定操作并返回任务中所需要的数据。</p><h3 id="（3）Python-数据处理与分析"><a href="#（3）Python-数据处理与分析" class="headerlink" title="（3）Python 数据处理与分析"></a>（3）Python 数据处理与分析</h3><p>参赛选手可根据自己的专业方向与兴趣特长，合理选择考试任务方向合理分配考试时间，尽可能多地完成相关任务，得到任务期望输出的指定结果，提交准确高效的赛题解答代码。本部分需要使用的Python相关数据处理与分析的第三方包(库)，如 &#x3D;&#x3D;Numpy&#x3D;&#x3D; 和 &#x3D;&#x3D;Pandas&#x3D;&#x3D; 等，其均已内置于竞赛系统，无需参赛选手手动安装，参赛选手仅需要比赛时引入相关包(库)</p><p>能够熟练使用 &#x3D;&#x3D;Requests、 BeautifulSoup、Pandas、Numpy、Jieba、Pyecharts、Matplotlib&#x3D;&#x3D; 等常见 的 Python 包（库）来解决学习工作中的碰到的实际问题</p><h3 id="三、竞赛内容"><a href="#三、竞赛内容" class="headerlink" title="三、竞赛内容"></a>三、竞赛内容</h3><p>竞赛包括知识理论和上机实操两部分，均分为 Python 语言基础 与算法设计、Python 网页与文本分析、Python 数据处理与分析三项 竞赛内容。</p><table><thead><tr><th>竞赛内容</th><th>相关知识</th><th>技能要求</th></tr></thead><tbody><tr><td>Python 语言基 础与算法设计</td><td>Python 基础语法 和常见的算法与 数据结构等</td><td>掌握 Python &#x3D;&#x3D;基础语法&#x3D;&#x3D;和&#x3D;&#x3D;常见数据结构&#x3D;&#x3D;； 了解常见的计算机算法； 代码编写规范。</td></tr><tr><td>Python 网页与 文本分析</td><td>HTTP 协议、浏 览器原理、网页 基础、爬虫基本 原理、文件切分 清洗与分类等</td><td>熟悉 Python 网页分析常用的 Requests、 bs4 等包（库）； 掌握基于网页规则的信息抽取； 掌握 <code>Jieba</code>、<code>SnowNLP</code> 等文本分析库； 了解基本的自然语言语言解析规则与相 关应用场景精通正则表达式。</td></tr><tr><td>Python 数据处 理与分析</td><td>数 据 获 取 与 清 洗、数据分析、 基础统计分析等</td><td>熟悉 <code>Numpy</code>、<code>Pandas</code>、<code>Pyecharts</code>、<code>Matplotlib</code> 等数据处理与分析相关的包（库）； 掌握基础的数据处理与分析方法； 了解数据分析处理实际常用应用算法；</td></tr></tbody></table><blockquote><p>一共五个小时</p><p>上午两个半小时、下午两个半小时</p><p>上午 算法和爬虫</p><p>下午 数据处理与分析</p></blockquote><h3 id="九、成绩评定"><a href="#九、成绩评定" class="headerlink" title="九、成绩评定"></a>九、成绩评定</h3><p>（一）评分标准 Python 编程竞赛得分分为知识理论部分和上机实操部分，两者分 数比例设置为 2:8。</p><p> 实操部分分为模块 A：Python 语言基础与算法设计、Python 网页 与文本分析，模块 B：Python 数据处理与分析，模块 A、B 各占 50%， 实操中每个竞赛试题任务的最终得分等于任务得分 * 任务难度 系数，难度系数分为容易、中等、困难三个等级。 1.程序设计 每道程序设计任务的测试用例，分为公开测试用例和隐藏测试用 例两种，每个任务满分为 100 分，由任务基础分和任务完成分两部分 构成。 点击“提交代码”按钮，系统显示提交结果、提交次数、执行 用时，并计算该任务的任务基础分和任务完成分。 2.提交结果 点击“提交代码”按钮，提交结果为“全部通过”“部分通过”“未通 过”3 种状态： 全部通过：测试用例全部通过，程序无报错，程序执行时间未超 过规定上限。 部分通过：测试用例未全部通过，程序无报错，程序执行时间未 超过规定上限。 未通过：程序运行异常或程序执行时间超过规定上限。 3.任务基础分 任务基础分总分为 60 分。 点击提交代码，提交结果显示“全部通过”时，任务基础分为 60 分，并计算任务完成分。 点击提交代码，提交结果显示“部分通过”时，根据测试用例通过 数量计算相应任务基础分，而任务完成分为 0 分。 例如某参赛选手某个任务测试用例部分通过，提交次数为 3，系 统计算任务基础分&#x3D;42 分，则该任务最终得分&#x3D;任务基础分 42 分+任 务完成分 0 分&#x3D;42 分。 4.任务完成分 任务完成分最高为 40 分。 当提交结果显示“部分通过”和“未通过”时，任务完成分为 0 分。 只有提交结果显示“全部通过”，系统才能计算任务完成分。 任务完成分&#x3D; 40 * 0.8 ^ (提交次数-1），任务完成分最低为 0 分。 5.竞赛总成绩 参赛选手竞赛总成绩&#x3D; ∑各个任务最终得分*难度系数，竞赛总成 绩由完成的程序设计任务数量和任务难度决定，竞赛总成绩保留 2 位 小数。 6.成绩评定 评分方式为系统根据程序运行结果评分。</p><p>​</p><ul><li><a href="https://blog.ymypay.cn/index.php/2022/10/18/python_2022js/#htoc-3-9">AMEN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python》3小时期末速成课笔记</title>
      <link href="/2024/12/02/%E3%80%8APython%E3%80%8B3%E5%B0%8F%E6%97%B6%E6%9C%9F%E6%9C%AB%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/02/%E3%80%8APython%E3%80%8B3%E5%B0%8F%E6%97%B6%E6%9C%9F%E6%9C%AB%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python》3小时期末速成课笔记"><a href="#《Python》3小时期末速成课笔记" class="headerlink" title="《Python》3小时期末速成课笔记"></a>《Python》3小时期末速成课笔记</h1><p><a href="https://www.bilibili.com/video/BV1p94y1T7j5">BIlibili地址</a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>变量与数据类型</li><li>表达式</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li><p>指向对象的值的名称就是变量，也就是一种标识符，是对内存中的存储位置的命名。</p></li><li><p>对于不同的对象，有不同的类型，得到的内存地址也不一样，通过对得到的地址进行命名得到变量名称，我们将数据存入变量，为存储的数据设置不同的数据结构。</p></li><li><p>变量的值是在不断的动态变化的，Python的变量可以不声明直接赋值使用。由于Python采用动态类型（Dynamic Type），变量可以根据赋值类型决定变量的数据类型</p></li><li><p>&#x3D;&#x3D;在Python中，变量使用等号赋值以后会被创建，定义完成后可以直接使用&#x3D;&#x3D;，</p></li><li><p>变量命名规则:</p><blockquote><p>名称第一字符为英文字母或者下划线</p><p>名称不能使用python的关键字或保留字符</p><p>名称第一字符后可以使用英文字母、下划线和数字</p><p>名称区分大小写，单词与单词之间使用下划线连接</p></blockquote></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Python有可以自由的改变变量的数据类型的动态类型和变量事先说明的&#x3D;&#x3D;静态类型&#x3D;&#x3D;，特定类型是数值数据存入相应的数据类型的变量中，相比下，动态数据类型更加灵活。</p><p>变量的数据类型有多种类型，Python3中有六个标准的数据类型:</p><ul><li>Numbers（数字类型）</li><li>Strings（字符串类型）</li><li>Lists（列表类型）</li><li>Tuples（元组类型）</li><li>Dictionaries（字典类型）</li><li>Sets（集合类型）</li></ul><p>Python内置的数字类型有&#x3D;&#x3D;整型（Integers）、浮点型（Floating point numbers）和复数（Complex numbers）&#x3D;&#x3D;三种，作为可以进行算术运算等的数据类型。</p><p>可以使用<code>type()</code>函数来查看数据类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">1</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ol><li><p>整型（Integers）<br>整数类型(int)简称为整型，表示整数，包括正负的整数，如:0110、-123123456789。</p><p>Python的整型是长整型，能表达的数的范围是无限的，内存足够大，就能表示足够多的数。在使用整型的数还包括其它进制，0b开始的是二进制(binary)，0o开始的是八进制(octonary)，0x开始的十六进制(hexadecimal)，进制之间可以使用函数进行转换，使用时需要注意数值符合进制。</p></li><li><p>布尔型（Booleans）</p><p>布尔值是整型(Integers)的子类，用于逻辑判断真(True)或假(False)用数值1和0分别代表常量True和False。</p><p>在Python语言中，False可以是数值为0、对象为None或者是序列中的空字符串空列表、空元组。</p></li><li><p>浮点型（Float）</p><p>浮点型(Float)是含有小数的数值，用于实数表示，由正负号、数字和小数点组成，正号可以省略。如：-3.0、0.13。8个字节一个浮点，范围-1.8308~+1.8308的数均可以表示。</p></li><li><p>复数型（Complex）</p><p>复数类型(Complex)由实数和虚数组成，用于复数的表示，虚数部分需加上j或J，如：-1j、0j，1.0j。Python的复数类型是其他语言一般没有的。</p></li><li><p>字符串类型（Strings）</p><p>字符串(Strings)，在Python 中的字符串是一种对象类型，使用str表示，通常单引号’或者双引号””包裹起来。如果不想让反斜杠发生转义，可以在字符串前加个r表示原始字符串，加号+是字符串的连接符，星号*表示复制当前的字符串，紧跟的数字为复制的次数。</p><p>字符串是字符的序列，可以按照单个字符或字符片段进行索引</p><p>字符串包括两种序号体系:</p><ul><li>正向递归序列</li><li>反向递归序列</li></ul><p><img src="C:\Users\taichi\AppData\Roaming\Typora\typora-user-images\image-20241202081118976.png" alt="image-20241202081118976"></p></li></ol><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>算术运算符主要是用于数字类型的数据基本运算，Python支持直接进行计算，也就是可以将python shell当计算器来使用。</p><table><thead><tr><th>运算符</th><th>说明</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 24</td><td>34</td></tr><tr><td>-</td><td>减</td><td>10 -2</td><td>8</td></tr><tr><td>*</td><td>乘</td><td>12 * 2</td><td>24</td></tr><tr><td>&#x2F;</td><td>除</td><td>34&#x2F;10</td><td>3.4</td></tr><tr><td>%</td><td>取模：余数</td><td>34%10</td><td>4</td></tr><tr><td>**</td><td>幂</td><td>2 ** 4</td><td>16</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整数：返回商数整数部分</td><td>34 &#x2F;&#x2F; 10</td><td>3</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> + <span class="number">24</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> - <span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span> * <span class="number">2</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">34</span> / <span class="number">10</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">34</span> % <span class="number">10</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">34</span> // <span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符为and（与）、or（或）、not（非）用于逻辑运算判断表达式的True或者False，通常与流程控制一起使用</p><ul><li><code>and</code>：表达式一边有False 就会返回False，当两边都是True时返True .</li><li><code>or</code>：表达式一边True 就会返回 True，当两边都是False 时返回 False。</li><li><code>not</code>：表达式取反，返回值与原值相反。</li></ul><h4 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h4><p>复合赋值运算符时将一个变量参与运算的运算结果赋值给改变量，即a参加了该运算，运算完成后结果赋值给a</p><table><thead><tr><th>运算符</th><th>说明</th><th>表达式</th><th>等效表达式</th></tr></thead><tbody><tr><td>&#x3D;</td><td>直接赋值</td><td>x &#x3D; y + z</td><td>x &#x3D; y + z</td></tr><tr><td>+&#x3D;</td><td>加法赋值</td><td>x +&#x3D; y</td><td>x &#x3D; x + y</td></tr><tr><td>-&#x3D;</td><td>减法赋值</td><td>x -&#x3D; y</td><td>x &#x3D; x - y</td></tr><tr><td>*&#x3D;</td><td>乘法赋值</td><td>x *&#x3D; y</td><td>x &#x3D; x * y</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值</td><td>x &#x2F;&#x3D; y</td><td>x &#x3D; x &#x2F; y</td></tr><tr><td>%&#x3D;</td><td>取模赋值</td><td>x %&#x3D; y</td><td>x &#x3D; x % y</td></tr><tr><td>**&#x3D;</td><td>幂赋值</td><td>x **&#x3D; y</td><td>x &#x3D; x ** y</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>整除赋值</td><td>x &#x2F;&#x2F;&#x3D; y</td><td>x &#x3D; x &#x2F;&#x2F; y</td></tr></tbody></table><h4 id="算数运算符优先级"><a href="#算数运算符优先级" class="headerlink" title="算数运算符优先级"></a>算数运算符优先级</h4><p>由数值、变量、运算符组合的表达式和数学上相同，是有运算符优先级的，优先级高的运算符先进行运算同级运算符，**<u>自左向右运算</u><strong>，遵从小括号优先原则。等号的</strong><u>同级运算</u><strong>时例外，</strong><u>一般都是自右向左进行运算</u>**。</p><h2 id="组合数组类型"><a href="#组合数组类型" class="headerlink" title="组合数组类型"></a>组合数组类型</h2><ul><li>列表</li><li>元组</li><li>字符串</li><li>字典</li><li>集合</li></ul><blockquote><p>组合数据类型</p><ul><li>序列类型<ul><li>列表 list</li><li>元组 tuple</li><li>字符串 string</li><li>**<u>序列类型</u>**是一个元素向量，元素之间存在先后关系，通过索引访问，元素之间不排他</li></ul></li><li>集合类型：集合 set<ul><li>**<u>集合类型</u>**是一个元素集合，元素之间无序，相同元素在集合中唯一</li></ul></li><li>映射类型：字典dict<ul><li>**<u>映射类型</u>**是“键-值”数据项的组合，每个元素是一个键值对</li></ul></li></ul><p>**<u>组合数据类型</u><strong>能够将多个同类型或不同类型的</strong><u>数据组织起</u><strong>，通过单一的表示使数据操作</strong><u>更有序、更容易</u>**。</p></blockquote><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>Python中“序列”的概念</p><ul><li>在Python中，序列是最基本的数据结构;</li><li>序列中的每个元素都被分配一个数字，以表明它的位置，并称之为&#x3D;&#x3D;索引&#x3D;&#x3D;。其中，第一个索引值为0，第二个索引值为1，依此类推。</li><li>Python中的序列都可以进行&#x3D;&#x3D;索引、切片、加、乘、检查成员&#x3D;&#x3D;等操作。为了使用方便Python还内建了确定序列的长度len()以及确定最大max()和最小min()元素的方法。</li><li>Python中最常用的序列是&#x3D;&#x3D;列表、元组和字符串&#x3D;&#x3D;。</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表的概念</p><ul><li>List用来存储任意大小的数据集合。</li><li>一个列表中可以包含任意个数据，每个数据称为元素。</li><li>列表是Python中使用最频繁的数据类型，它是放在方括号([])内、用逗号分隔的一系列元素。</li><li>列表中元素的&#x3D;&#x3D;类型可以不同&#x3D;&#x3D;，它支持数字、字符串甚至可以包含列表。换言之，列表允许嵌套。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1  <span class="comment"># 创建一个空列表</span></span><br><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  <span class="comment"># 创建带有初始值的列表</span></span><br><span class="line">list3 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">list4 = [<span class="number">0</span>] * <span class="number">10</span>   <span class="comment"># 长度为10,每个元素为0</span></span><br><span class="line">list5 = [<span class="number">1</span>,<span class="number">3.14</span>, <span class="string">&#x27;hi&#x27;</span>]  <span class="comment"># 列表可以包括不同类型的元素,但不推荐这种写法</span></span><br><span class="line">list6 = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 list类的构造函数来创建</span></span><br><span class="line">lsit1 = <span class="built_in">list</span>()</span><br><span class="line">list2 = <span class="built_in">list</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment"># 创建带有初始值的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用len()函数 来获取长度</span></span><br><span class="line">length = <span class="built_in">len</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list() 可以将任何可迭代的数据转换成列表</span></span><br><span class="line">lst = <span class="built_in">list</span>(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = <span class="built_in">list</span>(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的访问</span></span><br><span class="line">list2 = lsit([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">var = list2[<span class="number">0</span>] + list2[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 一般地，负数下标的有效范围介于-1和-len(列表变量)之间</span></span><br><span class="line">var = list2[<span class="number">0</span>] + list2[-<span class="number">1</span>] <span class="comment"># 负数下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的切片 lsit[start:end]  左闭右开</span></span><br><span class="line"><span class="comment"># 起始下标和结束下标可以省略。</span></span><br><span class="line"><span class="comment"># 如果省略起始下标，则起始下标默认为0;如果省略结束下标，则结束下标默认为列表长度，即截取到列表的最后一个元素</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list2 = [:<span class="number">2</span>]  <span class="comment"># [0:2]</span></span><br><span class="line">list3 = [<span class="number">3</span>:]   <span class="comment"># [3:5]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">True</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1[<span class="number">2</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1[<span class="number">2</span>:<span class="number">3</span>]  <span class="comment"># 注意,2:3 是返回一个数组,并里面只有一个内容</span></span><br><span class="line">[<span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带步长的切片 list[start:end:step]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">step:正负数均可，其绝对值大小决定了切取数据时的“步长”，而正负号决定了“切取方向”正表示“从左往右”取值，负表示“从右往左”取值。当step省略时，默认为1，即从左往右以增量1取值。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">6</span>]   <span class="comment"># step=1,从左往右取值</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>]   <span class="comment"># step=2,从左往右取值</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">6</span>:<span class="number">2</span>:<span class="number">2</span>]  <span class="comment"># step=2,从左往右取值</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">2</span>:-<span class="number">6</span>:-<span class="number">2</span>]  <span class="comment"># step=-2,从右往左取值</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>列表的内置函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>len(listname)</code></td><td>返回列表的元素数量</td></tr><tr><td><code>max(listname)</code></td><td>返回列表中元素的最大值</td></tr><tr><td><code>min(listname)</code></td><td>返回列表中元素的最小值</td></tr><tr><td><code>list(tuple)</code></td><td>将元素转换为列表</td></tr></tbody></table><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>lsit.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列的多个值</td></tr><tr><td>list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index,obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop(obj&#x3D;list[-1])</td><td>移除列表中的一个元素（默认是最后一个），并返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td>将列表中的元素反向</td></tr><tr><td>lsit.sort([func])</td><td>对原列表进行排序</td></tr><tr><td>list.clear()</td><td>清空列表</td></tr><tr><td>list.copy()</td><td>复制列表</td></tr></tbody></table><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>Python 的元组与列表相似，不同之处在于&#x3D;&#x3D;元组的元素是不能修改的&#x3D;&#x3D;。</p><p>当创建不同类型的数据时，推荐使用元组来创建</p><p>元组的创建</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在括号中添加元素,并用逗号分隔元素</span></span><br><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2017</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">tup3 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建空元组</span></span><br><span class="line">tup = ()</span><br><span class="line"><span class="comment"># 创建只包含一个元组时,需要在元组后面添加逗号</span></span><br><span class="line">tup = (<span class="number">50</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Tuple类的构造函数 tuple()</span></span><br><span class="line">tup1 = <span class="built_in">tuple</span>()</span><br><span class="line">tup2 = <span class="built_in">tuple</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 元组的下标索引也从0开始,而且也可以进行截取、组合等操作</span></span><br></pre></td></tr></table></figure><p>元组的访问</p><p>使用下标索引来访问元组中的值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2017</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;put1[0]: &#x27;</span>, tup1[<span class="number">0</span>])</span><br><span class="line">put1[<span class="number">0</span>]:  Google</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;put2[1:5]: &#x27;</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">put2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>元组的修改</p><p>元素中的元素值是**<u>不允许修改</u>**的，但可以对元组进行连接拼接组合</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">12</span>,<span class="number">34.55</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>元组的删除</p><p>元素中的元素值是**<u>不允许删除</u>**的，但可以使用del语句删除整个元组</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2017</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tup1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tup1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;tup1&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>元组的内置函数</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>len(tuple)</td><td>个数</td></tr><tr><td>max(tuple)</td><td>最大值</td></tr><tr><td>min(tuple)</td><td>最小值</td></tr><tr><td>tuple(seq)</td><td>将列表转换为元组</td></tr></tbody></table><p>元组和列表都属于序列</p><p>列表为&#x3D;&#x3D;可变序列&#x3D;&#x3D;，可以**<u>随意修改列表汇总的元素值，增加、删除</u>**元素;</p><p>元组为&#x3D;&#x3D;不可变序列&#x3D;&#x3D;，元组中的元素**<u>一旦定义就不允许进行增、删和替换操作</u><strong>。</strong><u>元组的访问和处理速度比列表更快</u><strong>。如果所需要定义的序列内容</strong><u>不会进行修改</u>**，那么最好使用元组。另外，使用元组也可以使元素无法被修改，从而使代码更安全。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串的创建</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">var2 = <span class="string">&quot;hello python&quot;</span></span><br><span class="line">var3 = <span class="built_in">str</span>(<span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 使用str类的构造函数</span></span><br><span class="line"><span class="comment"># Python的三引号(三个单引号或三个双引号均可)用于字符串跨多行，字符串中可以包含换行符、制表符以及其它特殊字符。</span></span><br><span class="line">para_str = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行字符串</span></span><br><span class="line"><span class="string">可以使用制表位</span></span><br><span class="line"><span class="string">TAB(\t)</span></span><br><span class="line"><span class="string">也可以使用换行符[\n]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>字符串中值的访问</p><p>Python不支持字符类型。即使是单个字符，Python也将其视为一个字符串来使用访问子串，实际上就是用方括号来截取字符串，有的文献称之为“切片运算”</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">str1[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># 0~2, 012</span></span><br><span class="line">str1[:]    <span class="comment"># all,全部</span></span><br><span class="line">str1[<span class="number">6</span>:]   <span class="comment"># 获取6之后的 6789</span></span><br><span class="line">str1[:-<span class="number">3</span>]  <span class="comment"># 从后面数第三个 之前的所有字符串,0~6</span></span><br><span class="line">str1[<span class="number">2</span>]    <span class="comment"># 单个字符串 2</span></span><br><span class="line">str1[-<span class="number">1</span>]   <span class="comment"># 最后一位</span></span><br><span class="line">str1[::-<span class="number">1</span>]  <span class="comment"># 反序 9~0</span></span><br><span class="line">str1[-<span class="number">3</span>:-<span class="number">1</span>] <span class="comment"># 倒数第三与数第一前一个字符 78 </span></span><br><span class="line">str1[-<span class="number">3</span>:]   <span class="comment"># 倒数第三到最后 789</span></span><br><span class="line">str1[:-<span class="number">5</span>:-<span class="number">3</span>] <span class="comment"># 96  逆序截取</span></span><br></pre></td></tr></table></figure><p>python中的转义字符</p><p>当字符串中需要使用特殊字符时，可在特殊字符前冠以反斜杠()，形成转义字符。Python的转义字符如下表所示。</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\(在行尾时)</code></td><td>续行符</td></tr><tr><td><code>\\</code></td><td>反斜杠符号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\b</code></td><td>退格</td></tr><tr><td><code>\000</code></td><td>空</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>回车</td></tr></tbody></table><p>字符串内置函数</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>capitalize()</code></td><td>将字符串的第一个字符转换为大写</td></tr><tr><td><code>center(width,fillchar)</code></td><td>返回一个指定的宽度width居中的字符串,fillchar为填充的字符串，默认是空格</td></tr><tr><td><code>lower()</code></td><td>转换字符串中所有大写字母为小写</td></tr><tr><td><code>upper()</code></td><td>转换字符串中所有小写字母为大写</td></tr><tr><td><code>swapcase()</code></td><td>将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td><code>find(str, beg=0,end=len(string))</code></td><td>检测str是否包含在字符串中，如果用beg和end指定范围，则检查是否包含在指定的范围内，如果是，则返回开始的索引值，否则返回-1</td></tr><tr><td><code>index(str,beg=0,end=len(string))</code></td><td>跟find()方法一样，只不过如果str不在字符串中，则会报一个异常。</td></tr><tr><td><code>count(str,beg=0,end=len(string))</code></td><td>返回 str 在 string 里面出现的次数，如果指定 beg 或者 end，则返回指定范围内 str 出现的次数。</td></tr><tr><td><code>len(string)</code></td><td>返回字符串长度</td></tr><tr><td><code>rstrip()</code></td><td>删除字符串末尾的空格</td></tr><tr><td><code>lstrip()</code></td><td>截掉字符串左边的空格</td></tr></tbody></table><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p><strong>字典的观念</strong></p><p>允许查找与任意键相关联的信息的集合称为“映射”。Python的字典是映射。</p><p>Python的字典是一种可变容器模型，且可以存储任意类型对象。</p><p><strong>字典的创建</strong></p><p>字典中的每个项都是“&#x3D;&#x3D;键&#x2F;值对&#x3D;&#x3D;”,“键”与“值”之间用冒号(&#x3D;&#x3D;:&#x3D;&#x3D;)分割，而每个“对”之间用逗号(&#x3D;&#x3D;,&#x3D;&#x3D;)分割，整个字典放在花括号(<code>&#123;&#125;</code>)中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d = &#123;key1: value1, key2: value2, key3: value3&#125;</span><br></pre></td></tr></table></figure><p>对每个键&#x2F;值对而言，&#x3D;&#x3D;键必须是唯一的，且不可变&#x3D;&#x3D;，如字符串、数字或元组均可作为键，但列表不可以。值可以取任何数据类型，但值可以改变。</p><p>使用dict类的构造函数dict()创造</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span>(&#123;<span class="string">&quot;Tom&quot;</span>: <span class="string">&#x27;123456789&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>: <span class="string">&#x27;23456789&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>字典元素的访问</strong></p><p>以“键”通过下表来返回“值”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;香蕉&#x27;:20, &#x27;苹果&#x27;:50&#125;</span><br><span class="line">print(dict2[&quot;香蕉&quot;])  # 20</span><br></pre></td></tr></table></figure><p>元素在字典中的排列顺序是随机的，与输入的顺序不一定相同，所以不能用位置作为下标。</p><p>访问字典元素时，如果输入的“键”不存在，也会产生错误。</p><p><strong>字典元素的添加与修改</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;Age&#x27;</span>] = <span class="number">8</span>   <span class="comment"># 更新 Age</span></span><br><span class="line">dict1[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&#x27;XG&#x27;</span>  <span class="comment"># 添加信息</span></span><br></pre></td></tr></table></figure><p><strong>字典的遍历</strong></p><p>使用for循环可以遍历一个字典。遍历得到的是字典的&#x3D;&#x3D;关键字&#x3D;&#x3D;。</p><p>为遍历出整个字典对象，在for循环体中，使用&#x3D;&#x3D;以“关键字”作为下标来返回“值”&#x3D;&#x3D;。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1:</span><br><span class="line"><span class="built_in">print</span>(key, <span class="string">&#x27;: &#x27;</span>, dict1[key])</span><br></pre></td></tr></table></figure><p><strong>字典键的特性</strong></p><p>字典的“**<u>值</u><strong>”可以取任何Python对象，没有任何限制，它既可以是标准对象，也可以是用户自己定义的对象，但“</strong><u>键</u>**”不行。</p><p>关于字典的键，有两点必须牢记:</p><ol><li>同一个键不得出现两次。创建字典时如果一个值被赋值两次，则后一个值被记住</li><li>键必须不可变。可以用数字、字符串或元组做键，用列表则不行</li></ol><p><strong>字典的内置函数</strong></p><ul><li><p>len(dict)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算字典元素个数,即键的总数</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">len</span>(dict1)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li><li><p>str(dict)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">str</span>(dict2)  <span class="comment"># 输出字典,以可打印的字符串表示</span></span><br><span class="line"><span class="string">&quot;&#123;&#x27;Name&#x27;: &#x27;Taichi&#x27;, &#x27;Age&#x27;: 7, &#x27;Class&#x27;: &#x27;First&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>type(variable)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回输入的遍历类型,如果变量是字典就返回字典类型</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">type</span>(dict1) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.fromkeys(seq[,value])</td><td>创建一个新字典，以序列seq中的元素作为字典的键，value为字典所有键对应的初始值</td></tr><tr><td>def.get(key, default&#x3D;None)</td><td>反之指定键的值，如果值不存在字典返回 default</td></tr><tr><td>key in dict (in 操作数)</td><td>如果键在字典dict里，则返回 True，否则返回 False</td></tr><tr><td>dict.items()</td><td>以列表返回可遍历的（键，值）元组数组</td></tr><tr><td>dict.keys()</td><td>返回所有的键</td></tr><tr><td>dict.values()</td><td>返回一个迭代器，可以使用list() 来转换为列表，列表为字典中的所有值</td></tr><tr><td>dict.update(dict2)</td><td>把字典dict的键&#x2F;值对 更新到dict里</td></tr></tbody></table><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><strong>集合的概念</strong></p><p>集合(set)是Python的基本数据类型，把&#x3D;&#x3D;不同的元素&#x3D;&#x3D;组合在一起便形成了集合。组成一个集合的成员称作该集合的元素(element)。</p><p>集合分为两类:**<u>可变集合(set)</u><strong>，</strong><u>不可变集合(frozenset)</u>**。</p><p>可变集合(set)可添加和删除元素，是非可哈希的，不能用作字典的键，也不能做其他集合的元素。<br>不可变集合(frozenset)与之相反。</p><p><strong>创建</strong></p><p>可变集合的创建</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 创建空集合</span></span><br><span class="line">set2 = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># 使用set函数将列表、元组、字符串转为集合</span></span><br><span class="line">set3 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在一个集合中不能有相同的元素。相同的元素会被自动删除&#x3D;&#x3D;</p><p>不可变集合创建</p><p>创建不可变集合应使用 <code>frozenset()</code>函数，不能使用大括号</p><p>不可变集合不能被修改</p><p><strong>集合的遍历</strong></p><p>因集合是无序的，不能使用索引来访问集合中的元素。可使用for循环可以遍历一个集合。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> set1:</span><br><span class="line">    <span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure><ul><li>元素访问的顺序依赖于它们在内部是如何存储的。输出中元素的顺序与创建集合时的顺序是不同的</li><li>无序使得可以实现高效的集合操作</li></ul><p><strong>增加和删除集合元素</strong></p><ul><li>如果要增加的元素**<u>没包含</u><strong>在集合中，它会被增加到集合中并且集合的</strong><u>大小加1;</u>**</li><li>如果要增加的元素**<u>包含在</u><strong>集合中，则添加操作</strong><u>不会有效果</u>**，集合没有被修改。</li><li>如果元素存在，<code>discard</code> 方法会删除它，但是如果元素不是集合成员时，则不会有效果。</li><li><code>clear</code>方法删除集合中的所有元素，留下一个空集合</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line">set1.add(<span class="string">&#x27;pear&#x27;</span>)      <span class="comment"># 添加 pear</span></span><br><span class="line">set1.discard(<span class="string">&#x27;apple&#x27;</span>) <span class="comment"># 删除 apple</span></span><br><span class="line">set1.clear()          <span class="comment"># 清空</span></span><br></pre></td></tr></table></figure><p><strong>集合运算</strong></p><p>交集操作符“<code>&amp;</code>”有一个与之等价的方法<code>intersection()</code></p><p>并集操作符“<code>|</code>”有一个与之等价的方法<code>union()</code></p><p>差集操作符“<code>-</code>”与之等价的方法是<code>difference()</code></p><p><code>a.difference(b)</code>: 返回一个包含那些属于集合a但不属于集合b的元素的新集合</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 | set2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 &amp; set2</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 - set2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>内置函数</strong></p><ol><li>len()：返回集合元素的个数</li><li>set()、frozenset()：创建集合</li><li>适合所有集合的方法（见下表）</li></ol><table><thead><tr><th>方法</th><th>操作</th></tr></thead><tbody><tr><td>s.issubset(t)</td><td>如果s是t的子集，则返回True，否则返回False</td></tr><tr><td>s.issuperset(t)</td><td>如果s是t的超集，则返回True，否则返回False</td></tr><tr><td>s.union(t)</td><td>返回s和t的并集</td></tr><tr><td>s.intersection(t)</td><td>返回s和t的交集</td></tr><tr><td>s.difference(t)</td><td>s - t，把s中所有的t减去</td></tr><tr><td>s.symmetric_difference(t)</td><td>s和t并集，然后删除交集</td></tr><tr><td>s.copy()</td><td>s的浅复制</td></tr></tbody></table><p>仅适合<strong>可变集合</strong>的方法</p><table><thead><tr><th>方法名称</th><th>操作</th></tr></thead><tbody><tr><td>s.update(t)</td><td>用t中的元素修改s，即s现在包含s或t的成员。</td></tr><tr><td>s.intersection_updata(t)</td><td>s中的成员是共同属于s和t中的元素。</td></tr><tr><td>s.difference_updata(t)</td><td>s中的成员是属于s但不包含在t中的元素。</td></tr><tr><td>s.symmetric_difference_updata(t)</td><td>s中的成员更新为那些包含在s或t中，但不是s和t共有的元素。</td></tr><tr><td>s.add(obj)</td><td>在集合s中添加对象obj</td></tr><tr><td>s.remove(obj)</td><td>从集合s中删除对象obj，如果obj不是集合s中的元素(obj not in s)将引发KeyError错误。</td></tr><tr><td>s.discard(obj)</td><td>如果obj是集合s中的元素，从集合s中删除对象obj。</td></tr><tr><td>s.pop()</td><td>删除集合s中的任意一个对象，并返回它。</td></tr><tr><td>s.clear()</td><td>删除集合s中的所有元素。</td></tr></tbody></table><p>集合和列表都可以存储多个元素，两者不同:</p><ul><li>集合**<u>不能存储重复的元素</u>**</li><li>集合中的元素是**<u>无序的</u><strong>，</strong><u>不能通过下标</u>**运算符来访问元素</li><li>集合还支持如何判断集合关系以及四种集合运算</li><li>**<u>列表</u><strong>的存储方式为</strong><u>顺序存储</u><strong>，而集合采用的存储方式更加复杂。这使得在执行查找元素和删除元素的操作时，使用集合比使用列表的</strong><u>效率高</u>**。</li></ul><p>【例】编写程序，统计文本中只出现一次的单词（不考虑文本中的特殊字符，默认英文单词均为小写）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">text = <span class="built_in">input</span>(<span class="string">&#x27;Please input a text here:&#x27;</span>)</span><br><span class="line">words = text.split()  <span class="comment"># 默认空格分割</span></span><br><span class="line">word_count = <span class="built_in">set</span>()</span><br><span class="line">word_dis = <span class="built_in">set</span>()  <span class="comment"># 多次出现的单词</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> word_count:</span><br><span class="line">        word_dis.add(word) <span class="comment"># 删除多次出现的</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        word_count.add(word)  <span class="comment"># 保存第一次出现的单词</span></span><br><span class="line">wordss = word_count - word_dis  <span class="comment"># 把出现多次的单词清理掉</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> wordss:</span><br><span class="line">    <span class="built_in">print</span>(word)</span><br></pre></td></tr></table></figure><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><ul><li>选择结构控制</li><li>循环结构控制</li></ul><h4 id="选择结构-if语句"><a href="#选择结构-if语句" class="headerlink" title="选择结构-if语句"></a>选择结构-if语句</h4><p>单分支</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>双分支</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>多分支</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> bool1:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> bool2:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> bool3:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>练习题</p><p>例:体型判断。按“体指数”对肥胖程度进行划分</p><p>体指数t&#x3D;体重w&#x2F;(身高h)2</p><p>(w 单位为公斤，h单位为米)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BMI=体重÷身高的平方</span></span><br><span class="line">width = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你的体重:&#x27;</span>))  <span class="comment"># 公斤</span></span><br><span class="line">height = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你的身高:&#x27;</span>)) <span class="comment"># 米</span></span><br><span class="line"></span><br><span class="line">bmi = width / (height * height)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BMI: &quot;</span>, <span class="built_in">format</span>(bmi, <span class="string">&#x27;.2f&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;太瘦了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt;= <span class="number">25</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正常&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt;= <span class="number">27</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;超重了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;肥胖&#x27;</span>)</span><br></pre></td></tr></table></figure><p>if三元运算符</p><p><code>X if bool else Y</code>，当bool为True的时候，返回X，False 返回 Y</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x,y = <span class="number">4</span>,<span class="number">6</span></span><br><span class="line">bigger = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(bigger)</span><br></pre></td></tr></table></figure><h4 id="循环结构控制"><a href="#循环结构控制" class="headerlink" title="循环结构控制"></a>循环结构控制</h4><p><strong>while语句</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 中的 else 语句</span></span><br><span class="line">cou = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> con &lt;= <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(cou, <span class="string">&#x27;小于或等于3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(cou,<span class="string">&#x27;大于3&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>for语句</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1~100 累加和</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):  <span class="comment"># 左闭右开</span></span><br><span class="line">    x += i</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><strong>break和continue</strong></p><blockquote><p>break 退出循环（终止循环）</p><p>continue 退出本次循环</p><p>return 函数体结束</p></blockquote><h2 id="函数与模块"><a href="#函数与模块" class="headerlink" title="函数与模块"></a>函数与模块</h2><ul><li>函数的概述</li><li>函数的参数和返回值</li><li>函数的调用</li><li>模块</li></ul><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><p>一个程序可以按不同功能实现拆分成不同模块，而函数就是能实现某一部分功能的代码块。</p><p>Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号内参数和冒号(:)，然后在缩进块中编写函数体，函数的返回值用return语句返回。</p><p>注意：&#x3D;&#x3D;Python是靠缩进块来标明函数的作用域范围的，缩进块内是函数体，这和其它高级编程语言是有区别的，比如:C&#x2F;C++&#x2F;iavaR语言大括号{}内的是函数体&#x3D;&#x3D;。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2  <span class="comment"># 三元表达式,返回最大值</span></span><br></pre></td></tr></table></figure><p><strong>全局变量</strong></p><p>在函数外面定义的变量称为全局变量。全局变量的作用域在整个代码段(文件、块)，在整个程序代码中都能被访问到。在函数内部可以去访问全局变量。如下所示代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">global_var = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_var</span>():</span><br><span class="line">    <span class="comment"># 这里定义了一个局部变量，与全局变量同名</span></span><br><span class="line">    global_var = <span class="number">40</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside function:&quot;</span>, global_var)  <span class="comment"># 输出：Inside function: 40</span></span><br><span class="line"></span><br><span class="line">modify_var()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Outside function:&quot;</span>, global_var)  <span class="comment"># 输出：Outside function: 30</span></span><br></pre></td></tr></table></figure><p>如果要在**<u>函数内部去修改全局变量的值</u>**，并使之在整个程序生效，采用关键字<code>global</code>即可。</p><p><strong>局部变量</strong></p><p>在函数内部定义的参数和变量称为局部变量，超出了这个函数的作用域局部变量是无效的，它的作用域仅在函数内部。如下所示代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个全局变量</span></span><br><span class="line">total_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_score</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="comment"># 定义一个局部变量</span></span><br><span class="line">    local_score = score</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Local score: <span class="subst">&#123;local_score&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改全局变量</span></span><br><span class="line">    <span class="keyword">global</span> total_score</span><br><span class="line">    total_score += local_score</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total score: <span class="subst">&#123;total_score&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，传入分数</span></span><br><span class="line">add_score(<span class="number">85</span>)  <span class="comment"># 输出：Local score: 85, Total score: 85</span></span><br><span class="line">add_score(<span class="number">90</span>)  <span class="comment"># 输出：Local score: 90, Total score: 175</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数外部访问全局变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Final total score: <span class="subst">&#123;total_score&#125;</span>&quot;</span>)  <span class="comment"># 输出：Final totalscore: 175</span></span><br></pre></td></tr></table></figure><p>一个python表达式可以访问局部命名空间和全局命名空间里的变量。如果**<u>一个局部变量和一个全局变量&#x3D;&#x3D;重名&#x3D;&#x3D;</u><strong>，则</strong><u>局部变量会覆盖全局变量</u>**。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>  <span class="comment"># 全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    x = <span class="number">2</span>  <span class="comment"># 局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(x)  <span class="comment"># 2</span></span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(x)   <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h4 id="函数的参数和返回值"><a href="#函数的参数和返回值" class="headerlink" title="函数的参数和返回值"></a>函数的参数和返回值</h4><p>参数传递的方式</p><p>在Python中，将函数参数分为三类:位置参数、**<u>可变参数</u><strong>、</strong><u>关键字参数</u>**。</p><ol><li><p>位置参数</p><p>直接传入**<u>参数数据即可</u>**，如果有多个参数，位置先后顺序不能改变</p></li><li><p>可变参数</p><p>有2种传递方式:</p><p>1是直接传入参数值;</p><p>2是先封装成列表(list)或元组(tuple)，再在封装后的列表或元组前面添加一个星号“*”传入。</p></li><li><p>(3)关键字参数</p><p>有2种传递方式:</p><p>1是直接传入参数值;</p><p>2是可以先将参数封装成字典(dict)，再在封装后的字典前添加2个星号“**”传入</p></li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 位置参数和关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sub</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x-y</span><br><span class="line">Sub(<span class="number">20</span>,<span class="number">10</span>)  <span class="comment"># 位置参数</span></span><br><span class="line">Sub(x=<span class="number">20</span>, y=<span class="number">10</span>) <span class="comment"># 关键字参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">num1=<span class="number">99</span>, num2=<span class="number">50</span></span>):</span><br><span class="line">    <span class="keyword">return</span> (num1-num2)</span><br><span class="line">fun()  <span class="comment"># 使用默认参数 返回49</span></span><br><span class="line">fun(<span class="number">55</span>)  <span class="comment"># x=55,y是默认50,返回 5</span></span><br><span class="line">fun(<span class="number">20</span>,<span class="number">10</span>)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变参数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;当在定义函数参数的时候，我们不知道究竟需要多少个参数的时候，只要在参数前面加上星“*”即可，这样的参数称为可变参数。如下所示代码:&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">var_par</span>(<span class="params">*param</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第三个参数是:&#x27;</span>, param[<span class="number">2</span>]) <span class="comment"># 10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;可变长度是:&#x27;</span>, <span class="built_in">len</span>(param))  <span class="comment"># 5</span></span><br><span class="line">var_par(<span class="string">&#x27;taichi&#x27;</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">10</span>,<span class="number">7</span>, <span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>函数返回值</strong></p><blockquote><p>没有<code>return</code>指定返回值，则返回的是一个<code>None</code>对象</p><p><code>return [&#39;taichi&#39;, 10]</code>，返回一个数组</p><p><code>return &#39;taichi&#39;,10</code>，返回的是一个 <code>tuple</code></p></blockquote><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><p>函数的调用方法</p><p>要调用一个函数，需要知道**<u>函数的名称和参数</u>**。</p><p>函数分为**<u>自定义函数</u><strong>和</strong><u>内置函数</u>**。</p><p>自定义函数需要先定义再调用，内置函数直接调用，有的内置函数是在特定的模块下，这时需要用import命令导入模块后再调用</p><p>调用函数的时候，如果传入的**<u>参数数量不对</u><strong>，会报<code>TypeError</code>的错误，同时Python会明确地告诉你参数的个数。如果传入的</strong><u>参数数量是对的</u><strong>，但</strong><u>参数类型不能被函数所接受</u>**，也会报<code>TypeError</code>的错误，同时给出错误信息。</p><p>函数名其实就是指向一个函数对象的引用，可以把函数名赋给一个变量。</p><p><strong>嵌套调用</strong></p><p>**<u>允许在函数内部创建另一个函数</u><strong>，这种函数叫</strong><u>内嵌函数或者内部函数。</u>**内嵌函数的作用域在其内部，如果内嵌函数的作用域超出了这个范围就不起作用。如下所示代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是外部函数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是内部函数&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    inner_function() <span class="comment"># 这是内部函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用外部函数</span></span><br><span class="line">outer_function()</span><br><span class="line"><span class="comment"># 调用内函数, 报错, 函数名未定义</span></span><br><span class="line">inner_function()</span><br></pre></td></tr></table></figure><p><strong>递归调用</strong></p><p>函数调用自身的行为是递归。</p><p>递归的2个条件：调用函数自身，设置了正确的返回条件。递归即是有进去必须有回来</p><p>Python默认递归深度100层(Python限制)。</p><p>设置递归的深度的系统函数是：<code>sys.setrecursionlimit(stepcoun)</code>。参数：<code>stepcount</code>设置递归的深度。</p><p>递归有危险性：消耗时间和空间，因为递归是基于弹栈和出栈操作。递归忘掉返回使程序崩溃，消耗掉所有内存。</p><p><img src="D:\笔记\Python比赛\pandas-image\image-20241202155304733.png" alt="image-20241202155304733"></p><h4 id="lambda-函数（匿名函数）"><a href="#lambda-函数（匿名函数）" class="headerlink" title="lambda 函数（匿名函数）"></a>lambda 函数（匿名函数）</h4><p>lambda函数是一个只用一行就能解决问题的函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arg1,arg2,...ageN : experssion</span><br><span class="line"><span class="comment">#   参数列表,可以多个参数     表达式</span></span><br></pre></td></tr></table></figure><ul><li>arg1、arg2等参数是可选的，如果使用参数的话，参数通常也会在表达式之中出现。</li><li>匿名函数的参数规则、作用域关系与有名函数是一样的。</li><li>表达式该表达式必须要有一个返回值，该值直接返回，**<u>无需return</u>**语句</li><li>&#x3D;&#x3D;表达式不能包含循环、return，可以包含if… else …&#x3D;&#x3D;</li></ul><p>练习</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义函数1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> arg1,arg2 : arg1 + arg2</span><br><span class="line"><span class="comment"># 调用自定义函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;相加的值: &#x27;</span>, <span class="built_in">sum</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数2</span></span><br><span class="line">power = <span class="keyword">lambda</span> x,y: x ** y</span><br><span class="line"><span class="built_in">print</span>(power(<span class="number">2</span>,<span class="number">10</span>))  <span class="comment"># 1024</span></span><br></pre></td></tr></table></figure><p><strong>lambda的特点</strong></p><ul><li><code>lambda</code>只是一个表达式，<u>函数体比def简单很多</u>。</li><li><code>lambda</code>的主体是一个表达式，**<u>而不是一个代码块</u><strong>，因而仅仅能在lambda表达式中封装</strong><u>有限的逻辑</u>**。</li><li><code>lambda</code>函数拥有自己的命名空间，且&#x3D;&#x3D;不能访问自有参数列表之外或全局命名空间里的参数&#x3D;&#x3D;。</li></ul><p><strong>map()函数</strong></p><p>map()函数是一个内置的高阶函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(function, iterable,...)</span><br></pre></td></tr></table></figure><ul><li>参数1:传入**<u>一个函数</u>**，这个函数可以是内置的，也可 以是自己定义，也可以是匿名函数</li><li>参数2:是**<u>可迭代对象</u>**，如列表，字符串等等。</li><li>该函数返回一个map对象，是个迭代器。</li><li>注意：不是列表&#x3D;&#x3D;不能直接输出，可以通过for循环或者Iist()来显示&#x3D;&#x3D;。</li></ul><p>map函数&#x3D;&#x3D;将iterable中的每一个元素执行一遍 function&#x3D;&#x3D;，结果以map对象的形式返回。注意，<code>iterable</code>后面还有省略号，即可以传<u>多个</u>iterable ，如果有额外的iterable参数，并行的从这些参数中取元素，并调用fnction。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line">a = <span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># &lt;map object at 0x0000025B49C1F8E0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))  <span class="comment"># [1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用for循环来取出内容</span></span><br><span class="line">ls = []</span><br><span class="line">a = <span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">ls.append(i)</span><br><span class="line"><span class="built_in">print</span>(ls) <span class="comment"># [1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用推导式</span></span><br><span class="line">a = <span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">ls = [item <span class="keyword">for</span> item <span class="keyword">in</span> a]</span><br><span class="line"><span class="built_in">print</span>(ls) <span class="comment"># [1, 4, 9, 16]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>模块与程序</p><p>我们写的代码保存的以.py结尾的Python文件就是一个独立的模块，模块包含了对象定义和语句。</p><p><strong>模块导入方法</strong></p><p>要导入系统模块或者已经定义好的模块，有三种方法：</p><ol><li><code>import 模块名</code></li><li><code>from 模块名 import 函数名</code> 导入模块中所有的函数 <code>from 模块名 import *</code></li><li><code>import 模块名 as 别名</code></li></ol><p>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</p><ol><li>不管你执行了多少次 <code>import</code>，一个模块只会被导入一次</li><li>导入模块后，我们就可以用模块名称这个变量访问模块的函数所有功能</li></ol><h2 id="异常与文件操作"><a href="#异常与文件操作" class="headerlink" title="异常与文件操作"></a>异常与文件操作</h2><ul><li>Python的文件操作</li><li>Python异常处理机制</li></ul><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>打开文件</p><p>Python使用内置函数open()打开文件，创建file对象。在系统中，只有存在file对象后，用户才能对文件进行相应的操作。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file <span class="built_in">object</span> = <span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=-<span class="number">1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><p>文件名(name)为必选参数，</p></li><li><p>模式(mode)和缓冲(buffering)参数是可选的。</p></li><li><p>该函数返回一个文件对象。</p></li><li><p><code>file</code>：要打开的文件的路径。</p></li><li><p><code>mode</code>：文件打开模式，默认为读模式（‘r’）。常见模式包括：</p><ul><li><code>&#39;r&#39;</code>：只读模式。文件必须存在。</li><li><code>&#39;w&#39;</code>：写入模式。如果文件不存在则创建文件，如果文件存在则**<u>清空文件内容</u>**。</li><li><code>&#39;a&#39;</code>：追加模式。如果文件不存在则创建文件，如果文件存在则在文件**<u>末尾追加内容</u>**。</li><li><code>&#39;b&#39;</code>：二进制模式。可以与其他模式结合使用（如 <code>&#39;rb&#39;</code> 表示二进制读）。</li><li><code>&#39;t&#39;</code>：文本模式。默认模式。</li><li><code>&#39;+&#39;</code>：读写模式。可以与其他模式结合使用（如 <code>&#39;r+&#39;</code> 表示读写模式）。</li></ul></li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file: </span><br><span class="line">        content = file.read() </span><br><span class="line">        <span class="built_in">print</span>(content) </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件不存在！&#x27;</span>) </span><br><span class="line"><span class="keyword">except</span> PermissionError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无权限访问文件！&#x27;</span>) </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发生未知错误：<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在文件读写过程中，可能会出现异常，例如文件不存在或权限错误。</p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串常用操作</title>
      <link href="/2024/11/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/11/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Python字符串常用操作"><a href="#Python字符串常用操作" class="headerlink" title="Python字符串常用操作"></a>Python字符串常用操作</h1><h1 id="一、字符串的切片"><a href="#一、字符串的切片" class="headerlink" title="一、字符串的切片"></a>一、字符串的切片</h1><h3 id="1-1、通过下标及下标范围取值"><a href="#1-1、通过下标及下标范围取值" class="headerlink" title="1.1、通过下标及下标范围取值"></a>1.1、通过下标及下标范围取值</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">&#x27;myNameIsTaichi&#x27;</span></span><br><span class="line">value1 = my_str[<span class="number">2</span>]  <span class="comment"># 正向 N</span></span><br><span class="line">value2 = my_str[-<span class="number">5</span>]  <span class="comment"># 反向 从 -1 开始 a</span></span><br></pre></td></tr></table></figure><p>字符串分割，语法：string[end: step]</p><ul><li>start：头下标，以0开始</li><li>end：尾下表，以-1开始</li><li>step 步长</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;abc-123-如果我是DJ你会爱我吗.mp4&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">7</span>])           <span class="comment">#默认步长是1，可以不写</span></span><br><span class="line"><span class="comment"># 结果：abc-123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">9</span>])           <span class="comment">#负数是从右往左截取</span></span><br><span class="line"><span class="comment"># 结果：abc-123-如果我是DJ</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">8</span>:])      <span class="comment">#不写右边就是一直到结尾</span></span><br><span class="line"><span class="comment"># 结果：如果我是DJ你会爱我吗.mp4</span></span><br></pre></td></tr></table></figure><h3 id="1-2、index方法：查找特定字符串的下标索引值"><a href="#1-2、index方法：查找特定字符串的下标索引值" class="headerlink" title="1.2、index方法：查找特定字符串的下标索引值"></a>1.2、index方法：查找特定字符串的下标索引值</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">&quot;%pokes$@163&amp;.com*&quot;</span></span><br><span class="line">value3 = my_str.index(<span class="string">&quot;pokes&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(value3)   <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果是“1”</span></span><br></pre></td></tr></table></figure><p>注意：1是”pokes”起始下标，即p所在的下标位置</p><h3 id="1-3、replace方法：字符串替换"><a href="#1-3、replace方法：字符串替换" class="headerlink" title="1.3、replace方法：字符串替换"></a>1.3、replace方法：字符串替换</h3><p>语法：<code>string.replace(“被替换的内容”，“替换后的内容”[，次数])</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str2= <span class="string">&quot;ithahahaaa and ithehehehe&quot;</span></span><br><span class="line">new_str2 = str2.replace(<span class="string">&quot;it&quot;</span>,<span class="string">&quot;pokes&quot;</span>)    <span class="comment">#将it替换成pokes</span></span><br><span class="line"><span class="built_in">print</span>(new_str2)        </span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：pokeshahahaaa and pokeshehehehe</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;212、Python用replace()函数删除制定  符号&quot;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;、&#x27;</span>, <span class="string">&#x27;&#x27;</span>)      <span class="comment">#可以这样理解，把顿号替换为空</span></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="1-4、split方法：分割字符串"><a href="#1-4、split方法：分割字符串" class="headerlink" title="1.4、split方法：分割字符串"></a>1.4、split方法：分割字符串</h3><p>语法：<code>string.split(‘分隔符’,次数)</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;abc-123-如果我是DJ你会爱我吗.mp4&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.split(<span class="string">&#x27;-&#x27;</span>)          <span class="comment">#次数不写，则默认为最大次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">结果：[<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;如果我是DJ你会爱我吗.mp4&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="1-5、strip方法：去除字符串两端的空格和回车符"><a href="#1-5、strip方法：去除字符串两端的空格和回车符" class="headerlink" title="1.5、strip方法：去除字符串两端的空格和回车符"></a>1.5、strip方法：去除字符串两端的空格和回车符</h3><p><code>strip</code> 两头 ，<code>lstrip</code>头（left）， <code>rstrip</code>尾（right）。</p><p>去掉两头的空格，注意不包含中间的空格</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str5= <span class="string">&quot;     heihei hehe haha    &quot;</span></span><br><span class="line">new_str5=str5.strip()   <span class="comment">#不传参数，默认去除两端的空格和回车符</span></span><br><span class="line"><span class="built_in">print</span>(new_str5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续的过滤字符</span></span><br><span class="line">s = <span class="string">&quot;   %pokes$@163&amp;.com*   &quot;</span></span><br><span class="line"><span class="comment"># 去除两边空格, 去除左边$ 去除右边 *</span></span><br><span class="line">ss = s.strip().strip(<span class="string">&quot;%&quot;</span>).lstrip(<span class="string">&#x27;$&#x27;</span>).rstrip().rstrip(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ss)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;  &lt;0.01%  &#x27;</span></span><br><span class="line">ss = s.strip().lstrip(<span class="string">&#x27;&lt;&#x27;</span>).rstrip(<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ss)  <span class="comment"># 0.01</span></span><br></pre></td></tr></table></figure><h3 id="1-6、count方法，统计字符串中某字符出现的次数"><a href="#1-6、count方法，统计字符串中某字符出现的次数" class="headerlink" title="1.6、count方法，统计字符串中某字符出现的次数"></a>1.6、count方法，统计字符串中某字符出现的次数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str6= <span class="string">&quot;heihei hehe haha&quot;</span></span><br><span class="line">cishu = str6.count(<span class="string">&quot;he&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cishu)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：4</span></span><br></pre></td></tr></table></figure><h3 id="1-7、len统计字符串的长度"><a href="#1-7、len统计字符串的长度" class="headerlink" title="1.7、len统计字符串的长度"></a>1.7、len统计字符串的长度</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str6= <span class="string">&quot;heihei hehe haha&quot;</span></span><br><span class="line">num=<span class="built_in">len</span>(str6)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="1-8、find字符串查找"><a href="#1-8、find字符串查找" class="headerlink" title="1.8、find字符串查找"></a>1.8、find字符串查找</h3><p>语法：<code>string.find(&#39;要查找的字&#39;, [开始位置, 结束位置])</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;abc-123-如果我是DJ你会爱我吗.mp4&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.find(<span class="string">&#x27;DJ&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">结果:<span class="number">12</span>         <span class="comment">#返回的是需要查找的字符串的下标,不包含则返回-1</span></span><br></pre></td></tr></table></figure><p>1.9、join() 列表转字符串</p><h2 id="二、字符串判断"><a href="#二、字符串判断" class="headerlink" title="二、字符串判断"></a>二、字符串判断</h2><h3 id="2-1、判断字符串是否出现过"><a href="#2-1、判断字符串是否出现过" class="headerlink" title="2.1、判断字符串是否出现过"></a>2.1、判断字符串是否出现过</h3><p>查询字母k是否出现，如果出现结果返回索引，没出现则返回-1</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.find(<span class="string">&quot;k&quot;</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pooes&quot;</span>.find(<span class="string">&quot;k&quot;</span>))  <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k&quot;</span> <span class="keyword">in</span> <span class="string">&quot;pooes&quot;</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k&quot;</span> <span class="keyword">in</span> <span class="string">&quot;pokes&quot;</span>)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-、判断是否以xxx开头"><a href="#2-2-、判断是否以xxx开头" class="headerlink" title="2.2 、判断是否以xxx开头"></a>2.2 、判断是否以xxx开头</h3><p>判断是否以xxx开头，返回布尔值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否以k开头，返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.startswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;kpokes&quot;</span>.startswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-3、判断是否以xxx结尾"><a href="#2-3、判断是否以xxx结尾" class="headerlink" title="2.3、判断是否以xxx结尾"></a>2.3、判断是否以xxx结尾</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否以k结尾，返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.endswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;kpokesk&quot;</span>.endswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-4、判断字符串是否只包含数字"><a href="#2-4、判断字符串是否只包含数字" class="headerlink" title="2.4、判断字符串是否只包含数字"></a>2.4、判断字符串是否只包含数字</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str_1 = <span class="string">&quot;123&quot;</span></span><br><span class="line">str_2 = <span class="string">&quot;Abc&quot;</span></span><br><span class="line">str_3 = <span class="string">&quot;123Abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_1.isdigit())   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(str_2.isdigit())   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str_3.isdigit())   <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="2-5、判断字符串中包含特殊符号"><a href="#2-5、判断字符串中包含特殊符号" class="headerlink" title="2.5、判断字符串中包含特殊符号"></a>2.5、判断字符串中包含特殊符号</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">input_psd = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串&quot;</span>)</span><br><span class="line"><span class="comment"># 判断是否有特殊字符</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;~!@#$%^&amp;*()_+-*/&lt;&gt;,.[]\/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> input_psd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您的输入包含特殊字符&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者导入 python 内置模块 re</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">input_psd = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串&quot;</span>)</span><br><span class="line">test_str = re.search(<span class="string">r&quot;\W&quot;</span>,input_psd)</span><br><span class="line"><span class="keyword">if</span> test_str==<span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有没有真没有特殊字符&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该文本包含特殊字符&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6、连续判断过滤字符串"><a href="#2-6、连续判断过滤字符串" class="headerlink" title="2.6、连续判断过滤字符串"></a>2.6、连续判断过滤字符串</h3><p>有时候我们需要连续的判断</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;download_zh.png&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;actjpgs&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他不能写成：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;download_zh.png&quot;</span> <span class="keyword">and</span> <span class="string">&quot;actjpgs&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以写成这样</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;download_zh.png&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&quot;actjpgs&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是如果过滤的字符串有N多个，这样就很痛苦。那么你可以：</p><p>将需要过滤掉的字符串写进一个list</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filter_strings = [<span class="string">&quot;download_zh.png&quot;</span>, <span class="string">&quot;actjpgs&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(s <span class="keyword">in</span> item <span class="keyword">for</span> s <span class="keyword">in</span> filter_strings):</span><br><span class="line">    <span class="comment"># 如果item不包含列表中的任何一个字符串，‌则执行这里的代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;过滤条件满足&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7字符串字母大小写转换和判断"><a href="#2-7字符串字母大小写转换和判断" class="headerlink" title="2.7字符串字母大小写转换和判断"></a>2.7字符串字母大小写转换和判断</h3><ul><li>capitalize，将字符串得第一个字符转换成大写</li><li>title，每个单词得首字母大写</li><li>istitle, 判断每个单词得首字母是否大写</li><li>upper 全部转换成大写</li><li>lower 全部转换成小写</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&#x27;zhaorui is a beautiful girl!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># capitalize</span></span><br><span class="line"></span><br><span class="line">msg = message.capitalize()   <span class="comment">#将字符串得第一个字符转换成大写</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">msg = message.title()      <span class="comment">#每个单词得首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># istitle</span></span><br><span class="line">cmd = msg.istitle()           <span class="comment">#判断每个单词得首字母是否大写</span></span><br><span class="line"><span class="built_in">print</span>(cmd)</span><br><span class="line"></span><br><span class="line">spokes = message.istitle()    <span class="comment">#判断每个单词得首字母是否大写</span></span><br><span class="line"><span class="built_in">print</span>(spokes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># upper 全部转换成大写</span></span><br><span class="line"></span><br><span class="line">msg = message.upper()</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lower 全部转换成小写</span></span><br><span class="line">msg = message.lower()</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(msg))          <span class="comment">#计算字符串长度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、字符串比较"><a href="#三、字符串比较" class="headerlink" title="三、字符串比较"></a>三、字符串比较</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s1=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">s2=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 内容比较</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2)</span><br><span class="line"><span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)</span><br><span class="line"></span><br><span class="line">pokes1 = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)</span><br><span class="line">pokes2 = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(pokes1 == pokes2)</span><br></pre></td></tr></table></figure><h2 id="四、过滤掉某个字符"><a href="#四、过滤掉某个字符" class="headerlink" title="四、过滤掉某个字符"></a>四、过滤掉某个字符</h2><h3 id="过滤掉单个字符"><a href="#过滤掉单个字符" class="headerlink" title="过滤掉单个字符"></a>过滤掉单个字符</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;212、Python用replace()函数删除制定  符号&quot;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;、&#x27;</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#过滤掉顿号</span></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="过滤掉多个符号"><a href="#过滤掉多个符号" class="headerlink" title="过滤掉多个符号"></a>过滤掉多个符号</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zifu</span>(<span class="params"><span class="built_in">str</span>, x, y, z</span>):</span><br><span class="line">    strin = <span class="built_in">str</span>.replace(x, <span class="string">&#x27;&#x27;</span>) .replace(y, <span class="string">&#x27;&#x27;</span>).replace(z, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(strin)</span><br><span class="line"></span><br><span class="line">zifu(<span class="string">&quot;pokes，@163.com,kkkkk&quot;</span>, <span class="string">&quot;，&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;163&quot;</span>)</span><br><span class="line">```·</span><br><span class="line"><span class="comment"># 五、字母大小转换</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;POKES&quot;</span>.lower())  <span class="comment">#pokes,转换成小写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.upper())  <span class="comment">#POKES,转换成小写</span></span><br></pre></td></tr></table></figure><h3 id="判断字符串"><a href="#判断字符串" class="headerlink" title="判断字符串"></a>判断字符串</h3><ul><li><code>isalpha()</code> 判断是否为 字母 <code>str.encode().isalpha()</code></li><li><code>str.isdigit()</code> 判断是否为数字</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.isalpha())  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;runoob菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.isalpha())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is string example....wow!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.isalpha()) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;中国&quot;</span></span><br><span class="line"><span class="built_in">print</span> s.encode( <span class="string">&#x27;UTF-8&#x27;</span> ).isalpha()  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字符串中字母、数字、其他字符的数量</span></span><br><span class="line">s = <span class="string">&#x27;中abCD123$%文&#x27;</span></span><br><span class="line">zm,sz,qt = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        zm += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        sz += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        qt += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字母：%d，数字：%d，其他：%d&#x27;</span> % (zm,sz,qt))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字符串中字母、数字、其他字符的数量</span></span><br><span class="line">s = <span class="string">&#x27;中abCD123$%文&#x27;</span></span><br><span class="line">zm,sz,qt = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i.encode().isalpha():</span><br><span class="line">        zm += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isdigit():</span><br><span class="line">        sz += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        qt += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(zm,sz,qt)</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul><li>性别：<ul><li><code>male =&gt; 男</code></li><li><code>female =&gt; 女</code></li></ul></li><li>午餐种类改为大写</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">self, path: <span class="built_in">str</span>, newpath</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># r 读取</span></span><br><span class="line">            rows = f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(newpath, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> w:  <span class="comment"># w 覆盖</span></span><br><span class="line">                w.write(rows[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> rows[<span class="number">1</span>:]:</span><br><span class="line">                <span class="comment"># 通过, 分解成列表</span></span><br><span class="line">                cols = i.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> cols[<span class="number">1</span>] == <span class="string">&#x27;male&#x27;</span>:</span><br><span class="line">                    cols[<span class="number">1</span>] = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cols[<span class="number">1</span>] = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">                cols[<span class="number">3</span>] = cols[<span class="number">3</span>].upper()</span><br><span class="line">                <span class="built_in">print</span>(cols)  <span class="comment"># 处理完成</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;newText.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> n:  <span class="comment"># a 不覆盖</span></span><br><span class="line">                    n.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    n.write(<span class="string">&#x27;,&#x27;</span>.join(cols))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">solu.fn(<span class="string">&#x27;oldText.txt&#x27;</span>, <span class="string">&#x27;newText.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>oldText</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,性别,年龄,午餐种类</span><br><span class="line">小龙,male,25,c</span><br><span class="line">小虎,male,27,a</span><br><span class="line">阿红,female,25,a</span><br><span class="line">阿岚,female,23,c</span><br><span class="line">阿月,female,25,a</span><br></pre></td></tr></table></figure><ul><li>newText</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,性别,年龄,午餐种类</span><br><span class="line">小龙,男,25,C</span><br><span class="line">小虎,男,27,A</span><br><span class="line">阿红,女,25,A</span><br><span class="line">阿岚,女,23,C</span><br><span class="line">阿月,女,25,A</span><br></pre></td></tr></table></figure><p>去除前后空格 <code>strip</code></p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog Test</title>
      <link href="/2024/11/26/hexo-blog/"/>
      <url>/2024/11/26/hexo-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="炸弹"><a href="#炸弹" class="headerlink" title="炸弹"></a>炸弹</h1><p><img src="/assets/image/bg1.jpg" alt="test"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 導航設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="comment"># 導航欄 Logo 圖片</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="string">/assets/image/logo.png</span></span><br><span class="line">  <span class="comment"># 是否顯示標題</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否固定導航欄</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">列表||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/photo/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 代碼塊設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">code_blocks:</span></span><br><span class="line">  <span class="comment"># 代碼塊主題: darker / pale night / light / ocean / false</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">darker</span></span><br><span class="line">  <span class="comment"># 是否使用 Mac 風格</span></span><br><span class="line">  <span class="attr">macStyle:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 代碼塊高度限制（單位: px）</span></span><br><span class="line">  <span class="attr">height_limit:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否自動換行</span></span><br><span class="line">  <span class="attr">word_wrap:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 工具欄</span></span><br><span class="line">  <span class="comment"># 是否顯示複製按鈕</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否顯示語言標籤</span></span><br><span class="line">  <span class="attr">language:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># true: 收縮代碼塊 | false: 展開代碼塊 | none: 展開代碼塊並隱藏按鈕</span></span><br><span class="line">  <span class="attr">shrink:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否顯示全屏顯示代碼塊按鈕</span></span><br><span class="line">  <span class="attr">fullpage:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交媒體鏈接</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#   icon: 鏈接 || 描述 || 顏色</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 圖片設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網站的 favicon 圖標</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">assets/image/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頭像設置</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># 頭像圖片鏈接</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">assets/image/avatar.jpg</span></span><br><span class="line">  <span class="comment"># 是否啟用頭像效果</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用所有橫幅圖片</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果頁面未設置橫幅，則顯示默認的橫幅圖片</span></span><br><span class="line"><span class="attr">default_top_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主頁的橫幅圖片</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/assets/image/index-background.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 歸檔頁的橫幅圖片</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">/assets/image/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 是標籤頁（單個標籤），不是標籤頁面（所有標籤）</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 標籤頁的橫幅圖片，可以為每個標籤設置橫幅圖片</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#  - 標籤名: 圖片鏈接</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 是分類頁（單個分類），不是分類頁面（所有分類）</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分類頁的橫幅圖片，可以為每個分類設置橫幅圖片</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#  - 分類名: 圖片鏈接</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頁腳的背景圖片</span></span><br><span class="line"><span class="attr">footer_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網站背景</span></span><br><span class="line"><span class="comment"># 可以設置為顏色或圖片</span></span><br><span class="line"><span class="comment"># 圖片格式: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封面設置</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否禁用封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 主頁封面的位置</span></span><br><span class="line">  <span class="comment"># 選擇: left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 當未設置封面時，顯示默認封面</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="comment"># - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替換損壞的圖片</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="comment"># 友鏈頁面的錯誤圖片</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">/img/friend_404.gif</span></span><br><span class="line">  <span class="comment"># 文章頁面的錯誤圖片</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 簡單的 404 頁面</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="comment"># 是否啟用 404 頁面</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 404 頁面的副標題</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;页面未找到&#x27;</span></span><br><span class="line">  <span class="comment"># 404 頁面的卡片背景圖片</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章元數據設置</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="comment"># 主頁頁面</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="comment"># 日期類型: created / updated / both</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span></span><br><span class="line">    <span class="comment"># 日期格式: date / relative</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span></span><br><span class="line">    <span class="comment"># 是否顯示分類</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示標籤</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否顯示文字標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章頁面</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="comment"># 元數據位置: left / center</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="comment"># 日期類型: created / updated / both</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span></span><br><span class="line">    <span class="comment"># 日期格式: date / relative</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span></span><br><span class="line">    <span class="comment"># 是否顯示分類</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示標籤</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示文字標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 首頁設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首頁頭圖的設置</span></span><br><span class="line"><span class="comment"># 默認: 頭圖全屏，站點信息在中間</span></span><br><span class="line"><span class="comment"># 站點信息的位置，例如: 300px/300em/300rem/10%</span></span><br><span class="line"><span class="attr">index_site_info_top:</span></span><br><span class="line"><span class="comment"># 頭圖的高度，例如: 300px/300em/300rem</span></span><br><span class="line"><span class="attr">index_top_img_height:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (开启打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體）</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體）</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體）</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體）</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果有英文逗号&#x27; , &#x27;,请使用转义字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文双引号&#x27; &quot; &#x27;,请使用转义字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 开头不允許转义字元，如需要，请把整個句子用双引号包住</span></span><br><span class="line">  <span class="comment"># 如果关闭打字效果，subtitle只会现示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">你在抱怨什么呢</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">为明天到来的事，说人生像是没有意义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">没有选择会是唯一的路</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">这不是你自己的问题，人终归要好好去生活</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首頁文章佈局</span></span><br><span class="line"><span class="comment"># 1: 行佈局</span></span><br><span class="line"><span class="comment"># 2: 列布局</span></span><br><span class="line"><span class="attr">index_layout:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在首頁顯示文章簡介</span></span><br><span class="line"><span class="comment"># 1: 描述</span></span><br><span class="line"><span class="comment"># 2: 兩者（如果存在描述，將顯示描述，否則顯示自動摘要）</span></span><br><span class="line"><span class="comment"># 3: 自動摘要（默認）</span></span><br><span class="line"><span class="comment"># false: 不顯示文章簡介</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 如果設置 method 為 2 或 3，需要配置長度</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="comment"># 是否在文章中顯示目錄</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否在頁面中顯示目錄</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否顯示目錄編號</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否默認展開目錄</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否使用簡潔風格（僅適用於文章）</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否顯示滾動百分比</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="comment"># 是否啟用版權聲明</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否進行文章 URL 解碼</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 作者鏈接</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="comment"># 許可證類型</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="comment"># 許可證鏈接</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 贊助/打賞</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment"># 是否啟用打賞</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 打賞案例文本</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/assets/image/reward-wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/assets/image/reward-alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章編輯</span></span><br><span class="line"><span class="comment"># 輕鬆在線瀏覽和編輯博客源代碼</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="comment"># 是否啟用在線編輯</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># url: https://github.com/用户名/倉庫名/edit/分支名/子目錄名/</span></span><br><span class="line">  <span class="comment"># 例如: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span></span><br><span class="line">  <span class="attr">url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相關文章</span></span><br><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="comment"># 是否顯示相關文章</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 顯示的文章數量</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="comment"># 選擇: created / updated</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 選擇: 1 / 2 / false</span></span><br><span class="line"><span class="comment"># 1: “下一篇文章”將鏈接到舊文章</span></span><br><span class="line"><span class="comment"># 2: “下一篇文章”將鏈接到新文章</span></span><br><span class="line"><span class="comment"># false: 禁用分頁</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 顯示文章過期通知</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="comment"># 是否啟用過期通知</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 樣式: simple / flat</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 多少天后顯示通知</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span></span><br><span class="line">  <span class="comment"># 位置: top / bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">已經過了</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">天自上次更新，文章內容可能已過時。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 頁腳設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="comment"># 是否啟用所有者顯示</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 網站創建年份</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2019</span></span><br><span class="line">  <span class="comment"># 自定義文本</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="comment"># 主題和框架的版權聲明</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 側邊欄設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="comment"># 是否啟用側邊欄</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否默認隱藏側邊欄</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在右下角顯示隱藏側邊欄的按鈕</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 移動設備上是否啟用側邊欄</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 側邊欄位置：left / right</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="comment"># 歸檔頁面是否顯示側邊欄</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 標籤頁面是否顯示側邊欄</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 分類頁面是否顯示側邊欄</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="comment"># 是否顯示作者信息卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 作者描述</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="comment"># 是否顯示按鈕</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 按鈕圖標</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="comment"># 按鈕文本</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="comment"># 按鈕鏈接</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/taichiyly</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="comment"># 是否顯示公告卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 公告內容</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="comment"># 是否顯示最近文章卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 顯示文章數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 排序方式：date / updated</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_newest_comments:</span></span><br><span class="line">    <span class="comment"># 是否顯示最新評論卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">    <span class="comment"># 顯示評論數量</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">    <span class="comment"># 單位：分鐘，保存數據到 localStorage</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># 是否顯示頭像</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="comment"># 是否顯示分類卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 顯示分類數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span></span><br><span class="line">    <span class="comment"># 選擇：none / true / false</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="comment"># 是否顯示標籤卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 顯示標籤數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span></span><br><span class="line">    <span class="comment"># 是否啟用顏色</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 標籤排序方式：random/name/length</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span></span><br><span class="line">    <span class="comment"># 排序順序：1 表示升序，-1 表示降序</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="comment"># 是否顯示歸檔卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 歸檔類型：monthly / yearly</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span></span><br><span class="line">    <span class="comment"># 日期格式，例如：YYYY年MM月</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span></span><br><span class="line">    <span class="comment"># 排序順序：1 表示升序，-1 表示降序</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">    <span class="comment"># 顯示歸檔數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_post_series:</span></span><br><span class="line">    <span class="comment"># 是否顯示系列文章卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 標題顯示系列名稱</span></span><br><span class="line">    <span class="attr">series_title:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 排序方式：title 或 date</span></span><br><span class="line">    <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span></span><br><span class="line">    <span class="comment"># 排序順序：1 表示升序，-1 表示降序</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="comment"># 是否顯示網站信息卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示文章數量</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示最後推送日期</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">    <span class="comment"># 發佈日期與當前日期的時間差</span></span><br><span class="line">    <span class="comment"># 格式：Month/Day/Year Time 或 Year/Month/Day Time</span></span><br><span class="line">    <span class="comment"># 如果不啟用此功能，請留空</span></span><br><span class="line">    <span class="attr">runtime_date:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 右下角按鈕設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右下角按鈕與底部的距離（默認單位：px）</span></span><br><span class="line"><span class="attr">rightside_bottom:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 閲讀模式</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暗黑模式設置</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="comment"># 是否啟用暗黑模式</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 切換暗黑/明亮模式的按鈕</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否自動切換暗黑/明亮模式</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  跟隨系統設置，如果系統不支持暗黑模式，則在晚上 6 點到早上 6 點之間切換暗黑模式</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  在晚上 6 點到早上 6 點之間切換暗黑模式</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false  不自動切換</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 設置明亮模式時間，值在 0 到 24 之間。如果未設置，默認值為 6 和 18</span></span><br><span class="line">  <span class="attr">start:</span></span><br><span class="line">  <span class="attr">end:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在返回頂部按鈕中顯示滾動百分比</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要修改以下設置，除非你知道它們的工作原理</span></span><br><span class="line"><span class="comment"># 選擇：readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># 不要重複相同的值</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="comment"># 是否啟用右側項目順序</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 隱藏的默認項目：readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">hide:</span></span><br><span class="line">  <span class="comment"># 顯示的默認項目：toc,chat,comment</span></span><br><span class="line">  <span class="attr">show:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 全局設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 錨點設置</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="comment"># 滾動時，URL 將根據標題 ID 更新</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 點擊標題滾動並更新錨點</span></span><br><span class="line">  <span class="attr">click_to_scroll:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圖片標題</span></span><br><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製設置</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="comment"># 是否啟用複製功能</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在複製的內容後添加版權信息</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 當複製字符數超過 limit_count 時添加版權信息</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安裝 hexo-wordcount 插件</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="comment"># 是否啟用字數統計</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在文章元信息中顯示字數統計</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在文章元信息中顯示閲讀時間</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在側邊欄網站信息中顯示總字數</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不蒜子 PV / UV 統計</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="comment"># 網站 UV 統計</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 網站 PV 統計</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 頁面 PV 統計</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 數學公式設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 關於 per_page</span></span><br><span class="line"><span class="comment"># 如果設置為 true，將在每個頁面加載 mathjax/katex 腳本</span></span><br><span class="line"><span class="comment"># 如果設置為 false，將根據你的設置加載 mathjax/katex 腳本（在頁面的 front-matter 中添加 &#x27;mathjax: true&#x27; 或者 &#x27;katex: true&#x27;）</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># 選擇：mathjax, katex</span></span><br><span class="line">  <span class="comment"># 如果不需要數學公式，保持為空</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="comment"># 啟用上下文菜單</span></span><br><span class="line">    <span class="attr">enableMenu:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 選擇：all / ams / none，這控制是否對公式編號以及如何編號</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="comment"># 啟用複製 KaTeX 公式</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 搜索設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="comment"># 選擇：algolia_search / local_search / docsearch</span></span><br><span class="line">  <span class="comment"># 如果不需要搜索功能，保持為空</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br><span class="line">  <span class="attr">placeholder:</span> </span><br><span class="line">  <span class="comment"># 本地搜索</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="comment"># 頁面加載時預加載搜索數據</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 每篇文章顯示的頂部 n 個搜索結果，設置為 -1 顯示所有結果</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 分享系統</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">share:</span></span><br><span class="line">  <span class="comment"># 選擇：sharejs / addtoany</span></span><br><span class="line">  <span class="comment"># 如果不需要分享功能，保持為空</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">sharejs</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share.js</span></span><br><span class="line">  <span class="comment"># https://github.com/overtrue/share.js</span></span><br><span class="line">  <span class="attr">sharejs:</span></span><br><span class="line">    <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># AddToAny</span></span><br><span class="line">  <span class="comment"># https://www.addtoany.com/</span></span><br><span class="line">  <span class="attr">addtoany:</span></span><br><span class="line">    <span class="attr">item:</span> <span class="string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 評論系統</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># 最多兩個評論系統，第一個將作為默認顯示</span></span><br><span class="line">  <span class="comment"># 如果不需要評論功能，保持為空</span></span><br><span class="line">  <span class="comment"># 選擇：Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="comment"># 兩個評論系統的格式：Disqus,Waline</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">  <span class="comment"># 按鈕旁邊顯示評論系統名稱</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 懶加載：評論系統將在評論元素進入瀏覽器視口時加載</span></span><br><span class="line">  <span class="comment"># 如果設置為 true，評論計數將無效</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在文章頂部圖片中顯示評論計數</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在主頁顯示評論計數</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://disqus.com/</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="comment"># Disqus 的 shortname</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="comment"># 最新評論小部件的 API 密鑰</span></span><br><span class="line">  <span class="attr">apikey:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Disqus API 渲染評論的替代方案</span></span><br><span class="line"><span class="comment"># 官方文檔：https://github.com/SukkaW/DisqusJS</span></span><br><span class="line"><span class="attr">disqusjs:</span></span><br><span class="line">  <span class="comment"># Disqus 的 shortname</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="comment"># API 密鑰</span></span><br><span class="line">  <span class="attr">apikey:</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Livere 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://www.livere.com/</span></span><br><span class="line"><span class="attr">livere:</span></span><br><span class="line">  <span class="comment"># Livere 的用户 ID</span></span><br><span class="line">  <span class="attr">uid:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="comment"># GitHub 應用的客户端 ID</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="comment"># GitHub 應用的客户端密鑰</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br><span class="line">  <span class="comment"># 存儲評論的倉庫名稱</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="comment"># 倉庫擁有者的用户名</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="comment"># 管理員用户名列表</span></span><br><span class="line">  <span class="attr">admin:</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="comment"># LeanCloud 應用的 appId</span></span><br><span class="line">  <span class="attr">appId:</span></span><br><span class="line">  <span class="comment"># LeanCloud 應用的 appKey</span></span><br><span class="line">  <span class="attr">appKey:</span></span><br><span class="line">  <span class="comment"># 評論者頭像樣式</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span></span><br><span class="line">  <span class="comment"># 該配置適用於國內自定義域名用户，海外版本將自動檢測（無需手動填寫）</span></span><br><span class="line">  <span class="attr">serverURLs:</span></span><br><span class="line">  <span class="comment"># 評論框背景圖片</span></span><br><span class="line">  <span class="attr">bg:</span></span><br><span class="line">  <span class="comment"># 使用 Valine 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Waline 評論插件配置，一個簡單的評論系統，基於 Valine 開發，支持後端</span></span><br><span class="line"><span class="comment"># 官方文檔：https://waline.js.org/</span></span><br><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="comment"># 服務器 URL</span></span><br><span class="line">  <span class="attr">serverURL:</span></span><br><span class="line">  <span class="comment"># 評論框背景圖片</span></span><br><span class="line">  <span class="attr">bg:</span></span><br><span class="line">  <span class="comment"># 使用 Waline 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">pageview:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utterances 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://utteranc.es/</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="comment"># 存儲評論的 GitHub 倉庫</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="comment"># 問題映射方式，可選值：pathname/url/title/og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># 淺色主題，可選值：github-light</span></span><br><span class="line">  <span class="attr">light_theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="comment"># 深色主題，可選值：photon-dark</span></span><br><span class="line">  <span class="attr">dark_theme:</span> <span class="string">photon-dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Facebook 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://developers.facebook.com/docs/plugins/comments/</span></span><br><span class="line"><span class="attr">facebook_comments:</span></span><br><span class="line">  <span class="comment"># 應用 ID</span></span><br><span class="line">  <span class="attr">app_id:</span></span><br><span class="line">  <span class="comment"># 用户 ID，可選</span></span><br><span class="line">  <span class="attr">user_id:</span></span><br><span class="line">  <span class="comment"># 每頁顯示評論數</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br><span class="line">  <span class="comment"># 評論排序方式，可選值：social / time / reverse_time</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">social</span></span><br><span class="line">  <span class="comment"># 語言設置</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh_TW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Twikoo 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="comment"># 環境 ID</span></span><br><span class="line">  <span class="attr">envId:</span></span><br><span class="line">  <span class="comment"># 區域</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="comment"># 使用 Twikoo 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Giscus 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://giscus.app/</span></span><br><span class="line"><span class="attr">giscus:</span></span><br><span class="line">  <span class="comment"># 倉庫地址</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="comment"># 倉庫 ID</span></span><br><span class="line">  <span class="attr">repo_id:</span></span><br><span class="line">  <span class="comment"># 分類 ID</span></span><br><span class="line">  <span class="attr">category_id:</span></span><br><span class="line">  <span class="comment"># 主題配置，light 為淺色主題，dark 為深色主題</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remark42 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://remark42.com/docs/configuration/frontend/</span></span><br><span class="line"><span class="attr">remark42:</span></span><br><span class="line">  <span class="comment"># 服務器地址</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">  <span class="comment"># 站點 ID</span></span><br><span class="line">  <span class="attr">siteId:</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Artalk 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://artalk.js.org/guide/frontend/config.html</span></span><br><span class="line"><span class="attr">artalk:</span></span><br><span class="line">  <span class="comment"># 服務器地址</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 站點名</span></span><br><span class="line">  <span class="attr">site:</span></span><br><span class="line">  <span class="comment"># 使用 Artalk 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 聊天服務配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chat:</span></span><br><span class="line">  <span class="comment"># 聊天服務類型，可選值：chatra/tidio/crisp，如果不需要聊天功能則留空</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">  <span class="comment"># 推薦使用聊天按鈕，會在網站右下角創建一個按鈕，並隱藏原始按鈕</span></span><br><span class="line">  <span class="attr">rightside_button:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 原始聊天按鈕在向上滾動時顯示，向下滾動時隱藏</span></span><br><span class="line">  <span class="attr">button_hide_show:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra 聊天服務配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://chatra.io/</span></span><br><span class="line"><span class="attr">chatra:</span></span><br><span class="line">  <span class="comment"># Chatra 服務 ID</span></span><br><span class="line">  <span class="attr">id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tidio 聊天服務配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://www.tidio.com/</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="comment"># Tidio 公鑰</span></span><br><span class="line">  <span class="attr">public_key:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crisp 聊天服務配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://crisp.chat/en/</span></span><br><span class="line"><span class="attr">crisp:</span></span><br><span class="line">  <span class="comment"># Crisp 網站 ID</span></span><br><span class="line">  <span class="attr">website_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 分析服務配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度統計配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://tongji.baidu.com/web/welcome/login</span></span><br><span class="line"><span class="attr">baidu_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 谷歌分析配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://analytics.google.com/analytics/web/</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloudflare 分析配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://www.cloudflare.com/zh-tw/web-analytics/</span></span><br><span class="line"><span class="attr">cloudflare_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Clarity 分析配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://clarity.microsoft.com/</span></span><br><span class="line"><span class="attr">microsoft_clarity:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 廣告配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Adsense 廣告配置</span></span><br><span class="line"><span class="attr">google_adsense:</span></span><br><span class="line">  <span class="comment"># 是否啟用</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否自動投放廣告</span></span><br><span class="line">  <span class="attr">auto_ads:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 廣告腳本 URL</span></span><br><span class="line">  <span class="attr">js:</span> <span class="string">https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js</span></span><br><span class="line">  <span class="comment"># 客户 ID</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment"># 是否啟用頁面級廣告</span></span><br><span class="line">  <span class="attr">enable_page_level_ads:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手動插入廣告配置，如果不需要廣告則留空</span></span><br><span class="line"><span class="attr">ad:</span></span><br><span class="line">  <span class="comment"># 在首頁每三個帖子後插入廣告</span></span><br><span class="line">  <span class="attr">index:</span></span><br><span class="line">  <span class="comment"># 在側邊欄插入廣告</span></span><br><span class="line">  <span class="attr">aside:</span></span><br><span class="line">  <span class="comment"># 在文章分頁前插入廣告</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 站點驗證配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">site_verification:</span></span><br><span class="line">  <span class="comment"># 示例：</span></span><br><span class="line">  <span class="comment"># - name: google-site-verification</span></span><br><span class="line">  <span class="comment">#   content: xxxxxx</span></span><br><span class="line">  <span class="comment"># - name: baidu-site-verification</span></span><br><span class="line">  <span class="comment">#   content: xxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 美化 / 效果</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主題顏色自定義</span></span><br><span class="line"><span class="comment"># 注意：顏色值必須用雙引號，如 &quot;#000&quot;，否則可能會導致錯誤！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主題顏色配置</span></span><br><span class="line"><span class="comment"># theme_color:</span></span><br><span class="line"><span class="comment">#   是否啟用主題顏色</span></span><br><span class="line"><span class="comment">#   enable: true</span></span><br><span class="line"><span class="comment">#   主顏色</span></span><br><span class="line"><span class="comment">#   main: &quot;#49B1F5&quot;</span></span><br><span class="line"><span class="comment">#   分頁器顏色</span></span><br><span class="line"><span class="comment">#   paginator: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   按鈕懸停顏色</span></span><br><span class="line"><span class="comment">#   button_hover: &quot;#FF7242&quot;</span></span><br><span class="line"><span class="comment">#   文本選擇顏色</span></span><br><span class="line"><span class="comment">#   text_selection: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   鏈接顏色</span></span><br><span class="line"><span class="comment">#   link_color: &quot;#99a9bf&quot;</span></span><br><span class="line"><span class="comment">#   元數據顏色</span></span><br><span class="line"><span class="comment">#   meta_color: &quot;#858585&quot;</span></span><br><span class="line"><span class="comment">#   水平線顏色</span></span><br><span class="line"><span class="comment">#   hr_color: &quot;#A4D8FA&quot;</span></span><br><span class="line"><span class="comment">#   代碼前景色</span></span><br><span class="line"><span class="comment">#   code_foreground: &quot;#F47466&quot;</span></span><br><span class="line"><span class="comment">#   代碼背景色</span></span><br><span class="line"><span class="comment">#   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line"><span class="comment">#   目錄顏色</span></span><br><span class="line"><span class="comment">#   toc_color: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   引用塊填充顏色</span></span><br><span class="line"><span class="comment">#   blockquote_padding_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   引用塊背景顏色</span></span><br><span class="line"><span class="comment">#   blockquote_background_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   滾動條顏色</span></span><br><span class="line"><span class="comment">#   scrollbar_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   淺色模式下的主題顏色</span></span><br><span class="line"><span class="comment">#   meta_theme_color_light: &quot;ffffff&quot;</span></span><br><span class="line"><span class="comment">#   深色模式下的主題顏色</span></span><br><span class="line"><span class="comment">#   meta_theme_color_dark: &quot;#0d0d0d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分類和標籤頁面的用户界面設置</span></span><br><span class="line"><span class="comment"># 選擇：index - 與主頁 UI 相同 / default - 與歸檔 UI 相同</span></span><br><span class="line"><span class="comment"># 留空或設置為 index</span></span><br><span class="line"><span class="attr">category_ui:</span></span><br><span class="line"><span class="attr">tag_ui:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉伸行使每行寬度相等</span></span><br><span class="line"><span class="attr">text_align_justify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 為頁眉和頁腳添加遮罩</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加載動畫</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="comment"># 是否啟用加載動畫</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 資源</span></span><br><span class="line">  <span class="comment"># 1. 全屏加載</span></span><br><span class="line">  <span class="comment"># 2. 進度條</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># pace 主題 (參見 https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頁面過渡效果</span></span><br><span class="line"><span class="attr">enter_transitions:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默認顯示模式 - light (默認) / dark</span></span><br><span class="line"><span class="attr">display_mode:</span> <span class="string">light</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 美化文章內容的配置</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="comment"># 是否啟用美化</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 指定美化的範圍 (site 或 post)</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="comment"># 指定標題前綴圖標，如 &#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span></span><br><span class="line">  <span class="comment"># 指定標題前綴圖標的顏色，如 &#x27;#F47466&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局字體設置</span></span><br><span class="line"><span class="comment"># 除非您知道它們的工作原理，否則不要修改以下設置</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br><span class="line">  <span class="attr">code-font-family:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網站標題和副標題的字體設置</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分隔符圖標的設置</span></span><br><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="comment"># 是否啟用分隔符圖標</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Font Awesome 圖標的 unicode 值，如 &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">  <span class="attr">icon-top:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打字機效果</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="comment"># 是否啟用打字機效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否啟用彩色效果</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否啟用震動效果</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景效果</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_ribbon</span></span><br><span class="line"><span class="comment"># 參見: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="comment"># 是否啟用 canvas_ribbon</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># ribbon 的大小</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="comment"># ribbon 的不透明度 (0 ~ 1)</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否點擊更改顏色</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fluttering Ribbon</span></span><br><span class="line"><span class="attr">canvas_fluttering_ribbon:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Fluttering Ribbon</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="comment"># 是否啟用 canvas_nest</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 線條顏色，默認: &#x27;0,0,0&#x27;; RGB 值: (R,G,B).(注意: 使用 &#x27;,&#x27; 分隔.)</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span></span><br><span class="line">  <span class="comment"># 線條的不透明度 (0~1)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">  <span class="comment"># 背景的 z-index 屬性</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 線條數量</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠標點擊效果: 煙花</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="comment"># 是否啟用煙花效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠標點擊效果: 心形符號</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="comment"># 是否啟用心形符號效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠標點擊效果: 文字</span></span><br><span class="line"><span class="attr">clickShowText:</span></span><br><span class="line">  <span class="comment"># 是否啟用文字效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="comment"># - I</span></span><br><span class="line">    <span class="comment"># - LOVE</span></span><br><span class="line">    <span class="comment"># - YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="comment"># 是否隨機顯示文字</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 燈箱設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 選擇: fancybox / medium_zoom  图片大图查看</span></span><br><span class="line"><span class="comment"># https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line"><span class="comment"># https://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="comment"># 如果不需要燈箱效果，請留空  </span></span><br><span class="line"><span class="attr">lightbox:</span> <span class="string">fancybox</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 標籤外掛設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系列</span></span><br><span class="line"><span class="attr">series:</span></span><br><span class="line">  <span class="comment"># 是否啟用系列</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 按標題或日期排序</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">&#x27;title&#x27;</span></span><br><span class="line">  <span class="comment"># 排序方式。1, asc 為升序; -1, desc 為降序</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 是否顯示編號</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCJS - ABC 音樂符號插件</span></span><br><span class="line"><span class="comment"># https://github.com/paulrosen/abcjs</span></span><br><span class="line"><span class="attr">abcjs:</span></span><br><span class="line">  <span class="comment"># 是否啟用 ABCJS</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否每頁啟用</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mermaid</span></span><br><span class="line"><span class="comment"># https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Mermaid</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 使用代碼塊編寫 Mermaid 圖表</span></span><br><span class="line">  <span class="attr">code_write:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 內置主題: default / forest / dark / neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chartjs</span></span><br><span class="line"><span class="comment"># 參見 https://www.chartjs.org/docs/latest/</span></span><br><span class="line"><span class="attr">chartjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 除非你了解它們的工作原理，否則不要修改。</span></span><br><span class="line">  <span class="comment"># 默認設置僅在未指定 MD 語法時使用。</span></span><br><span class="line">  <span class="comment"># 圖表的字體顏色</span></span><br><span class="line">  <span class="attr">fontColor:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">&quot;rgba(0, 0, 0, 0.8)&quot;</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">&quot;rgba(255, 255, 255, 0.8)&quot;</span></span><br><span class="line">  <span class="comment"># 圖表的邊框顏色</span></span><br><span class="line">  <span class="attr">borderColor:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">&quot;rgba(0, 0, 0, 0.1)&quot;</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">&quot;rgba(255, 255, 255, 0.2)&quot;</span></span><br><span class="line">  <span class="comment"># 雷達圖和極區圖的刻度標籤背景顏色</span></span><br><span class="line">  <span class="attr">scale_ticks_backdropColor:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">&quot;transparent&quot;</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">&quot;transparent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note - Bootstrap 提示框</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note 標籤樣式值:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout 舊警告樣式。默認。</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout 新 (v2-v3) 警告樣式。</span></span><br><span class="line">  <span class="comment">#  - flat      扁平提示框樣式，帶背景，如 Mozilla 或 StackOverflow。</span></span><br><span class="line">  <span class="comment">#  - disabled  禁用所有 Note 標籤的 CSS 樣式。</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 是否顯示圖標</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 邊框半徑</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 背景顏色偏移百分比 (modern: -12 | 12; flat: -18 | 6)。</span></span><br><span class="line">  <span class="comment"># 也應用於標籤變量。此選項可與禁用的 Note 標籤一起使用。</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 其他設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="comment"># 是否啟用 pjax</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 排除指定頁面不使用 pjax，如 &#x27;/music/&#x27;</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /xxxxxx/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注入 CSS 和腳本 (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="comment"># 是否啟用注入</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否每頁啟用</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snackbar - Toast 通知</span></span><br><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="comment"># 位置: top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Snackbar</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 通知位置</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span><br><span class="line">  <span class="comment"># 淺色模式和深色模式下的通知背景顏色</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#1f1f1f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instant.page</span></span><br><span class="line"><span class="comment"># https://instant.page/</span></span><br><span class="line"><span class="attr">instantpage:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pangu - 在中文字符和英文字符之間插入空格</span></span><br><span class="line"><span class="comment"># https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Pangu</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 指定使用 Pangu 的範圍(site 或 post)</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lazyload</span></span><br><span class="line"><span class="comment"># https://github.com/verlok/vanilla-lazyload</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Lazyload</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 指定使用 Lazyload 的範圍 (site 或 post)</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">placeholder:</span></span><br><span class="line">  <span class="attr">blur:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PWA</span></span><br><span class="line"><span class="comment"># 參見 https://github.com/JLHwung/hexo-offline</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="comment"># 是否啟用 PWA</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># PWA manifest 文件路徑</span></span><br><span class="line">  <span class="attr">manifest:</span></span><br><span class="line">  <span class="comment"># Apple Touch 圖標路徑</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span></span><br><span class="line">  <span class="comment"># 32x32 像素的 favicon 圖標路徑</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span></span><br><span class="line">  <span class="comment"># 16x16 像素的 favicon 圖標路徑</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span></span><br><span class="line">  <span class="comment"># mask 圖標路徑</span></span><br><span class="line">  <span class="attr">mask_icon:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open graph meta tags</span></span><br><span class="line"><span class="comment"># 參見 https://hexo.io/docs/helpers#open-graph</span></span><br><span class="line"><span class="attr">Open_Graph_meta:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Open Graph meta 標籤</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="comment"># twitter_card:</span></span><br><span class="line">    <span class="comment"># twitter_image:</span></span><br><span class="line">    <span class="comment"># twitter_id:</span></span><br><span class="line">    <span class="comment"># twitter_site:</span></span><br><span class="line">    <span class="comment"># google_plus:</span></span><br><span class="line">    <span class="comment"># fb_admins:</span></span><br><span class="line">    <span class="comment"># fb_app_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加供應商前綴以確保兼容性</span></span><br><span class="line"><span class="comment"># 是否啟用 CSS 前綴</span></span><br><span class="line"><span class="attr">css_prefix:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># 插入代碼到 head（在 &#x27;&lt;/head&gt;&#x27; 標籤之前）和底部（在 &#x27;&lt;/body&gt;&#x27; 標籤之前）</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CDN 設置</span></span><br><span class="line"><span class="comment"># 除非你知道它們的工作原理，否則不要修改以下設置</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="comment"># 內部和第三方腳本的 CDN 提供商</span></span><br><span class="line">  <span class="comment"># 兩者的選項：local/jsdelivr/unpkg/cdnjs/custom</span></span><br><span class="line">  <span class="comment"># 注意： Dev 版本只能使用 &#x27;local&#x27; 作為內部腳本</span></span><br><span class="line">  <span class="comment"># 注意：將第三方腳本設置為 &#x27;local&#x27; 時，需要安裝 hexo-butterfly-extjs</span></span><br><span class="line">  <span class="attr">internal_provider:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">third_party_provider:</span> <span class="string">jsdelivr</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 是否在 URL 中添加版本號，true 或 false</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 自定義格式</span></span><br><span class="line">  <span class="comment"># 例如：https://cdn.staticfile.org/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;min_cdnjs_file&#125;</span></span><br><span class="line">  <span class="attr">custom_format:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主题 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/26/hello-world/"/>
      <url>/2024/11/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
