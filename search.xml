<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>网管错题整理</title>
      <link href="/2025/02/23/%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/"/>
      <url>/2025/02/23/%E9%94%99%E9%A2%98%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="网管错题整理"><a href="#网管错题整理" class="headerlink" title="网管错题整理"></a>网管错题整理</h1><h3 id="第三章-Windows系统管理与命令"><a href="#第三章-Windows系统管理与命令" class="headerlink" title="第三章 Windows系统管理与命令"></a>第三章 Windows系统管理与命令</h3><ol><li><p>在Windows Server 2008 R2中创建ftp服务组件（）。</p><ul><li>A、ftpd</li><li>&#x3D;&#x3D;IIS&#x3D;&#x3D;</li><li>MMC</li><li>ActiveDiretory</li></ul><p>解析：ISS组件包含了web和ftp两个服务。</p></li><li><p>在某台Windows操作系统的PC上的命令行窗口中输入 tracert <a href="http://www.21cto.com/">www.21cto.com</a> 命令，得到如下如所示的窗口，则改**<u>PC的IP地址</u>**可能为（<code>192.168.43.2</code>），图中出现请求超时说明（<code>中间路由设备禁用了ICMP</code>）</p><p><img src="https://s2.51cto.com/images/20210927/1632752807462356.jpg" alt="1.jpg"></p><p>- </p></li><li><p>在Windows Server 2008 R2 中创建和管理虚拟机的组件是（）。</p><ul><li>A、&#x3D;&#x3D;Hyper-V&#x3D;&#x3D;</li><li>B、MMC</li><li>C、IIS</li><li>D、Active Directory</li></ul><blockquote><p>&#x3D;&#x3D;Hyper-V&#x3D;&#x3D;：微软开发的一款虚拟化产品，直接在Windows server 2008 版本中提供给用户使用。</p><p>&#x3D;&#x3D;MMC&#x3D;&#x3D;：微软的管理控制台工具；</p><p>&#x3D;&#x3D;IIS&#x3D;&#x3D;：Windows自带的Internet information server，主要集成了&#x3D;&#x3D;Web(WWW)和FTP&#x3D;&#x3D;服务器。</p><p>&#x3D;&#x3D;Active Directory&#x3D;&#x3D;：活动目录，这是Windows是提供的一种目录服务。</p></blockquote></li><li><p>在Windows中，要查看目标主机Alice的路径，可使用（A）命令。</p><ul><li>A、<code>tracert</code> Windows中的命令</li><li>B、<code>traceroute</code>  Linux中的命令</li></ul></li><li><p>下列关于ping命令说法错误的是（）。</p><ul><li>A、ping 127.0.0.1 检查TCP&#x2F;IP协议有没有设置好</li><li>B、ping本机IP地址检查本机的IP地址设置和网卡安装配置是否正常</li><li>C、&#x3D;&#x3D;ping 192.168.1.1 -l 1000 检查连续ping 1000次的丢包率&#x3D;&#x3D;</li><li>D、ping远程IP地址检查本机与外部的连接是否正常。</li></ul><blockquote><p>-l 参数用来设定数据包的大小的，在默认的情况下Windows的ping发送的数据包大小为32byte，用户也可以自定义它的大小，最大限制发送64KB，否则容易造成主机瘫痪。</p></blockquote></li><li><p>在无法正常访问网站的情况下，一般可以尝试使用命令（）在刷新本地DNS缓存。</p><ul><li>A、ipconfig&#x2F;release</li><li>B、ipconfig&#x2F;renew</li><li>&#x3D;&#x3D;C、ipconfig&#x2F;flushdns&#x3D;&#x3D;</li><li>D、ipconfig&#x2F;displaydns</li></ul></li><li><p>管理员在使用<code>ping</code>命令时得到一下结果,出现该结果的原因不可能是()</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; ping www.bbb.com</span><br><span class="line">正在 Ping bbb.com [3.231.137.163] 具有 32 字节的数据:</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line">请求超时。</span><br><span class="line"></span><br><span class="line">3.231.137.163 的 Ping 统计信息:</span><br><span class="line">    数据包: 已发送 = 4，已接收 = 0，丢失 = 4 (100% 丢失)，</span><br></pre></td></tr></table></figure><ul><li>A、&#x3D;&#x3D;目标主机域名解析错误&#x3D;&#x3D;</li><li>B、目标主机关机</li><li>C、目标主机无响应</li><li>D、目标主机拒绝接受</li><li>上面可知 域名解析为 Ping bbb.com [3.231.137.163]</li></ul></li><li><p>在Windows系统中，可使用（）命令绑定本地主机IP地址和MAC地址</p><ul><li>A、arp -a</li><li>B、arp -g</li><li>&#x3D;&#x3D;C、arp -s&#x3D;&#x3D;</li><li>D、arp -d</li></ul><blockquote><p>本题考查的也是Windows系统中常用的网络命令arp的相关参数，要绑定某个IP地址和MAC地址的对应关系，实际上是一种静态绑定关系，使用的&#x3D;&#x3D;参数是-S&#x3D;&#x3D; ，因此正确的答案选择选项C。</p></blockquote></li><li><p>Windows Server 2008 R2 上，安装了IIS服务后，不提供的服务是（）。</p><ul><li>A、web</li><li>B、smtp</li><li>&#x3D;&#x3D;C、pop3&#x3D;&#x3D;</li><li>D、ftp</li></ul><blockquote><p>在IIS中，没有提供POP3服务</p></blockquote></li><li><p>在Linux与Windows操作系统之间实现文件系统和打印机共享功能的服务组件为（）。</p><ul><li>A、NFS</li><li>B、CIFS</li><li>&#x3D;&#x3D;D、Samba&#x3D;&#x3D;</li><li>D、FTP</li></ul><blockquote><p>Windows - Windows：CIFS （Windows自助共享）</p><p>Linux - Windows： SMB（使用 Samba）</p><p>Linux - Linux：NFS</p></blockquote></li></ol><p><code>netstat -r</code>的功能和<code>route print</code>的功能一致，都是查看路由表，根据路由表第四行，指向本地环回地址127.0.0.1的是本地网卡的IP地址。</p><p><code>ping</code>命令可以使用多种参数，其**<u>中-t表示持续ping</u><strong>，使用</strong><u>-l 来指定发送的字节数</u>**。</p><p>在Windows系统中，&#x3D;&#x3D;跟踪路由&#x3D;&#x3D;的命令是 tracert</p><h3 id="第四章-Linux系统基础命令"><a href="#第四章-Linux系统基础命令" class="headerlink" title="第四章 Linux系统基础命令"></a>第四章 Linux系统基础命令</h3><ol><li><p>在Linux系统中，可以使用（）命令来显示本地路由信息</p><ul><li>A、ifconfig -a</li><li>B、Is -l</li><li>&#x3D;&#x3D;C、netstat nr&#x3D;&#x3D;</li><li>D、route print</li></ul><blockquote><p>ifconfig是Linux中用于显示或配置网卡（网络接口卡）的命令，ifconfig-a显示系统中所有接口信息。</p><p>ls -1是Linux中显示当前目录下的文件的详细信息的命令。</p><p>route print是Windows操作系统下显示本机网络路由信息的命令。</p><p>netstat -nr命令可以查看Linux内核路由表。</p></blockquote></li><li><p>在Linux中，配置DNS服务器地址的文件是（）。</p><ul><li>A、inetd.conf</li><li>B、lilo.conf</li><li>C、httpd.conf</li><li>&#x3D;&#x3D;D、resolv.conf&#x3D;&#x3D;</li></ul><blockquote><p>&#x2F;etc&#x2F;resolv.conf 配置文件用于存放DNS客户端设置文件</p></blockquote></li><li><p>在Linux系统中，DNS服务的主配置文件是（）</p><ul><li>A、bind.conf</li><li>B、dns.conf</li><li>&#x3D;&#x3D;C、named.conf&#x3D;&#x3D;</li><li>D、ftpd.conf</li></ul><blockquote><p>DNS服务器的程序是bind，对应的主要配置文件是named.conf</p></blockquote></li><li><p>在Linux系统中，命令（）可以复制文件并覆盖原有的目标文件。</p><ul><li>A、cp -a</li><li>&#x3D;&#x3D;B、cp -f&#x3D;&#x3D;</li><li>C、cp -p</li><li>D、cp -r</li></ul><blockquote><p>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</p><p>-d：复制时保留链接。这里所说的链接相当于 Windows 系统中的快捷方式。</p><p>-f：覆盖已经存在的目标文件而不给出提示。</p><p>-i：与 -f 选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答 y 时目标文件将被覆盖。</p><p>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</p><p>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</p><p>-l：不复制文件，只是生成链接文件。</p></blockquote></li><li><p>下列Linux系统命令中，属于磁盘管理命令的是（）。</p><ul><li>A、cat</li><li>B、more</li><li>&#x3D;&#x3D;C、df&#x3D;&#x3D;</li><li>D、lpr</li></ul><blockquote><p>df 命令用于显示磁盘信息</p></blockquote></li><li><p>在Linux中，可以使用命令（）来给test文件赋予执行权限。</p><ul><li>A、<code>chmod -x test</code></li><li>&#x3D;&#x3D;B、<code>chmod +x test</code>&#x3D;&#x3D;</li><li>C、<code>chmod -w test</code></li><li>D、<code>chmod +w test</code></li></ul><blockquote><p>chmod（changemode）命令用于更改文件赋予执行权限，参数代表去除某属性，**<u>参数‘+’代表添加某属性</u><strong>，</strong><u>“rwx”分别代表读写和执行权限</u>**。所以给test文件赋予执行权限的正确命令是“chmod +x test”。</p></blockquote></li><li><p>在Linux系统中，管理员在DHCP服务器的配置文件中添加了下面一段代码:</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">subnet 192.168.20.0 netmask 255.255.255.0 &#123;</span><br><span class="line"> range 192 .168 .20 .10 192 .168 .20.50<span class="comment">;</span></span><br><span class="line"> option domain-name-server ns1 .51CTO.com</span><br><span class="line"> option routers 192 .168 .20.254<span class="comment">;</span></span><br><span class="line"> option broadcast-address 192.168.20.255<span class="comment">;</span></span><br><span class="line"> default-lease-time 1200<span class="comment">;</span></span><br><span class="line"> max-lease-time 360000<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当该DHCP服务器启动后，某主机获取的IP地址信息中的网关地址是（<code>192 .168 .20.254</code>），默认租约为（<code>20分钟</code>）。</p><blockquote><p>在配置文件中的代码option routers 192 .168 .20.254设定了网关地。代码default-lease-time 1200设置了默认租约为1200秒，即20分钟。</p></blockquote></li><li><p>下面不属于Linux文件系统类型的是（）</p><ul><li>&#x3D;&#x3D;A、FAT32&#x3D;&#x3D;</li><li>B、EXT4</li><li>C、PROC</li><li>D、BTRFS</li></ul></li></ol><blockquote><ul><li>linux中没有设备的概念，都是文件，其中的设备文件存在&#x2F;dev下。HD代表IDE设备，SD代表SCSI设备。</li><li>在Linux系统中，可以通过命令（<code>ifconfig eth0 192.168.1.155 netmask 255.255.255.0</code>）修改IP地址，也可以修改（<code>/etc/sysconfig/network-scripts/ifcfg-eth0</code>）文件。</li><li>&#x3D;&#x3D;Nslookup&#x3D;&#x3D;用于查看DNS信息或诊断DNS服务器问题的工具，&#x3D;&#x3D;ipconfig&#x3D;&#x3D;用于显示计算机网络适配器的相关信息，&#x3D;&#x3D;tracert&#x3D;&#x3D;用于追踪路由，&#x3D;&#x3D;netstat&#x3D;&#x3D;用于查看TCP&#x2F;IP网络的相关监控信息。</li><li>Linux系统的要实现文件和打印机共享通常需要使用&#x3D;&#x3D;samba&#x3D;&#x3D;服务。该服务类似于Windows中的网上邻居共享。samba服务是基于&#x3D;&#x3D;SMB&#x3D;&#x3D;协议实现的，由服务器及客户端程序构成。</li><li>Linux 系统**<u>根目录</u><strong>是（<code>/</code>）,</strong><u>用户安装的应用程序</u>**文件默认存放在（<code>/usr</code>）目录中。</li></ul></blockquote><h3 id="第五章-网络设备配置"><a href="#第五章-网络设备配置" class="headerlink" title="第五章 网络设备配置"></a>第五章 网络设备配置</h3><h4 id="第一节-交换机基础"><a href="#第一节-交换机基础" class="headerlink" title="第一节 交换机基础"></a>第一节 交换机基础</h4><ol><li><p>以太网交换机的Console端口连接（C），Ethernet端口连接（B）。</p><ul><li>A、广域网口</li><li>&#x3D;&#x3D;B、以太网口&#x3D;&#x3D;</li><li>&#x3D;&#x3D;C、计算机串口&#x3D;&#x3D;</li><li>D、路由器S0口</li></ul><blockquote><p>交换机有多种类型的端口：</p><p>①Console端口：Console端口通过专用电缆连接至计算机串行口，利用终端仿真程序对交换机进行本地配置。</p><p>②双绞线（RJ-45）端口：这种端口通过双绞线连接以太网。10Base-T的RJ-45端U标识为“ETH”，而100Base-TX的RJ-45端口标识为“10&#x2F;100bTX”。</p><p>③光纤端口：SC端口（Subscriber Connector）是一种光纤端口，可提供干兆数据传输速率，通常用于连接服务器的光纤网卡。交换机的光纤端口是一发一收两个，光纤跳线也必须是两根。</p><p>④GBIC端口：交换机的GBIC插槽用于安装吉比特端口转换器（Giga Bit-rate Interface Converter，GBIC）。GBIC模块是将千兆位电信号转换为光信号的热插拔器件，分为用于级连的GBIC模块和用于堆叠的GBIC模块。</p><p>⑤SFP端口：小型机架可插拔设备SFP（Small Form-factor Pluggable）是GBIC的升级版本，其功能基本和GBIC—样，但体积减少一半。</p></blockquote></li><li><p>在局域网中，VLAN的主要作用是（&#x3D;&#x3D;隔离广播域&#x3D;&#x3D;），在VLAN划分时，静态VLAN指的是（&#x3D;&#x3D;基于接口的划分&#x3D;&#x3D;）</p></li><li><p>在局域网中划分VLAN的优点是（），不同VLAN之间通信可以通过（路由器）来实现。</p><ul><li>A、增加了冲突域的大小</li><li>&#x3D;&#x3D;B、减少了广播域的大小&#x3D;&#x3D;</li><li>C、交换机管理更为简单</li><li>D、可以自动为主机分配IP地址</li></ul><blockquote><p>**<u>VLAN的划分</u><strong>可以有效划分广播域，</strong><u>减少广播域大小，减少广播风暴</u>**。VLAN之间通信的必须进行三层转发，上面具有三层转发功能的是路由器。VLAN之间相互通信一般可以通过单臂路由或者三层交换创建vlan接口来实现。</p></blockquote></li><li><p>在交换机执行命令中（）可以查看设备的温度信息</p><ul><li>A、display fan</li><li>B、display power</li><li>C、display device</li><li>D、display temperature</li></ul><blockquote><p>执行命令&#x3D;&#x3D;display fan&#x3D;&#x3D;，查看设备的风扇状态。</p><p>执行命令&#x3D;&#x3D;display power&#x3D;&#x3D;，查看设备的电源状态信息。</p><p>执行命令&#x3D;&#x3D;display device&#x3D;&#x3D; [ slot slot-id ]，查看设备的部件信息和状态信息。</p><p>执行命令&#x3D;&#x3D;display temperature&#x3D;&#x3D; { all | slot slot-id }，查看设备的温度信息。</p></blockquote></li><li><p>华为交换机快速以太网口默认 <code>link-type</code>是（）</p><ul><li>&#x3D;&#x3D;A、hybrid&#x3D;&#x3D;</li><li>B、access</li><li>C、trunk</li><li>D、route</li></ul><blockquote><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 华为交换机的默认端口配置是</span></span><br><span class="line"><span class="attribute">port</span> link-type hybrid</span><br><span class="line">port hybrid pvid vlan <span class="number">1</span></span><br><span class="line">port hybrid untagged vlan <span class="number">1</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>（）对以太网帧进行了修改，在源MAC地址字段和协议类型字段之间加入（&#x3D;&#x3D;4&#x3D;&#x3D;）字节的VLAN标签。</p><ul><li>A、IEEE802.11</li><li>B、IEEE802.11a</li><li>&#x3D;&#x3D;C、IEEE802.1Q&#x3D;&#x3D;</li><li>D、IEEE802.1X</li></ul><blockquote><p>IEEE 802.1Q标准对Ethernet帧格式进行了修改，在源MAC地址字段和协议类型字段之间加入4字节的802.1Q Tag</p></blockquote></li><li><p>以太网链路聚合不能实现（）</p><ul><li>A、增加宽带</li><li>B、负载分担</li><li>C、增加链路可靠性</li><li>&#x3D;&#x3D;D、避免环路&#x3D;&#x3D;</li></ul><blockquote><p>以太网链路聚合Eth-Trunk简称链路聚合，它通过将多条以太网物理链路捆绑在一起成为一条逻辑链路，从而实现增加链路带宽的目的。同时，这些捆绑在一起的链路通过相互间的动态备份，可以有效地提高链路的可靠性，并能进行负载分担。</p></blockquote></li><li><p>俗称的&#x3D;&#x3D;傻瓜&#x3D;&#x3D;交换机是&#x3D;&#x3D;二层交换机&#x3D;&#x3D;，工作在&#x3D;&#x3D;数据链路层&#x3D;&#x3D;。</p></li><li><p>下面接口中，可使用串口线连接PC进行相关配置的是（）、</p><ul><li>A、Ethernet接口</li><li>B、GlgabitEthernet接口</li><li>C、Vlanif接口</li><li>&#x3D;&#x3D;D、Console接口&#x3D;&#x3D;</li></ul><blockquote><p>管理接口：console口，可以使用串口线连接PC进行设备配置，LAN侧物理接口：Ethernet、GigabitEthernet、Vlanif是逻辑VLAN接口。</p></blockquote></li><li><p>下面片段的含义是：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;HUAWEI&gt; system-view</span><br><span class="line">[HUAWEI] time-range test 14:00 to 18:00 off-day</span><br></pre></td></tr></table></figure><ul><li>&#x3D;&#x3D;A、配置时间段test，在周六、周日 下午 14:00到18:00生效&#x3D;&#x3D;</li><li>B、配置时间段test，在周一到周五 下午 14:00到18:00生效</li><li>C、配置时间段test，节假日的下午 14:00到18:00生效</li><li>D、配置时间段test，工作日 下午 14:00到18:00生效</li></ul><blockquote><p>offday表示双休日，即周六和周日。</p></blockquote></li><li><p>硬件设备状态查看命令<code>display memory-usage</code>的作用是（61）。</p><ul><li>A.查看CPU占用率</li><li>B.查看电池状态</li><li>&#x3D;&#x3D;C.查看内存占用率&#x3D;&#x3D;</li><li>D.查看风扇状态</li></ul></li><li><p>下面不属于动态VLAN划分的是（ ）。</p><ul><li>&#x3D;&#x3D;A.根据交换机端口划分&#x3D;&#x3D;</li><li>B.根据MAC地址划分</li><li>C.根据IP地址划分</li><li>D.根据管理策略划分</li></ul></li></ol><blockquote><p>VLAN主要用于广播域的隔离，而静态配置是基于接口的配置，而动态配置包括基于MAC、协议、子网的VLAN 划分</p><p>交换机的&#x3D;&#x3D;默认VLAN&#x3D;&#x3D;是 &#x3D;&#x3D;VLAN1&#x3D;&#x3D;</p><p>基于&#x3D;&#x3D;端口的vlan划分&#x3D;&#x3D;，也称为&#x3D;&#x3D;静态方式&#x3D;&#x3D;。</p></blockquote><h4 id="第二节-路由器基础"><a href="#第二节-路由器基础" class="headerlink" title="第二节 路由器基础"></a>第二节 路由器基础</h4><ol><li><p>下面属于外部网关路由协议的是（）</p><ul><li>A、RIP</li><li>B、OSPF</li><li>&#x3D;&#x3D;C、BGP&#x3D;&#x3D;</li><li>D、ISIS</li></ul><blockquote><p>BGP属于外部网关协议。</p></blockquote></li><li><p>OSPF的主干区域是（）</p><ul><li>&#x3D;&#x3D;A.Erea0&#x3D;&#x3D;</li><li>B.Erea1</li><li>C.Erea10</li><li>D.Erea100</li></ul><blockquote><p>OSPF的主干区域是erea0。</p></blockquote></li><li><p>下列路由协议中，常用与跨国之间路由通告的是（）</p><ul><li>A.RIP</li><li>B.ISIS</li><li>C.OSPF</li><li>&#x3D;&#x3D;D.BGP&#x3D;&#x3D;</li></ul><blockquote><p>跨国之间路由通告一般都是自治系统之间的路由通告，所以一般是外部网关协议BGP。</p></blockquote></li><li><p>下列哪个路由协议属于有类路由协议 ()。</p><ul><li>&#x3D;&#x3D;A.RIPv1&#x3D;&#x3D;</li><li>B.ISIS</li><li>C.OSPF</li><li>D.RIPV2</li></ul><blockquote><p>比较典型的无类路由协议如ospf，ripv2，isis等；有类路由协议则有rip，ripv1等</p></blockquote></li><li><p>RIP更新路由表的原则是（ ）。</p><ul><li>A.到各个目标网络的链路状态更优</li><li>B.到各个目标网络的时延最小</li><li>&#x3D;&#x3D;C.到各个目标网络的距离最短&#x3D;&#x3D;</li><li>D.到各个目标网络的链路带宽、时延等多个参数综合评价更优</li></ul><blockquote><p>RIP以跳步计数来度量路由费用，跳步数最小被认为是距离最短。</p></blockquote></li><li><p>通过路由器的访问控制列表（ACL）可以（ ）。</p><ul><li>A.进行域名解析</li><li>B.进行地址分配</li><li>&#x3D;&#x3D;C.进行路由过滤&#x3D;&#x3D;</li><li>D.进行路由发布</li></ul><blockquote><p>ACL访问控制列表，可以实现依据ACL规则进行进出路由信息的过滤。</p></blockquote></li></ol><h4 id="第三节-路由器配置"><a href="#第三节-路由器配置" class="headerlink" title="第三节 路由器配置"></a>第三节 路由器配置</h4><ol><li><p>路由器在第一次配置时，需要通过（1）连接到交换机，在配置系统名称时，需使用命令是（<code>[AR]sysname HW</code>）。</p><ul><li>A.双绞线</li><li>B.光纤</li><li>&#x3D;&#x3D;C.串口线&#x3D;&#x3D;</li><li>D.WIFI</li></ul><blockquote><p>第一次配置时，需要使用串口线连接到交换机的console口，配置系统名时，需要在系统视图下，也就是中括号下使用sysname命令。</p></blockquote></li><li><p>下列接口中，能够提供更大的带宽和更高的可靠性的是（38）。</p><ul><li>A.VLANIF接口 </li><li>&#x3D;&#x3D;B.Eth-trunk接口&#x3D;&#x3D;</li><li>C.Tunnel接口 </li><li>D.Loopback接口</li></ul><blockquote><p><img src="https://s2.51cto.com/images/20220920/1663672786415569.png" alt="image.png"></p></blockquote></li></ol><h5 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h5><h5 id="试题二"><a href="#试题二" class="headerlink" title="试题二"></a>试题二</h5><p>阅读下列有关网络防火墙的说明，回答问题1至问题4，将答案填入答题纸对应的解答栏内。</p><p>【说明】</p><p>某公司网络有200台主机、一台WebServer和一台MailServer。为了保障网络安全，安装了一款防火墙，其网络结构如图4-1所示，防火墙上配置NAT转换规则如表4-1所示。</p><p>防火墙的配置遵循最小特权原则（即仅允许需要的数据包通过，禁止其他数据包通过），请根据题意回答以下问题。</p><p><img src="https://s2.51cto.com/images/20220920/1663674234372360.png" alt="image.png"></p><h6 id="【问题1】"><a href="#【问题1】" class="headerlink" title="【问题1】"></a>【问题1】</h6><p>防火墙设置的缺省安全策略如表4-2所示，该策略含义为：内网主机可以访问WebServer、MailServer和Internet，Intemet主机无法访问内网主机和WebServer、MailServer。</p><p>如果要给Internet主机开放WebServer的Web服务以及MaiIServer的邮件服务，请补充完成表4-3的策略。（注：表4-3策略在表4-2之前生效）</p><p><img src="https://s2.51cto.com/images/20220920/1663674252727750.png" alt="image.png"></p><p>参考答案:</p><p>(1) 192.168.2.2</p><p>(2) 80</p><p>(3)允许</p><p>(4) 192.168.2.3</p><p>(5) SMTP</p><p>(6)允许</p><blockquote><p>解析：</p><p>从拓扑图可以看到，从E2去往E1方向表示从互联网进入到dmz区，结合表中的协议为HTTP，可以知道（1）的IP地址是web服务器的地址，端口为80。对应的规则为允许。</p><p>第（4）空结合后面的目标端口为25，可以知道是邮件服务，因此目标地址是邮件服务器地址，协议是smtp，规则为允许。</p></blockquote><h6 id="【问题2】"><a href="#【问题2】" class="headerlink" title="【问题2】"></a>【问题2】</h6><p>如果要禁止内网用户访问Internet上202.10.20.30的FTP服务，请补充完成表4-4的策略。</p><p>（注：表4-4策略在表4-2之前生效）</p><p><img src="https://s2.51cto.com/images/20220920/1663674291778247.png" alt="image.png"></p><p>参考答案:</p><p>(7) E0-&gt; E2</p><p>(8) Any</p><p>(9)禁止</p><blockquote><p>解析：</p><p>根据题干要求要禁止内网用户访问Internet上的202.10.20.30的FTP服务，因此方向是从内网去往互联网，E0-E2.源端口可以为任意端口值,由于是要禁止，因此规则为禁止.</p></blockquote><h6 id="【问题3】"><a href="#【问题3】" class="headerlink" title="【问题3】"></a>【问题3】</h6><p>如果要禁止除PC1以外的所有内网用户访问Internet上219.16.17.18的Web服务，请补充</p><p>完成表4-5的策略。（注：表4-5策略在表4-2之前生效）</p><p><img src="https://s2.51cto.com/images/20220920/1663674312948489.png" alt="image.png"></p><p>参考答案:</p><p>(10) 192.168.1.1</p><p>(11)允许</p><p>(12) Any或192.168.1.0&#x2F;24</p><p>(13)禁止</p><blockquote><p>解析：</p><p>根据题干要求,要禁止除PC1以外的所有内网用户访问Internet上219.16.17.18的Web服务,因此从内网去往外网方向,先允许PC1对应的地址作为源地址,再禁止其他任意地址。</p></blockquote><h6 id="【问题4】"><a href="#【问题4】" class="headerlink" title="【问题4】"></a>【问题4】</h6><p>如果要允许Intemet用户通过Ping程序对WebServer的连通性进行测试，请补充完成表4-6的策略。（注：表4-6策略在表4-2之前生效） </p><p><img src="https://s2.51cto.com/images/20220920/1663674343901862.png" alt="image.png"></p><p>参考答案:</p><p>(14) 192.168.2.2</p><p>(15) ICMP</p><blockquote><p>解析</p><p>根据题干要求，要允许Intemet用户通过Ping程序对WebServer的连通性进行测试，因此源地址和源端口都为任意，目标地址为web服务器的地址，由于Ping命令使用的是ICMP协议，因此对应的协议是ICMP。</p></blockquote><h5 id="试题三"><a href="#试题三" class="headerlink" title="试题三"></a>试题三</h5><p>请认真阅读下列有关代理服务器的说明信息，然后根据要求回答问题1至问题6。将解答填入答题纸对应的解答栏内。</p><p>【说明】</p><p>某单位通过电信部门提供ADSL与Internet相连，并通过代理服务器使内部各计算机终端访问Internet，连接方式如图1-1所示。电信部门分配的公网IP地址为202.117.12.36&#x2F;30，DNS的IP地址为211.92.184.130和211.92.184.129， 假设内部需代理的计算机客户端数目不超过250台。单位内部网络IP地址规划为。代理服务器外网卡部分网络参数配置如图1-2所示。</p><p><img src="https://s2.51cto.com/images/20220920/1663674406462907.png" alt="image.png"></p><p>图8  采用代理服务器接入Internet连接示意图</p><p><img src="https://s2.51cto.com/images/20220920/1663674428325973.png" alt="image.png"></p><p>图9  代理服务器外网卡网络参数配置图</p><h4 id="第四节-交换机配置"><a href="#第四节-交换机配置" class="headerlink" title="第四节 交换机配置"></a>第四节 交换机配置</h4><ol><li><p>下面属于华为交换机中逻辑接口的是（38）。</p><ul><li>A.Ethernet接口</li><li>B.GigabitEthernet接口</li><li>&#x3D;&#x3D;C.Vlanif接口&#x3D;&#x3D;</li><li>D.Console接口</li></ul><blockquote><p>管理接口：console口和MEth口</p><p>LAN侧物理接口：Ethernet、GigabitEthernet</p></blockquote></li><li><p>下面不属于动态VLAN划分的是（39）。</p><ul><li>&#x3D;&#x3D;A.根据交换机端口划分&#x3D;&#x3D;</li><li>B.根据MAC地址划分</li><li>C.根据IP地址划分</li><li>D.根据管理策略划分</li></ul><blockquote><p>&#x3D;&#x3D;静态分配VLAN&#x3D;&#x3D;：为交换机的各个端口指定所属的VLAN。这种基于端口的划分方法是把各个端口固定地分配给不同的VLAN,任何连接到交换机的设备都属于接入端口所在的VLAN。</p><p>&#x3D;&#x3D;动态划分方法有&#x3D;&#x3D;：基于MAC地址划分VLAN、基于子网划分VLAN、基于协议划分VLAN、基于策略划分VLAN。</p></blockquote></li><li><p>在局域网中划分VLAN，不同VLAN之间可以通过（ ）实现互相通信。</p><ul><li>A.链路聚合端口</li><li>&#x3D;&#x3D;B.Vlanif接口&#x3D;&#x3D;</li><li>C.镜像端口</li><li>D.观察端口</li></ul><blockquote><p>VLAN之间的相互通信可以通过VLAN Interface（Vlanif）接口来实现相互通信。</p></blockquote></li></ol><blockquote><p>Console端口通过专用电缆连接至计算机串行口，利用终端仿真程序对交换机进行本地配置。</p></blockquote><h4 id="第五节-防火墙"><a href="#第五节-防火墙" class="headerlink" title="第五节 防火墙"></a>第五节 防火墙</h4><h3 id="第六章-HTML与ASP、数据库"><a href="#第六章-HTML与ASP、数据库" class="headerlink" title="第六章 HTML与ASP、数据库"></a>第六章 HTML与ASP、数据库</h3><h4 id="第一节-1-HTML"><a href="#第一节-1-HTML" class="headerlink" title="第一节 1.HTML"></a>第一节 1.HTML</h4><ol><li><p>在HTML中可利用事件触发浏览器的行为，其中当鼠标按钮被按下时执行脚本的事件为（46）。 </p><ul><li>A.Onmousedown</li><li>&#x3D;&#x3D;B.<code>Onmousemove</code>&#x3D;&#x3D;</li><li>C.Onmouseout</li><li>D.ondblclick</li></ul><blockquote><p><code>Onmousedown</code>事件会在鼠标按键被按下时发生。</p></blockquote></li><li><p>可使用(43)事件实现鼠标指针经过对象上方时触发对象动作。</p><ul><li>A.mouseupB.mouseoverC.mousemoveD.mouseout</li><li>&#x3D;&#x3D;B.<code>mouseover</code>&#x3D;&#x3D;</li><li>C.mousemove</li><li>D.mouseout</li></ul><blockquote><p>当鼠标指针经过某个对象上方时，会触发<code>mouseover</code>事件。</p></blockquote></li><li><p>HTML中，<input>标记的type属性（43）在浏览器中的显示不是按钮形式。</p><ul><li>A.submit</li><li>B.image</li><li>C.reset</li><li>&#x3D;&#x3D;D.checkbox&#x3D;&#x3D;</li></ul><blockquote><p>HTML语言中input标记含有多种属性，其中type属性用于规定input元素的类型， 包含 button、checkbox、hidden、image、password、reset、submit、text 等几种，其中：</p><p>①button用于定义可点击的按钮；</p><p>②**<u>checkbox</u>**用于定义文档中的复选框；</p><p>③hidden用于定义隐藏的输入字段；</p><p>④**<u>image</u>**用于定义图像形式的提交按钮；</p><p>⑤password用于定义密码字段，该字段中的字符将被掩码；</p><p>⑥reset用于定义重置按钮，重置按钮可以清除表单中的所有数据；</p><p>⑦submit用于定义提交按钮，该按钮可以将表单数据发送至服务器；</p><p>⑧text用于定义单行的输入字段，用户可在其中输入文本，默认宽度为20个字符。</p></blockquote></li><li><p>在ASP中，（45）对象可以创建其他对象实例。</p></li></ol><ul><li>&#x3D;&#x3D;A.Server&#x3D;&#x3D;</li><li>B.Response</li><li>C.Session</li><li>D.Application</li></ul><blockquote><p>在ASP的内置对象中，</p><p><code>Application</code>对象用来使给定应用程序的所有用户共享信息。</p><p><code>Request</code>对象可以访问任何用HTTP请求传递的信息，包括从HTML表格用POST方法或GET方法传递的参数、cookie和用户认证。</p><p><code>Response</code>对象控制发送给用户的信息。包括直接发送信息给浏览器、重定向浏览器到另一个URL或设置cookie的值。</p><p><code>Server</code>对象提供对服务器上的方法和属性进行的访问。最常用的方法是创建其他对象实例，Session对象存储特定的用户会话所需的信息。当用户在应用程序的页之间跳转时，存储在Session对象中的变量不会清除。</p></blockquote><ol start="5"><li><p>浏览器上显示的“HTTP-404”错误是指（46）。</p><ul><li>A.服务器不可用</li><li>&#x3D;&#x3D;B.网页不存在&#x3D;&#x3D;</li><li>C.未授权</li><li>D.服务器拒绝请求</li></ul><blockquote><p>401 - 未授权。请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。<br>404 - 未找到。服务器找不到请求的网页。<br>500 - 服务不可用</p><p>403 （禁止） 服务器拒绝请求。</p></blockquote></li><li><p>HTML中的<code>&lt;td rowspan=3&gt;</code>标记用于设置单元格在ASP中，（45）对象可以创建其他对象实例。</p></li></ol><ul><li>A.宽度</li><li>B.跨越多列</li><li>&#x3D;&#x3D;C.跨越多行&#x3D;&#x3D;</li><li>D.边框</li></ul><ol start="7"><li><p>使用HTML语言为某产品编制帮助文档，要求文档导航结构和内容同时显示，需要在文档中使用（&#x3D;&#x3D;框架&#x3D;&#x3D;）,最少需要使用（&#x3D;&#x3D;3&#x3D;&#x3D;）个。</p><blockquote><p>根据题干的意思要求有一个文档导航结构和一个文档具体内容的显示结构，并且这两个部分的内容要同时显示，所以只能够使用框架。在设置框架时，需要先定义一个框架页面，在框架内在分别指定导航结构的页面和内容显示的页面。所以至少需要使用3个HTML页面才能实现。</p></blockquote></li><li><p>在ASP的内置对象中，（ ）对象可以修改cookie中的值。</p><ul><li>A.request</li><li>B.application</li><li>&#x3D;&#x3D;C.Response&#x3D;&#x3D;</li><li>D.session</li></ul><blockquote><p>在ASP的内置对象中，response对象和request对象和cookie有关。其中，request对象中的Cookies集合是服务器根据用户的需求，发出的所有cookie的值的集合，这些Cookie仅对相应的域有效，每个成员均为只读。Response对象中的Cookies集合是服务器发回客户端的所有Cookie的值，这个集合为只写，所以只有Response对象可以修改cookie中的值。</p></blockquote></li></ol><blockquote><p>&#x3D;&#x3D;IE浏览器&#x3D;&#x3D;内核是：&#x3D;&#x3D;Trident&#x3D;&#x3D;</p><p>Safari内核：Webkit</p><p>谷歌内核：Blink</p><p>火狐内核：Gecko</p></blockquote><h4 id="第二节-2-Asp基础代码与数据库基础"><a href="#第二节-2-Asp基础代码与数据库基础" class="headerlink" title="第二节 2.Asp基础代码与数据库基础"></a>第二节 2.Asp基础代码与数据库基础</h4><ol><li>​在ASP的内置对象中，适合存储网站访问计数器的是（45）。<ul><li>A.request</li><li>&#x3D;&#x3D;B.<code>application</code>&#x3D;&#x3D;</li><li>C.response</li><li>D.session</li></ul></li><li>ASP提供了可在脚本中使用的内嵌对象，其中（45）用于访问服务器端所创建的并发回到客户端的响应信息。<ul><li>A.request</li><li>B.server</li><li>&#x3D;&#x3D;C.response&#x3D;&#x3D;</li><li>D.application</li></ul></li><li>HTTPS使用（45）对报文进行封装。<ul><li>A.SSH</li><li>&#x3D;&#x3D;B.<code>TSL</code>&#x3D;&#x3D;</li><li>C.RSA</li><li>D.MD5</li></ul></li></ol><blockquote><p>response对象用来访问服务器端所创建的并发回到客户端的响应信息。为脚本提供HTTP变量，指明服务器、服务器的功能、关于发回浏览器的内容的信息以及任何将为这个域而存放在浏览器里新的Cookie。</p><p>request对象为脚本提供了当客户端请求一个页面或者传递一个窗体时客户端提供的全部信息。这包括能指明浏览器和用户的HTTP变量，在这个域名下存放在浏览器中的Cookie。</p><p>server对象提供了一系列的方法和属性，在使用ASP编写脚本时是非常有用的。最常用的是Server.CreateObject方法，它允许在当前页的环境或会话中在服务器上实例化其COM对象。</p><p>application对象是在为响应一个ASP页的首次请求而载入ASP DLL时创建的，它提供了存储空间用来存放变量和对象的引用，可用于所有的页面，任何访问者都可以打开它们。</p></blockquote><h3 id="第七章-配置与应用"><a href="#第七章-配置与应用" class="headerlink" title="第七章 配置与应用"></a>第七章 配置与应用</h3><h4 id="第一节-网络组建技术与综合布线"><a href="#第一节-网络组建技术与综合布线" class="headerlink" title="第一节 网络组建技术与综合布线"></a>第一节 网络组建技术与综合布线</h4>]]></content>
      
      
      <categories>
          
          <category> 网络管理员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 错题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/2025/02/23/%E6%AD%A3%E5%88%99/"/>
      <url>/2025/02/23/%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>re全称：Regular Expression，正则表达式,一种使用表达式的方式对字符串进行匹配的语法规则.</p><p>我们抓取到的网页源代码本质上就是一个超长的字符串,想从里面提取内容,用正则再合适不过了.</p><ul><li>正则优点：速度块，效率高，准确性高</li><li>正则缺点：新手上手难度高</li></ul><p>不过只要掌握了正则编写的逻辑关系，写出一个提取页面内容的正则其实并不复杂</p><p>元字符：具有固定含义的特殊符号</p><p>常用元字符：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.      匹配除换行符以外的任意字符, 除了\n 匹配不到</span><br><span class="line">\w     匹配字母或数字或下划线 ,不要下划线 [a-zA-Z0-9]</span><br><span class="line">\s     匹配任意的空白符</span><br><span class="line">\d     匹配数字</span><br><span class="line">\n     匹配一个换行符</span><br><span class="line">\t     匹配一个制表符</span><br><span class="line"></span><br><span class="line">^      匹配字符串的开始</span><br><span class="line">$      匹配字符串的结尾</span><br><span class="line"></span><br><span class="line">\W     匹配非字符或数字或下划线</span><br><span class="line">\D     匹配非数字</span><br><span class="line">\S     匹配非空白符</span><br><span class="line">a|b    匹配字符a或字符b</span><br><span class="line">()     匹配括号内的表达式,也表示一个组</span><br><span class="line">[...]  匹配字符组中的字符</span><br><span class="line">[^...] 匹配除了字符组中字符的所以字符 (非)</span><br></pre></td></tr></table></figure><p>量词：控制前面的元字符出现次数</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">*       重复零次或更多次</span><br><span class="line">+       重复一次或更多</span><br><span class="line">?       重复零次或一次</span><br><span class="line">&#123;n&#125;     重复n次</span><br><span class="line">&#123;n,&#125;    重复n次或更多次</span><br><span class="line">&#123;n,m&#125;   重复n到m次</span><br></pre></td></tr></table></figure><p>贪婪匹配和惰性匹配</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.*      贪婪匹配</span><br><span class="line">.*?     惰性匹配</span><br></pre></td></tr></table></figure><p>爬虫用的最多的就是惰性匹配</p><p>案例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str: 玩吃鸡游戏,晚上一起上游戏,干嘛呢?打游戏啊</span><br><span class="line">reg: 玩.*?游戏</span><br><span class="line">匹配的是: 玩吃鸡游戏</span><br><span class="line"></span><br><span class="line">reg: 玩.*游戏</span><br><span class="line">此时匹配的是: 玩吃鸡游戏,晚上一起上游戏,干嘛呢?打游戏</span><br></pre></td></tr></table></figure><h1 id="re模块"><a href="#re模块" class="headerlink" title="re模块"></a>re模块</h1><ol><li><p>findall 查找所有，返回list</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">lst = re.findall(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;mai le fo len, mai ni mei!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [&#x27;m&#x27;, &#x27;m&#x27;, &#x27;m&#x27;]</span></span><br><span class="line">lst = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;5点之前,你要给我500万&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(lst)  <span class="comment"># [&#x27;5&#x27;, &#x27;500&#x27;]</span></span><br></pre></td></tr></table></figure></li><li><p>search 会进行匹配，但如果匹配到了第一个结果。就会返回这个结果，如果匹配不上search返回的则是 None</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ret = re.search(<span class="string">r&#x27;\d&#x27;</span>, <span class="string">&#x27;5点之前,你要给我500万&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># 5</span></span><br></pre></td></tr></table></figure></li><li><p>match 只能从字符串的开头进行匹配</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">ret = re.<span class="keyword">match</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;abc&#x27;</span>).group()</span><br><span class="line"><span class="built_in">print</span>(ret)  <span class="comment"># a</span></span><br></pre></td></tr></table></figure></li><li><p>finditer 和 findall 差不多，只不过这时返回的是迭代器（重点）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">it = re.finditer(<span class="string">&#x27;m&#x27;</span>, <span class="string">&quot;mai le fo len, mai ni mei!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> el <span class="keyword">in</span> it:</span><br><span class="line">    <span class="built_in">print</span>(el.group())  <span class="comment"># 依然需要分组</span></span><br></pre></td></tr></table></figure></li><li><p>compile  可以将一个长长的正则进行预加载. 方便以后使用</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\&#123;3&#125;&#x27;</span>)  <span class="comment"># 将正则表达式编译成为一个正则对象，规定要匹配的3个数字</span></span><br><span class="line">ret = obj.search(<span class="string">&#x27;abc123eee&#x27;</span>)  <span class="comment"># 正则表达式对象调用search，参数为待匹配字符串</span></span><br><span class="line"><span class="built_in">print</span>(ret.group())  <span class="comment"># 123</span></span><br></pre></td></tr></table></figure></li><li><p>正则中的内容如何单独提取?</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python50道练习题</title>
      <link href="/2025/02/23/Python50%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/"/>
      <url>/2025/02/23/Python50%E9%81%93%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Python50道练习题"><a href="#Python50道练习题" class="headerlink" title="Python50道练习题"></a>Python50道练习题</h1><h3 id="1、两数之和"><a href="#1、两数之和" class="headerlink" title="1、两数之和"></a>1、两数之和</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">num1 = <span class="number">20</span></span><br><span class="line">num2 = <span class="number">22</span></span><br><span class="line"></span><br><span class="line">result = num1 + num2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h3 id="2、一百以内的偶数"><a href="#2、一百以内的偶数" class="headerlink" title="2、一百以内的偶数"></a>2、一百以内的偶数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        list1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="3、一百以内的奇数"><a href="#3、一百以内的奇数" class="headerlink" title="3、一百以内的奇数"></a>3、一百以内的奇数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        list1.append(i)</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">list2 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>) <span class="keyword">if</span> i % <span class="number">2</span> != <span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">list3 = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>)]</span><br></pre></td></tr></table></figure><h3 id="4、判断素数"><a href="#4、判断素数" class="headerlink" title="4、判断素数"></a>4、判断素数</h3><p>编写程序，判断某一个数是否为素数。所谓素数指的是指在大于1的自然数中，除了1和它本身以外不再有其他因数的自然数:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">37</span></span><br><span class="line">flag = <span class="literal">True</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,a):  <span class="comment"># 注意range 是左闭右开</span></span><br><span class="line">    <span class="keyword">if</span> a % i == <span class="number">0</span>:</span><br><span class="line">        flag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 一旦判断成功后，后面就没必要继续了</span></span><br><span class="line"><span class="keyword">if</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a不是素数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;a是素数&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="5、求阶乘"><a href="#5、求阶乘" class="headerlink" title="5、求阶乘"></a>5、求阶乘</h3><p>编写程序，求出某个自然数的阶乘。一个正整数的阶乘是所有小于及等于该数的正整数的积，并且0的阶乘为1。自然数n的阶乘写作n!</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">0</span> <span class="keyword">or</span> a == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阶乘为: 1&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,a+<span class="number">1</span>): <span class="comment"># 包括本身</span></span><br><span class="line">        <span class="built_in">sum</span> *= i</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;阶乘为:&#x27;</span>,<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二 递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> x * fun(x - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun(a))</span><br><span class="line"><span class="comment"># 方法三 math.factorial()</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.factorial(a))</span><br></pre></td></tr></table></figure><h3 id="6、求圆的周长"><a href="#6、求圆的周长" class="headerlink" title="6、求圆的周长"></a>6、求圆的周长</h3><p>程序编写：输入半径，求出圆的周长</p><p>圆的周长：<code>2πr</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径：&#x27;</span>))</span><br><span class="line">girth = <span class="number">2</span> * r * math.pi</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;周长是&#x27;</span>,<span class="built_in">round</span>(girth,<span class="number">2</span>))  <span class="comment"># round 保留两位小数</span></span><br></pre></td></tr></table></figure><h3 id="7、求圆的面积"><a href="#7、求圆的面积" class="headerlink" title="7、求圆的面积"></a>7、求圆的面积</h3><p>程序编写：输入半径，求出圆的面积</p><p>圆的周长：<code>πrr</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">r = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入圆的半径：&#x27;</span>))</span><br><span class="line">girth = r * r * math.pi</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;面积是&#x27;</span>,<span class="built_in">round</span>(girth,<span class="number">2</span>))  <span class="comment"># round 保留两位小数</span></span><br></pre></td></tr></table></figure><h3 id="8、求直角三角形斜边的边长"><a href="#8、求直角三角形斜边的边长" class="headerlink" title="8、求直角三角形斜边的边长"></a>8、求直角三角形斜边的边长</h3><p>编写程序：输入两个直角边，求出三角形斜边的长度</p><p>勾股定理：a^2^ + b^2^ &#x3D; c^2^</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">4</span></span><br><span class="line">cfang = math.<span class="built_in">pow</span>(a,<span class="number">2</span>) + math.<span class="built_in">pow</span>(b,<span class="number">2</span>)</span><br><span class="line"><span class="comment"># 或者 math.pow(cfang,0.5) or cfang ** 0.5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三角形斜边的长度: &#x27;</span>,math.sqrt(cfang))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="9、比较三个数大小"><a href="#9、比较三个数大小" class="headerlink" title="9、比较三个数大小"></a>9、比较三个数大小</h3><p>编写程序：输入三个数，从小到大输出三个数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第一个数：&#x27;</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第二个数：&#x27;</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入第三个数：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">lst = [a,b,c]</span><br><span class="line"><span class="comment"># 方法一：list.sort() ,sort(reverse=False) 默认False 升序</span></span><br><span class="line">lst.sort()</span><br><span class="line"><span class="built_in">print</span>(lst)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二：sorted(lst)</span></span><br><span class="line">list1 = <span class="built_in">sorted</span>([a,b,c])</span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="10、找出区间内的素数"><a href="#10、找出区间内的素数" class="headerlink" title="10、找出区间内的素数"></a>10、找出区间内的素数</h3><p>编写程序，输入整数a、b表示一个闭区间，找出该区间内的所有素数并打印。 </p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断素数函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prime</span>(<span class="params">x</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, x):</span><br><span class="line">        <span class="keyword">if</span> x % i == <span class="number">0</span>:</span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span> </span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 闭区间</span></span><br><span class="line">a = <span class="number">10</span>  <span class="comment"># 左端点</span></span><br><span class="line">b = <span class="number">20</span>  <span class="comment"># 右端点</span></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a,b+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> prime(i):</span><br><span class="line">        num_list.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure><h3 id="11、组合数字"><a href="#11、组合数字" class="headerlink" title="11、组合数字"></a>11、组合数字</h3><p>有四个数字：1、2、3、4，能组成多少个互不相同且无重复数字的三位数?各是多少?</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">str1 = <span class="string">&#x27;1234&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> str1:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> str1:</span><br><span class="line">            <span class="keyword">if</span> i == j <span class="keyword">or</span> i == k <span class="keyword">or</span> j == k:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="built_in">print</span>(i+j+k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span>(i == j <span class="keyword">or</span> i == k <span class="keyword">or</span> j == k):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i&#125;</span><span class="subst">&#123;j&#125;</span><span class="subst">&#123;k&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="12、打印乘法口诀表"><a href="#12、打印乘法口诀表" class="headerlink" title="12、打印乘法口诀表"></a>12、打印乘法口诀表</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;\t<span class="subst">&#123;j&#125;</span> * <span class="subst">&#123;i&#125;</span> = <span class="subst">&#123;i * j&#125;</span>&#x27;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="13、水仙花数"><a href="#13、水仙花数" class="headerlink" title="13、水仙花数"></a>13、水仙花数</h3><p>水仙花数：是一个三位数，各位数字立方和等于该数字本身。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 水仙花数：是一个三位数，各位数字立方和等于该数字本身。</span></span><br><span class="line"></span><br><span class="line">num_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>,<span class="number">1000</span>):</span><br><span class="line">    hundred = i // <span class="number">100</span></span><br><span class="line">    ten = i // <span class="number">10</span> % <span class="number">10</span></span><br><span class="line">    piece = i % <span class="number">10</span></span><br><span class="line">    <span class="keyword">if</span> (math.<span class="built_in">pow</span>(hundred,<span class="number">3</span>) + math.<span class="built_in">pow</span>(ten,<span class="number">3</span>)+ math.<span class="built_in">pow</span>(piece,<span class="number">3</span>)) == i:</span><br><span class="line">        num_list.append(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(num_list)</span><br></pre></td></tr></table></figure><h3 id="14、反向输出四位数"><a href="#14、反向输出四位数" class="headerlink" title="14、反向输出四位数"></a>14、反向输出四位数</h3><p>编写程序，输入一个四位整数，反对输出对应四位数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编写程序，输入一个四位整数，反对输出对应四位数</span></span><br><span class="line"></span><br><span class="line">st = <span class="built_in">input</span>(<span class="string">&#x27;请输入一个四位数&#x27;</span>)</span><br><span class="line">st = st[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(st))</span><br></pre></td></tr></table></figure><h3 id="15、判断字母"><a href="#15、判断字母" class="headerlink" title="15、判断字母"></a>15、判断字母</h3><p>编写程序，输入字符，判断是否为字母</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 编写程序，输入字符，判断是否为字母</span><br><span class="line"></span><br><span class="line">a = input(&#x27;请输入字符: &#x27;)</span><br><span class="line">result = a.isalpha()  #  判断字母</span><br><span class="line">if result:</span><br><span class="line">    print(f&#x27;&#123;a&#125;是字母&#x27;)</span><br><span class="line">else:</span><br><span class="line">    print(f&#x27;&#123;a&#125;不是字母&#x27;)</span><br></pre></td></tr></table></figure><h3 id="16、判断三角形"><a href="#16、判断三角形" class="headerlink" title="16、判断三角形"></a>16、判断三角形</h3><p>编写程序，输入三组数据，判断能否构成三角形的三条边</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a, b, c = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a &lt;= <span class="number">0</span> <span class="keyword">or</span> b &lt;= <span class="number">0</span> <span class="keyword">or</span> c &lt;= <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入的数据不合法&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a + b &lt; c <span class="keyword">or</span> a + c &lt; b <span class="keyword">or</span> b + c &lt; a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不构成三角形&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;构成三角形&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="17、完数"><a href="#17、完数" class="headerlink" title="17、完数"></a>17、完数</h3><p>个数如恰好等于除了它以外的因子之和，这个数就称为“完数”。编程序找出1000以内的所有完数，(6是一个”完数”，它的因子是1,2,3)。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1000</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        <span class="keyword">if</span> i % j == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">sum</span> += j</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span> == i:</span><br><span class="line">        <span class="built_in">print</span>(i,<span class="string">&#x27;是完数&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="18、找出质数因子"><a href="#18、找出质数因子" class="headerlink" title="18、找出质数因子"></a>18、找出质数因子</h3><p>输入一个正整数，输出它的所有质数因子(如180的质数因子为2、2、3、3、5)。</p><p>多个素数的乘积</p><p>从第一个数开始，也就是说从2开始，整除一下输入的数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个自然数：&#x27;</span>))</span><br><span class="line">y = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">list1 = []</span><br><span class="line"><span class="keyword">while</span> a != y:</span><br><span class="line">    <span class="keyword">if</span> a % y == <span class="number">0</span>:</span><br><span class="line">         list1.append(y)</span><br><span class="line">         a /= y</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        y += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">list1.append(<span class="built_in">int</span>(a))  <span class="comment"># 最后剩下的a</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="19、海伦公式求三角形面积"><a href="#19、海伦公式求三角形面积" class="headerlink" title="19、海伦公式求三角形面积"></a>19、海伦公式求三角形面积</h3><p>海伦公式是利用三角形的三条边的边长直接求三角形面积的公式</p><p>$$<br>p &#x3D; (a+b+c)&#x2F;2<br>$$</p><p>$$<br>S &#x3D; \sqrt{p(p-a)(p-b)(p-c)}<br>$$</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">p = (a+b+c)/<span class="number">2</span></span><br><span class="line">S = math.sqrt(p * (p-a) * (p-b) * (p-c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;三角形的面积是:&#x27;</span>,<span class="built_in">round</span>(S,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="20、判断某年某天"><a href="#20、判断某年某天" class="headerlink" title="20、判断某年某天"></a>20、判断某年某天</h3><p>输入某年某月某日，判断这一天是这一年的第几天</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># map 把年月日都转成 int类型</span></span><br><span class="line">year,month, day = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&#x27;请输入年月日: &#x27;</span>).split(<span class="string">&#x27;-&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拿到当年的第一天</span></span><br><span class="line">yundan = datetime.datetime(year,<span class="number">1</span>,<span class="number">1</span>) <span class="comment">#</span></span><br><span class="line">now = datetime.datetime(year, month, day)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((now - yundan).days + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h3 id="21、斐波那契数列"><a href="#21、斐波那契数列" class="headerlink" title="21、斐波那契数列"></a>21、斐波那契数列</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 递归</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fib</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span> <span class="keyword">or</span> x == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> fib(x-<span class="number">1</span>) + fib(x-<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fib(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非递归</span></span><br><span class="line">n = <span class="number">6</span></span><br><span class="line">fibs = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">    <span class="comment"># fibs.append(fibs[-1] + fibs[-2])</span></span><br><span class="line">    fibs.append(fibs[i - <span class="number">1</span>] + fibs[i - <span class="number">2</span>])</span><br><span class="line"><span class="built_in">print</span>(fibs[n-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="22、复制列表"><a href="#22、复制列表" class="headerlink" title="22、复制列表"></a>22、复制列表</h3><p>将一个列表中的数据，复制到另一个列表中</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">list2 = copy.copy(list1)</span><br><span class="line"><span class="built_in">print</span>(list2)</span><br><span class="line"></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">lsit2 = list1.copy()</span><br><span class="line"><span class="built_in">print</span>(lsit2)</span><br></pre></td></tr></table></figure><h3 id="23、暂停后输出"><a href="#23、暂停后输出" class="headerlink" title="23、暂停后输出"></a>23、暂停后输出</h3><p>暂停一段时间后输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">time.sleep(1) # 以秒为单位</span><br><span class="line">print(&quot;Hello Python! &quot;)</span><br></pre></td></tr></table></figure><h3 id="24、成绩if语句"><a href="#24、成绩if语句" class="headerlink" title="24、成绩if语句"></a>24、成绩if语句</h3><p>利用条件运算符的嵌套来完成此题:学习成绩&gt;&#x3D;90分的同学用A表示，60-89分之间的用B表示，60分以下的用C表示</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> score = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你的成绩: &#x27;</span>))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    flag = <span class="string">&quot;A&quot;</span></span><br><span class="line"><span class="keyword">elif</span> score &gt;= <span class="number">60</span>:</span><br><span class="line">    flag = <span class="string">&quot;B&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    flag = <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h3 id="25、统计字符"><a href="#25、统计字符" class="headerlink" title="25、统计字符"></a>25、统计字符</h3><p>输入一行字符，分别统计出其中英文字母空格、数字和其它字符的个数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。</span></span><br><span class="line"></span><br><span class="line">string = <span class="built_in">input</span>(<span class="string">&#x27;请输入一段字符串：&#x27;</span>)</span><br><span class="line">char,space,number,other = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        char += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="string">&#x27; &#x27;</span>:</span><br><span class="line">        space += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line"><span class="comment"># 方法二:</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i.isalpha():  <span class="comment"># 判断字符串</span></span><br><span class="line">        char += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isdigit():  <span class="comment"># 判断数字</span></span><br><span class="line">        number += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isspace():  <span class="comment"># 判断空格</span></span><br><span class="line">        space += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        other += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;英文字母有<span class="subst">&#123;char&#125;</span>个,数字有<span class="subst">&#123;number&#125;</span>个,空格有<span class="subst">&#123;space&#125;</span>个,其他字符有<span class="subst">&#123;other&#125;</span>个。&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="26、落体反弹问题"><a href="#26、落体反弹问题" class="headerlink" title="26、落体反弹问题"></a>26、落体反弹问题</h3><p>球从100米高度自由落下，每次落地后反跳回原高度的一半;再落下，求它在第10次落地时，共经过多少米?第10次反弹多高?</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">n = <span class="number">100</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">list1 = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">0</span>: <span class="comment"># 第一次弹跳，马上要落下来</span></span><br><span class="line">        list1.append(n)</span><br><span class="line">        n /= <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        list1.append(<span class="number">2</span> * n)  <span class="comment"># 这是一个 上下的距离</span></span><br><span class="line">        n /= <span class="number">2</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(list1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="comment"># 球的高度</span></span><br><span class="line">height = <span class="number">100</span></span><br><span class="line"><span class="comment"># 落地的次数</span></span><br><span class="line">frequency = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,frequency):</span><br><span class="line">    <span class="built_in">sum</span> += height  <span class="comment"># 落下</span></span><br><span class="line">    height /= <span class="number">2</span></span><br><span class="line">    <span class="built_in">sum</span> += height  <span class="comment"># 上来</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;第<span class="subst">&#123;i&#125;</span>次下落，高度为：<span class="subst">&#123;height&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="27、猴子吃桃问题"><a href="#27、猴子吃桃问题" class="headerlink" title="27、猴子吃桃问题"></a>27、猴子吃桃问题</h3><p>猴子吃桃问题：猴子第一天摘下若干个桃子当即吃了一半，还不瘾，又多吃了一个第天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的半零一个。到第10天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 每天吃了 一半 + 1, 第十天就剩下1个了, 求第一天摘了多少</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    x = (x + <span class="number">1</span>) * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h3 id="28、求指数数列的和"><a href="#28、求指数数列的和" class="headerlink" title="28、求指数数列的和"></a>28、求指数数列的和</h3><p>有一分数序列：2&#x2F;1，3&#x2F;2，5&#x2F;3，8&#x2F;5，13&#x2F;8，21&#x2F;13…求出这个数列的前20项之和。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">fibs = [<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    fibs.append(fibs[-<span class="number">1</span>] + fibs[-<span class="number">2</span>])</span><br><span class="line">    </span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">22</span>):</span><br><span class="line">    <span class="built_in">sum</span> += fibs[i] / fibs[i-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span>  <span class="comment"># 最后的结果</span></span><br><span class="line">up = <span class="number">2</span>  <span class="comment"># 分子</span></span><br><span class="line">down = <span class="number">1</span>  <span class="comment"># 分母</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    <span class="built_in">sum</span> += up/down</span><br><span class="line">    up, down = down + up, up</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="29、求各个阶乘的和"><a href="#29、求各个阶乘的和" class="headerlink" title="29、求各个阶乘的和"></a>29、求各个阶乘的和</h3><p>求1+2!+3!+…+20!的和.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">1</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">21</span>):</span><br><span class="line">    target = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i + <span class="number">1</span>): <span class="comment"># 阶乘包括本身</span></span><br><span class="line">        target *= j</span><br><span class="line">    <span class="built_in">sum</span> += target</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">21</span>):</span><br><span class="line">    <span class="built_in">sum</span> += math.factorial(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure><h3 id="30、年龄急转弯"><a href="#30、年龄急转弯" class="headerlink" title="30、年龄急转弯"></a>30、年龄急转弯</h3><p>有5个人坐在一起，问第五个人多少岁?他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大?</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> func(n - <span class="number">1</span>) + <span class="number">2</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(func(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="31、判断回文数"><a href="#31、判断回文数" class="headerlink" title="31、判断回文数"></a>31、判断回文数</h3><p>输入一个数，判断它是不是回文数。12321是回文数，个位与万位相同，十位与千位相同。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">number = <span class="string">&#x27;12321&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">if</span> number[<span class="number">0</span>] == number[-<span class="number">1</span>] <span class="keyword">and</span> number[<span class="number">1</span>] == number[-<span class="number">2</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">number = <span class="built_in">int</span>(number)</span><br><span class="line">w = number // <span class="number">10000</span></span><br><span class="line">q = number // <span class="number">1000</span> % <span class="number">10</span></span><br><span class="line">ten = number % <span class="number">100</span> // <span class="number">10</span></span><br><span class="line">g = number % <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> q == ten <span class="keyword">and</span> w == g:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是回文数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不是回文数&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">a = <span class="string">&#x27;12321&#x27;</span></span><br><span class="line">b = a[::-<span class="number">1</span>]  <span class="comment"># 字符串反转</span></span><br><span class="line"><span class="keyword">if</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;是回文数&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;不是回文数&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="32、判断星期几"><a href="#32、判断星期几" class="headerlink" title="32、判断星期几"></a>32、判断星期几</h3><p>请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。<br>星期一 Monday、星期二 Tuesday、星期三Wednesday、星期四Thursday、星期五 Friday 、星期六 Saturday、星期日Sunday.</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">weekdays = [<span class="string">&quot;Monday&quot;</span>, <span class="string">&quot;Tuesday&quot;</span>, <span class="string">&quot;Wednesday&quot;</span>, <span class="string">&quot;Thursday&quot;</span>, <span class="string">&quot;Friday&quot;</span>, <span class="string">&quot;Saturday&quot;</span>, <span class="string">&quot;Sunday&quot;</span>]</span><br><span class="line">first_letter = <span class="built_in">input</span>(<span class="string">&quot;请输入星期几的第一个字母（大写）:&quot;</span>)</span><br><span class="line">matched_days = []</span><br><span class="line"><span class="keyword">for</span> day <span class="keyword">in</span> weekdays:</span><br><span class="line">    <span class="keyword">if</span> day[<span class="number">0</span>] == first_letter:</span><br><span class="line">        matched_days.append(day)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(matched_days) == <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;是&quot;</span>, matched_days[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">elif</span> <span class="built_in">len</span>(matched_days) &gt; <span class="number">1</span>:</span><br><span class="line">    second_letter = <span class="built_in">input</span>(<span class="string">&quot;有多个匹配，请输入第二个字母（小写）:&quot;</span>)</span><br><span class="line">    final_matched = []</span><br><span class="line">    <span class="keyword">for</span> m_day <span class="keyword">in</span> matched_days:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(m_day) &gt; <span class="number">1</span> <span class="keyword">and</span> m_day[<span class="number">1</span>] == second_letter:</span><br><span class="line">            final_matched.append(m_day)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(final_matched) == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;是&quot;</span>, final_matched[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;无法准确判断，请输入更详细信息&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="33、相反顺序输出列表"><a href="#33、相反顺序输出列表" class="headerlink" title="33、相反顺序输出列表"></a>33、相反顺序输出列表</h3><p>按相反的顺序输出列表的值。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>]</span><br><span class="line">list1.reverse()  <span class="comment"># 对原本的数据进行修改，没有返回值</span></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="built_in">print</span>(list1[::-<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="34、对十个数进行排序"><a href="#34、对十个数进行排序" class="headerlink" title="34、对十个数进行排序"></a>34、对十个数进行排序</h3><p>对十个数进行排序</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>(<span class="string">&#x27;请输入10个数字&#x27;</span>).split())</span><br><span class="line">a = <span class="built_in">list</span>(a)</span><br><span class="line">a.sort()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="35、求矩阵主对角线元素之和"><a href="#35、求矩阵主对角线元素之和" class="headerlink" title="35、求矩阵主对角线元素之和"></a>35、求矩阵主对角线元素之和</h3><p>求一个3*3矩阵主对角线元素之和</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = []</span><br><span class="line">index = <span class="number">0</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    a.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">        a[i].append(index)</span><br><span class="line">        <span class="comment"># 求对角线元素之和</span></span><br><span class="line">        <span class="keyword">if</span> i == j:</span><br><span class="line">            <span class="built_in">sum</span> += a[i][j]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">arr = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">sum_list = np.diagonal(arr)   <span class="comment"># 把对角线取出来</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(sum_list))</span><br></pre></td></tr></table></figure><h3 id="36、有序列表添加数据"><a href="#36、有序列表添加数据" class="headerlink" title="36、有序列表添加数据"></a>36、有序列表添加数据</h3><p>有一个已经排好的序列。现输入一个数，要求按原来的规律将它插入数组中。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">50</span>]</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入数据:&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> list1[<span class="number">0</span>] &lt; list1[-<span class="number">2</span>]:</span><br><span class="line">    list1.append(n)</span><br><span class="line">    list1.sort()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    list1.append(n)</span><br><span class="line">    list1.sort(reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure><h3 id="37、变量值互换"><a href="#37、变量值互换" class="headerlink" title="37、变量值互换"></a>37、变量值互换</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="number">5</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line">a,b = b,a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">temp = a</span><br><span class="line">a = b</span><br><span class="line">b = temp</span><br></pre></td></tr></table></figure><h3 id="38、产生随机数"><a href="#38、产生随机数" class="headerlink" title="38、产生随机数"></a>38、产生随机数</h3><p>生成随机数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">a = random.random() <span class="comment"># [0,1) float</span></span><br><span class="line">b = random.randint(<span class="number">1</span>,<span class="number">10</span>) <span class="comment"># [1,10] int</span></span><br><span class="line">c = random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">3</span>) <span class="comment"># 比 randint 多了一个步长</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></table></figure><h3 id="39、lambda表达式"><a href="#39、lambda表达式" class="headerlink" title="39、lambda表达式"></a>39、lambda表达式</h3><p>使用lambda来创建匿名函数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">fun = <span class="keyword">lambda</span> x, y: x ** y</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun(<span class="number">2</span>, <span class="number">4</span>))</span><br></pre></td></tr></table></figure><h3 id="40、温度转换"><a href="#40、温度转换" class="headerlink" title="40、温度转换"></a>40、温度转换</h3><p>输入摄氏度，将其转为华氏度</p><p>输入华氏度，将其转为摄氏度。</p><p>华氏温度与摄氏温度转换公式为：</p><p>华氏温度&#x3D;摄氏温度x1.8+32。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>(<span class="string">&#x27;摄氏度请按1,华氏度请按2: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入摄氏度: &#x27;</span>))</span><br><span class="line">    result = b * <span class="number">1.8</span> + <span class="number">32</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;你输入的是摄氏度<span class="subst">&#123;b&#125;</span>, 转换为华氏度是<span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> a == <span class="string">&#x27;2&#x27;</span>:</span><br><span class="line">    b = <span class="built_in">float</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入华氏度: &#x27;</span>))</span><br><span class="line">    result = (b - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;你输入的是华氏度<span class="subst">&#123;b&#125;</span>, 转换为摄氏度是<span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="41、按位与"><a href="#41、按位与" class="headerlink" title="41、按位与"></a>41、按位与</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运算规则: 0&amp;0=0 0&amp;1=0  1&amp;0=0  1&amp;1=1</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3 =&gt; 0011</span></span><br><span class="line"><span class="string">5 =&gt; 0101</span></span><br><span class="line"><span class="string">3 &amp; 5 =&gt; 0001  =&gt; 1</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4 =&gt; 0100</span></span><br><span class="line"><span class="string">12 =&gt; 1100</span></span><br><span class="line"><span class="string">4 &amp; 12 =&gt; 0100  =&gt;4</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> &amp; <span class="number">5</span>) <span class="comment"># 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> &amp; <span class="number">12</span>) <span class="comment"># 4</span></span><br></pre></td></tr></table></figure><h3 id="42、按位或"><a href="#42、按位或" class="headerlink" title="42、按位或"></a>42、按位或</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 运算规则: 0|0=0, 0|1=1, 1|0=1, 1|1=1</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3 =&gt; 0011</span></span><br><span class="line"><span class="string">7 =&gt; 0111</span></span><br><span class="line"><span class="string">3|7 =&gt; 0111 =&gt; 7</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> | <span class="number">7</span>) <span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h3 id="43、按位异或"><a href="#43、按位异或" class="headerlink" title="43、按位异或"></a>43、按位异或</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相同为0，不同为1</span></span><br><span class="line"><span class="comment"># 0^0=0  0^1=1  1^0=1  1^1=0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">3 =&gt; 0011</span></span><br><span class="line"><span class="string">9 =&gt; 1001</span></span><br><span class="line"><span class="string">3^9 =&gt; 1010 =&gt; 10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span> ^ <span class="number">9</span>) <span class="comment"># 10</span></span><br></pre></td></tr></table></figure><h3 id="44、按位取反"><a href="#44、按位取反" class="headerlink" title="44、按位取反"></a>44、按位取反</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 按位取反运算符(~): 对数据的每个二进制位取反,即把0变成1,把1变成0</span></span><br><span class="line"><span class="comment"># ~x = -(x+1)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">9 =&gt; 00001001</span></span><br><span class="line"><span class="string">  =&gt; 11110110</span></span><br><span class="line"><span class="string">  =&gt; 10001001</span></span><br><span class="line"><span class="string">  =&gt; 10001010 在这里加1</span></span><br><span class="line"><span class="string">  =&gt; -10</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">9</span>)  <span class="comment"># -10</span></span><br><span class="line"><span class="built_in">print</span>(~<span class="number">10</span>)  <span class="comment"># -11</span></span><br><span class="line"><span class="built_in">print</span>(~(-<span class="number">3</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="comment"># 用十进制计算:正变负,负变正,然后减1</span></span><br></pre></td></tr></table></figure><h3 id="45、计算机字符串的长度"><a href="#45、计算机字符串的长度" class="headerlink" title="45、计算机字符串的长度"></a>45、计算机字符串的长度</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"></span><br><span class="line">length = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">length += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(length)</span><br></pre></td></tr></table></figure><h3 id="46、杨辉三角"><a href="#46、杨辉三角" class="headerlink" title="46、杨辉三角"></a>46、杨辉三角</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = []  <span class="comment"># 外围</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    a.append([])</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">        a[i].append(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    a[i][<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">    a[i][i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">        a[i][j] = a[i-<span class="number">1</span>][j] + a[i-<span class="number">1</span>][j-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">        <span class="built_in">print</span>(a[i][j], end=<span class="string">&#x27;  &#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="47、查找字符串"><a href="#47、查找字符串" class="headerlink" title="47、查找字符串"></a>47、查找字符串</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">a = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;World&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a.find(b))</span><br></pre></td></tr></table></figure><h3 id="48、猜数字游戏"><a href="#48、猜数字游戏" class="headerlink" title="48、猜数字游戏"></a>48、猜数字游戏</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">target = random.randint(<span class="number">0</span>,<span class="number">99</span>)</span><br><span class="line">times = <span class="number">7</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;猜数字游戏开始,请猜一百以内的整数~&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> times != <span class="number">0</span>:</span><br><span class="line">    num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你要猜的数字: \n&#x27;</span>))</span><br><span class="line">    times -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; target:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜小了&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> num &gt; target:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;猜大了&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;恭喜你才对了,答案是<span class="subst">&#123;target&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> times == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;很遗憾,机会用完了.&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="49、第一个只出现一次的字符"><a href="#49、第一个只出现一次的字符" class="headerlink" title="49、第一个只出现一次的字符"></a>49、第一个只出现一次的字符</h3><p>在一个字符串中找到第一个只出现一次的字符,并返回它的位置,如果没有则返回 -1(需要区分大小写).(从0开始计数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">a = -<span class="number">1</span>  <span class="comment"># 默认为 -1</span></span><br><span class="line">mp = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> mp:</span><br><span class="line">        mp[i] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        mp[i] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">    <span class="keyword">if</span> mp[string[i]] == <span class="number">1</span>:</span><br><span class="line">        a = i</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><h3 id="50、最大公因数"><a href="#50、最大公因数" class="headerlink" title="50、最大公因数"></a>50、最大公因数</h3><p>求最大公因数</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">def</span> <span class="title function_">fun1</span>(<span class="params">a, b</span>): <span class="comment"># 枚举</span></span><br><span class="line">    <span class="keyword">if</span> a == b:  <span class="comment"># 如果两个数一样的话,那么就是他们本身</span></span><br><span class="line">        <span class="keyword">return</span> a</span><br><span class="line">    num = <span class="built_in">min</span>(a,b) <span class="comment"># 记录最小的</span></span><br><span class="line">    <span class="keyword">while</span> a % num != <span class="number">0</span> <span class="keyword">or</span> b % num != <span class="number">0</span>:</span><br><span class="line">        num -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fun1(<span class="number">12</span>,<span class="number">18</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun2</span>(<span class="params">a,b</span>):</span><br><span class="line">    <span class="keyword">while</span> b != <span class="number">0</span>: <span class="comment"># 除法求余</span></span><br><span class="line">        a,b = b,a % b</span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="built_in">print</span>(fun2(<span class="number">12</span>,<span class="number">18</span>))</span><br></pre></td></tr></table></figure><h3 id="51、数组里没有出现过的数字"><a href="#51、数组里没有出现过的数字" class="headerlink" title="51、数组里没有出现过的数字"></a>51、数组里没有出现过的数字</h3><p>给定一个长度为N的正整数数组nums，其中numsm的值都在区间[1,n]中，请你找出nums数组在[1,n]范围里面没有出现过的数字，并将它们放在数组里面返回(在数组里面的顺序可以不唯一)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">nums</span>):</span><br><span class="line">    l = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(nums) + <span class="number">1</span>)]</span><br><span class="line">    <span class="keyword">return</span> [item <span class="keyword">for</span> item <span class="keyword">in</span> l <span class="keyword">if</span> item <span class="keyword">not</span> <span class="keyword">in</span> nums]</span><br><span class="line">func([<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">1</span>,<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="52、替换空格"><a href="#52、替换空格" class="headerlink" title="52、替换空格"></a>52、替换空格</h3><p>将字符串中的空格替换为 <code>%</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;My name is Taichi&quot;</span></span><br><span class="line"><span class="built_in">print</span>(str1.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;%&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">s</span>):</span><br><span class="line">    res = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&quot; &quot;</span>:</span><br><span class="line">            res += <span class="string">&#x27;%&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res += i</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="built_in">print</span>(func(str1))</span><br></pre></td></tr></table></figure><h3 id="53、快乐数"><a href="#53、快乐数" class="headerlink" title="53、快乐数"></a>53、快乐数</h3><p>给定一个正整数，请你判断这个数是不是快乐数快乐数:对于一个正整数，每次把他替换为他每个位置上的数字的平方和，如果这个数能变为1则是快乐数，如果不可能变成1则不是快乐数例如:正整数19转换过程为1<em>1+9</em>9&#x3D;82,8<em>8+2</em>2&#x3D;686<em>6+8</em>8&#x3D;100，1<em>1+0</em>0+0*0&#x3D;1，所以他是快乐数</p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>requests请求模块</title>
      <link href="/2025/02/23/requests%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97/"/>
      <url>/2025/02/23/requests%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Requests是用python语言基于urllib编写的，采用的是Apache2 Licensed开源协议的HTTP库，Requests它会比urllib更加方便，可以节约我们大量的工作。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="先上一串代码"><a href="#先上一串代码" class="headerlink" title="先上一串代码"></a>先上一串代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">response  = requests.get(<span class="string">&quot;https://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response))</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text))</span><br><span class="line"><span class="comment">#获得响应头内容</span></span><br><span class="line"><span class="built_in">print</span>(response.headers)</span><br><span class="line"><span class="built_in">print</span>(response.headers[<span class="string">&#x27;content-type&#x27;</span>])</span><br><span class="line"><span class="comment">#还可以用这种方式获取请求头内容</span></span><br><span class="line"><span class="built_in">print</span>(response.request.headers)</span><br><span class="line"> <span class="comment"># 解决乱码问题</span></span><br><span class="line">response.enconding = <span class="string">&quot;utf-8&#x27; </span></span><br><span class="line"><span class="string">print(response.text)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">print(response.cookies)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">print(response.content)</span></span><br><span class="line"><span class="string">print(response.content.decode(&quot;</span>utf-<span class="number">8</span><span class="string">&quot;))</span></span><br></pre></td></tr></table></figure><ul><li>response.text返回的是Unicode格式，通常需要转换为utf-8格式，否则就是乱码。</li><li>response.content是二进制模式，可以下载视频之类的，如果想看的话需要decode成utf-8格式。</li><li>不管是通过response.content.decode(“utf-8)的方式还是通过response.encoding&#x3D;”utf-8”的方式都可以避免乱码的问题发生</li></ul><h3 id="各种请求方式"><a href="#各种请求方式" class="headerlink" title="各种请求方式"></a>各种请求方式</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests.post(<span class="string">&quot;http://httpbin.org/post&quot;</span>) <span class="comment">#发送post请求</span></span><br><span class="line">requests.put(<span class="string">&quot;http://httpbin.org/put&quot;</span>)  <span class="comment">#提交修改信息</span></span><br><span class="line">requests.patch(<span class="string">&quot;http://httpbin.org/put&quot;</span>)  <span class="comment">#提交局部修改的请求</span></span><br><span class="line">requests.delete(<span class="string">&quot;http://httpbin.org/delete&quot;</span>) <span class="comment"># 提交删除请求</span></span><br><span class="line">requests.head(<span class="string">&quot;http://httpbin.org/get&quot;</span>) <span class="comment">#获取HTML头部信息</span></span><br><span class="line">requests.options(<span class="string">&quot;http://httpbin.org/get&quot;</span>)  </span><br></pre></td></tr></table></figure><h3 id="基本GET"><a href="#基本GET" class="headerlink" title="基本GET"></a>基本GET</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.baidu.com/&#x27;</span></span><br><span class="line">response = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="带参数的GET请求"><a href="#带参数的GET请求" class="headerlink" title="带参数的GET请求"></a>带参数的GET请求</h3><p><code>如果想查询http://httpbin.org/get页面的具体参数，需要在url里面加上，例如我想看有没有Host=httpbin.org这条数据，url形式应该是http://httpbin.org/get?Host=httpbin.org</code></p><p>下面提交的数据是往这个地址传送data里面的数据。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 带参数的get请求</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&#x27;https://tieba.baidu.com/f?&#x27;</span></span><br><span class="line">params = &#123;<span class="string">&#x27;kw&#x27;</span>:<span class="string">&#x27;大学吧&#x27;</span>, <span class="string">&#x27;pn&#x27;</span>:<span class="string">&#x27;3&#x27;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span> : <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64)&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 开始请求</span></span><br><span class="line">html = requests.get(url=url, params=params, headers=headers).text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><h3 id="Json数据"><a href="#Json数据" class="headerlink" title="Json数据"></a>Json数据</h3><p>从下面的数据中我们可以得出，如果结果：</p><p>1、requests中response.json()方法等同于json.loads（response.text）方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"> </span><br><span class="line">response = requests.get(<span class="string">&quot;http://httpbin.org/get&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.text))</span><br><span class="line"><span class="built_in">print</span>(response.json())</span><br><span class="line"><span class="built_in">print</span>(json.loads(response.text))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.json())</span><br><span class="line"><span class="built_in">print</span>(response.json()[<span class="string">&#x27;data&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="获取二进制数据"><a href="#获取二进制数据" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h5><p>在上面提到了response.content，这样获取的数据是二进制数据，同样的这个方法也可以用于下载图片以及视频资源</p><h5 id="添加header"><a href="#添加header" class="headerlink" title="添加header"></a>添加header</h5><p><strong>首先说，为什么要加header（头部信息）呢？例如下面，我们试图访问知乎的登录页面（当然大家都你要是不登录知乎，就看不到里面的内容），我们试试不加header信息会报什么错。</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;https://www.zhihu.com/&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url,headers=headers)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="基本post请求："><a href="#基本post请求：" class="headerlink" title="基本post请求："></a>基本post请求：</h3><p>通过post把数据提交到url地址，等同于一字典的形式提交form表单里面的数据</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;jack&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;23&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">response = requests.post(url,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;form&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;23&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;jack&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;headers&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Accept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*/*&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Accept-Encoding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gzip, deflate&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Connection&quot;</span><span class="punctuation">:</span> <span class="string">&quot;close&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Content-Length&quot;</span><span class="punctuation">:</span> <span class="string">&quot;16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Content-Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;application/x-www-form-urlencoded&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Host&quot;</span><span class="punctuation">:</span> <span class="string">&quot;httpbin.org&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;User-Agent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;python-requests/2.13.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;json&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;origin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;118.144.137.95&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>语法结构</p><p><code>requests.post(url,data=None,json=None)</code></p></li><li><p>参数说明</p><ul><li>url: 需要爬取的网站的网址</li><li>data: 请求数据</li><li>json: json格式的数据</li></ul></li><li><p>案例:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.xslou.com/login.php&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;18600605736&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;57365736&#x27;</span>, <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line">resp = requests.post(url,data)</span><br><span class="line">resp.encoding=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;响应状态码：&#x27;</span>, resp.status_code)   <span class="comment"># 200</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;响应内容&#x27;</span>, resp.text)        <span class="comment"># &lt;html&gt;......&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="响应"><a href="#响应" class="headerlink" title="响应:"></a>响应:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line"><span class="comment">#allow_redirects=False#设置这个属性为False则是不允许重定向，反之可以重定向 </span></span><br><span class="line">response = requests.get(<span class="string">&quot;http://www.baidu.com&quot;</span>,allow_redirects=<span class="literal">False</span>)</span><br><span class="line"><span class="comment">#打印请求页面的状态（状态码）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.status_code),response.status_code)</span><br><span class="line"><span class="comment">#打印请求网址的headers所有信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.headers),response.headers)</span><br><span class="line"><span class="comment">#打印请求网址的cookies信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.cookies),response.cookies)</span><br><span class="line"><span class="comment">#打印请求网址的地址</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.url),response.url)</span><br><span class="line"><span class="comment">#打印请求的历史记录（以列表的形式显示）</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response.history),response.history)</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性或方法</th><th>描述</th></tr></thead><tbody><tr><td>response.status_code</td><td>响应状态码</td></tr><tr><td>response.content</td><td>把response对象转换成二进制数据</td></tr><tr><td>response.text</td><td>把response对象转换成字符串数据</td></tr><tr><td>response.encoding</td><td>定义response对象的编码</td></tr><tr><td>response.cookie</td><td>获取请求后的cookie</td></tr><tr><td>response.url</td><td>获取请求网址</td></tr><tr><td>response.json()</td><td>内置的json解码器</td></tr><tr><td>response.headers</td><td>以字典对象存储服务器响应头,字典不区分大小写</td></tr></tbody></table><h3 id="内置的状态码"><a href="#内置的状态码" class="headerlink" title="内置的状态码:"></a>内置的状态码:</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="number">100</span><span class="punctuation">:</span> (&#x27;continue&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">101</span><span class="punctuation">:</span> (&#x27;switching_protocols&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">102</span><span class="punctuation">:</span> (&#x27;processing&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">103</span><span class="punctuation">:</span> (&#x27;checkpoint&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">122</span><span class="punctuation">:</span> (&#x27;uri_too_long&#x27;<span class="punctuation">,</span> &#x27;request_uri_too_long&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">200</span><span class="punctuation">:</span> (&#x27;ok&#x27;<span class="punctuation">,</span> &#x27;okay&#x27;<span class="punctuation">,</span> &#x27;all_ok&#x27;<span class="punctuation">,</span> &#x27;all_okay&#x27;<span class="punctuation">,</span> &#x27;all_good&#x27;<span class="punctuation">,</span> &#x27;\\o/&#x27;<span class="punctuation">,</span> &#x27;✓&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">201</span><span class="punctuation">:</span> (&#x27;created&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">202</span><span class="punctuation">:</span> (&#x27;accepted&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">203</span><span class="punctuation">:</span> (&#x27;non_authoritative_info&#x27;<span class="punctuation">,</span> &#x27;non_authoritative_information&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">204</span><span class="punctuation">:</span> (&#x27;no_content&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">205</span><span class="punctuation">:</span> (&#x27;reset_content&#x27;<span class="punctuation">,</span> &#x27;reset&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">206</span><span class="punctuation">:</span> (&#x27;partial_content&#x27;<span class="punctuation">,</span> &#x27;partial&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">207</span><span class="punctuation">:</span> (&#x27;multi_status&#x27;<span class="punctuation">,</span> &#x27;multiple_status&#x27;<span class="punctuation">,</span> &#x27;multi_stati&#x27;<span class="punctuation">,</span> &#x27;multiple_stati&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">208</span><span class="punctuation">:</span> (&#x27;already_reported&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">226</span><span class="punctuation">:</span> (&#x27;im_used&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"># Redirection.</span><br><span class="line"><span class="number">300</span><span class="punctuation">:</span> (&#x27;multiple_choices&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">301</span><span class="punctuation">:</span> (&#x27;moved_permanently&#x27;<span class="punctuation">,</span> &#x27;moved&#x27;<span class="punctuation">,</span> &#x27;\\o-&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">302</span><span class="punctuation">:</span> (&#x27;found&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">303</span><span class="punctuation">:</span> (&#x27;see_other&#x27;<span class="punctuation">,</span> &#x27;other&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">304</span><span class="punctuation">:</span> (&#x27;not_modified&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">305</span><span class="punctuation">:</span> (&#x27;use_proxy&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">306</span><span class="punctuation">:</span> (&#x27;switch_proxy&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">307</span><span class="punctuation">:</span> (&#x27;temporary_redirect&#x27;<span class="punctuation">,</span> &#x27;temporary_moved&#x27;<span class="punctuation">,</span> &#x27;temporary&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">308</span><span class="punctuation">:</span> (&#x27;permanent_redirect&#x27;<span class="punctuation">,</span></span><br><span class="line">      &#x27;resume_incomplete&#x27;<span class="punctuation">,</span> &#x27;resume&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span> # These <span class="number">2</span> to be removed in <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"># Client Error.</span><br><span class="line"><span class="number">400</span><span class="punctuation">:</span> (&#x27;bad_request&#x27;<span class="punctuation">,</span> &#x27;bad&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">401</span><span class="punctuation">:</span> (&#x27;unauthorized&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">402</span><span class="punctuation">:</span> (&#x27;payment_required&#x27;<span class="punctuation">,</span> &#x27;payment&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">403</span><span class="punctuation">:</span> (&#x27;forbidden&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">404</span><span class="punctuation">:</span> (&#x27;not_found&#x27;<span class="punctuation">,</span> &#x27;-o-&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">405</span><span class="punctuation">:</span> (&#x27;method_not_allowed&#x27;<span class="punctuation">,</span> &#x27;not_allowed&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">406</span><span class="punctuation">:</span> (&#x27;not_acceptable&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">407</span><span class="punctuation">:</span> (&#x27;proxy_authentication_required&#x27;<span class="punctuation">,</span> &#x27;proxy_auth&#x27;<span class="punctuation">,</span> &#x27;proxy_authentication&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">408</span><span class="punctuation">:</span> (&#x27;request_timeout&#x27;<span class="punctuation">,</span> &#x27;timeout&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">409</span><span class="punctuation">:</span> (&#x27;conflict&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">410</span><span class="punctuation">:</span> (&#x27;gone&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">411</span><span class="punctuation">:</span> (&#x27;length_required&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">412</span><span class="punctuation">:</span> (&#x27;precondition_failed&#x27;<span class="punctuation">,</span> &#x27;precondition&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">413</span><span class="punctuation">:</span> (&#x27;request_entity_too_large&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">414</span><span class="punctuation">:</span> (&#x27;request_uri_too_large&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">415</span><span class="punctuation">:</span> (&#x27;unsupported_media_type&#x27;<span class="punctuation">,</span> &#x27;unsupported_media&#x27;<span class="punctuation">,</span> &#x27;media_type&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">416</span><span class="punctuation">:</span> (&#x27;requested_range_not_satisfiable&#x27;<span class="punctuation">,</span> &#x27;requested_range&#x27;<span class="punctuation">,</span> &#x27;range_not_satisfiable&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">417</span><span class="punctuation">:</span> (&#x27;expectation_failed&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">418</span><span class="punctuation">:</span> (&#x27;im_a_teapot&#x27;<span class="punctuation">,</span> &#x27;teapot&#x27;<span class="punctuation">,</span> &#x27;i_am_a_teapot&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">421</span><span class="punctuation">:</span> (&#x27;misdirected_request&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">422</span><span class="punctuation">:</span> (&#x27;unprocessable_entity&#x27;<span class="punctuation">,</span> &#x27;unprocessable&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">423</span><span class="punctuation">:</span> (&#x27;locked&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">424</span><span class="punctuation">:</span> (&#x27;failed_dependency&#x27;<span class="punctuation">,</span> &#x27;dependency&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">425</span><span class="punctuation">:</span> (&#x27;unordered_collection&#x27;<span class="punctuation">,</span> &#x27;unordered&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">426</span><span class="punctuation">:</span> (&#x27;upgrade_required&#x27;<span class="punctuation">,</span> &#x27;upgrade&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">428</span><span class="punctuation">:</span> (&#x27;precondition_required&#x27;<span class="punctuation">,</span> &#x27;precondition&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">429</span><span class="punctuation">:</span> (&#x27;too_many_requests&#x27;<span class="punctuation">,</span> &#x27;too_many&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">431</span><span class="punctuation">:</span> (&#x27;header_fields_too_large&#x27;<span class="punctuation">,</span> &#x27;fields_too_large&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">444</span><span class="punctuation">:</span> (&#x27;no_response&#x27;<span class="punctuation">,</span> &#x27;none&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">449</span><span class="punctuation">:</span> (&#x27;retry_with&#x27;<span class="punctuation">,</span> &#x27;retry&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">450</span><span class="punctuation">:</span> (&#x27;blocked_by_windows_parental_controls&#x27;<span class="punctuation">,</span> &#x27;parental_controls&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">451</span><span class="punctuation">:</span> (&#x27;unavailable_for_legal_reasons&#x27;<span class="punctuation">,</span> &#x27;legal_reasons&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">499</span><span class="punctuation">:</span> (&#x27;client_closed_request&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"># Server Error.</span><br><span class="line"><span class="number">500</span><span class="punctuation">:</span> (&#x27;internal_server_error&#x27;<span class="punctuation">,</span> &#x27;server_error&#x27;<span class="punctuation">,</span> &#x27;/o\\&#x27;<span class="punctuation">,</span> &#x27;✗&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">501</span><span class="punctuation">:</span> (&#x27;not_implemented&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">502</span><span class="punctuation">:</span> (&#x27;bad_gateway&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">503</span><span class="punctuation">:</span> (&#x27;service_unavailable&#x27;<span class="punctuation">,</span> &#x27;unavailable&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">504</span><span class="punctuation">:</span> (&#x27;gateway_timeout&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">505</span><span class="punctuation">:</span> (&#x27;http_version_not_supported&#x27;<span class="punctuation">,</span> &#x27;http_version&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">506</span><span class="punctuation">:</span> (&#x27;variant_also_negotiates&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">507</span><span class="punctuation">:</span> (&#x27;insufficient_storage&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">509</span><span class="punctuation">:</span> (&#x27;bandwidth_limit_exceeded&#x27;<span class="punctuation">,</span> &#x27;bandwidth&#x27;)<span class="punctuation">,</span></span><br><span class="line"><span class="number">510</span><span class="punctuation">:</span> (&#x27;not_extended&#x27;<span class="punctuation">,</span>)<span class="punctuation">,</span></span><br><span class="line"><span class="number">511</span><span class="punctuation">:</span> (&#x27;network_authentication_required&#x27;<span class="punctuation">,</span> &#x27;network_auth&#x27;<span class="punctuation">,</span> &#x27;network_authentication&#x27;)<span class="punctuation">,</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.jianshu.com/404.html&#x27;</span>)</span><br><span class="line"><span class="comment"># 使用request内置的字母判断状态码</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果response返回的状态码是非正常的就返回404错误</span></span><br><span class="line"><span class="keyword">if</span> response.status_code != requests.codes.ok:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;404&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果页面返回的状态码是200，就打印下面的状态</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://www.jianshu.com&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;200&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="request-高级操作"><a href="#request-高级操作" class="headerlink" title="request 高级操作"></a>request 高级操作</h3><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">&quot;http://httpbin.org/post&quot;</span></span><br><span class="line">files= &#123;<span class="string">&quot;files&quot;</span>:<span class="built_in">open</span>(<span class="string">&quot;test.jpg&quot;</span>,<span class="string">&quot;rb&quot;</span>)&#125;</span><br><span class="line">response = requests.post(url,files=files)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h3 id="获取cookie"><a href="#获取cookie" class="headerlink" title="获取cookie"></a>获取cookie</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">response = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.cookies)</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> response.cookies.items():</span><br><span class="line">    <span class="built_in">print</span>(key,<span class="string">&#x27;==&#x27;</span>,value)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h3><p>cookie的一个作用就是可以用于模拟登录，做会话保持</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">session = requests.session()</span><br><span class="line">session.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/12456&#x27;</span>)</span><br><span class="line">response = session.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><h4 id="cookie-和-session-区别"><a href="#cookie-和-session-区别" class="headerlink" title="cookie 和 session 区别"></a>cookie 和 session 区别</h4><ul><li>cookie数据存放在客户的浏览器上，session数据放在服务器上</li><li>cookie不是很安全，别人可以分析存放在本地的cookie并进行cookie欺骗</li><li>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能</li><li>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie</li></ul><h4 id="session发送请求后-实现登录后继续访问"><a href="#session发送请求后-实现登录后继续访问" class="headerlink" title="session发送请求后,实现登录后继续访问"></a>session发送请求后,实现登录后继续访问</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.xslou.com/login.php&#x27;</span></span><br><span class="line">data=&#123;<span class="string">&#x27;username&#x27;</span>:<span class="string">&#x27;18600605736&#x27;</span>, <span class="string">&#x27;password&#x27;</span>:<span class="string">&#x27;57365736&#x27;</span>, <span class="string">&#x27;action&#x27;</span>:<span class="string">&#x27;login&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 使用session发送请求</span></span><br><span class="line">session = requests.session()</span><br><span class="line">resp=session.post(url,data=data)    <span class="comment"># 使用session发送post请求</span></span><br><span class="line">resp.encoding=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="comment"># print( resp.text)        # &lt;html&gt;..&lt;title&gt;登录成功&lt;/title&gt;....&lt;/html&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 推荐小说      # 推荐成功的链接</span></span><br><span class="line">hot_url=<span class="string">&#x27;https://www.xslou.com/modules/article/uservote.php?id=71960&#x27;</span></span><br><span class="line">resp2=session.get(hot_url)    <span class="comment"># 使用session发送get请求</span></span><br><span class="line">resp2.encoding=<span class="string">&#x27;gb2312&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(resp2.text)        <span class="comment"># &lt;html&gt;..&lt;title&gt;处理成功&lt;/title&gt;....&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SSL证书认证参数-verify"><a href="#SSL证书认证参数-verify" class="headerlink" title="SSL证书认证参数 verify"></a>SSL证书认证参数 verify</h4><ul><li>参数值：True（默认）| False</li><li>适用网站：https类型网站但是没有经过 证书认证机构 认证的网站</li><li>适用场景：当程序中抛出SSLError异常则考虑使用此参数</li><li>使用示例：<code>requests.get(url=url,headers=headers,verify=False)</code></li><li>当verify参数设置为False时，则不会再对网站进行SSL证书认证</li></ul><h4 id="设置超时时间-timeout"><a href="#设置超时时间-timeout" class="headerlink" title="设置超时时间 timeout"></a>设置超时时间 timeout</h4><p>我们可以通过timeout属性设置超时时间，一旦超过这个时间还没获得响应内容，就会提示错误。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">requests.get(<span class="string">&#x27;http://github.com&#x27;</span>, timeout=<span class="number">0.001</span>)</span><br><span class="line"> </span><br><span class="line">---------------------以下为输出结果（报错）---------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">requests.exceptions.Timeout: HTTPConnectionPool(host=<span class="string">&#x27;github.com&#x27;</span>, port=<span class="number">80</span>): Request timed out. (timeout=<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure><h4 id="代理IP参数-proxies"><a href="#代理IP参数-proxies" class="headerlink" title="代理IP参数 proxies"></a>代理IP参数 proxies</h4><ul><li><p>语法格式：<strong>proxies &#x3D; { ‘协议’:’协议:&#x2F;&#x2F;IP:端口号’}</strong></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://IP:端口号&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;http://IP:端口号&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当我们抓取的地址为http时，则会选择proxies中http的代理，反之为https</p></li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/get&#x27;</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 定义代理，再代理IP网站中查找免费代理IP</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://112.85.164.220:9999&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;https://112.85.164.220:9999&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">html = requests.get(url=url,proxies=proxies,headers=headers,timeout=<span class="number">5</span>).text</span><br><span class="line"><span class="built_in">print</span>(html)</span><br></pre></td></tr></table></figure><p><em><strong>*私密代理和独享代理*</strong></em></p><ul><li><p>语法格式: <strong><u>proxies &#x3D; {‘协议’:’协议:&#x2F;&#x2F;用户名:密码@IP:端口号’}</u></strong></p></li><li><p>示例：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">proxies = &#123;</span><br><span class="line"><span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;http://用户名:密码@IP:端口号&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;http://用户名:密码@IP:端口号&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>当我们抓取的地址为http时，则会选择proxies中http的代理，反之为https</p></li></ul><h3 id="获取二进制数据-1"><a href="#获取二进制数据-1" class="headerlink" title="获取二进制数据"></a>获取二进制数据</h3><p>一般来说，对于非文本请求，可以以字节形式访问响应正文。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取二进制数据</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 案例：保存百度图片</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url=<span class="string">&#x27;https://www.baidu.com/img/bd_logo1.png&#x27;</span></span><br><span class="line">resp=requests.get(url)</span><br><span class="line"><span class="comment"># 存储</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;logo.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># resp.content：把response对象转换为二进制数据</span></span><br><span class="line">    file.write(resp.content)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试平台笔记</title>
      <link href="/2024/12/29/Python%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/12/29/Python%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="模块-语法基础与算法分析"><a href="#模块-语法基础与算法分析" class="headerlink" title="模块- 语法基础与算法分析"></a>模块- 语法基础与算法分析</h1><h3 id="1-1-求两数之和"><a href="#1-1-求两数之和" class="headerlink" title="1.1:求两数之和"></a>1.1:求两数之和</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出“和”为目标值的两个整数，并返回他们的数组下标。</span><br><span class="line">你可以假设每种输入只会对应一个答案，数组中元素不能重复输入。</span><br><span class="line">请根据上面的要求，编写相应的算法，将右边的函数 twoSum() 补充完整。</span><br><span class="line">举例</span><br><span class="line">给定 nums = [2, 7, 11, 15]，target = 9；</span><br><span class="line">nums[0] + nums[1] = 2 + 7 = 9，返回[0, 1]。</span><br><span class="line">任务要求</span><br><span class="line">1. 代码编写必须在右边指定的区域编写；</span><br><span class="line">2. 函数接收两个变量，一个是整数数组 nums：list，另一个是目标值 target: int；</span><br><span class="line">3. 如果存在两种或以上符合目标值 target 的情况，返回下标相加之和较小的数组；</span><br><span class="line"></span><br><span class="line">4. 函数返回的值必须为一个数组，list数据类型，元素排序为正序排序，如返回 [1, 3] 符合条件，[3, 1] 不符合条件。</span><br><span class="line">测试用例</span><br><span class="line">用例一</span><br><span class="line">输入：[2，3，2，4], 7</span><br><span class="line">输出：[1, 3]</span><br><span class="line"></span><br><span class="line">用例二</span><br><span class="line">输入：[2, 6, 7, 7], 9</span><br><span class="line">输出：[0, 2]</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, arr:<span class="type">List</span>[<span class="built_in">int</span>],target:<span class="built_in">int</span></span>) -&gt; <span class="type">List</span>[<span class="built_in">int</span>]:</span><br><span class="line">        k = <span class="built_in">len</span>(arr)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,k):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,k):</span><br><span class="line">                <span class="keyword">if</span> arr[i] + arr[j] == target:</span><br><span class="line">                    <span class="keyword">return</span> [i,j]</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">arr = [<span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br><span class="line">target = <span class="number">9</span></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.twoSum(arr=arr, target=target)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="1-2-判断数组重复元素"><a href="#1-2-判断数组重复元素" class="headerlink" title="1.2:判断数组重复元素"></a>1.2:判断数组重复元素</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">编写一个函数 arrayRepeat()，对于任意输入的一个整数数组，如果整数数组中存在重复元素且重复元素均不相邻，函数返回 字符&quot;01&quot;；</span><br><span class="line">如果整数数组每个元素均不相同且偶数元素个数大于奇数元素个数，函数返回字符&quot;02&quot;；</span><br><span class="line">如果整数数组均不满足上述两个条件，函数返回字符 &quot;03&quot;</span><br><span class="line">任务要求</span><br><span class="line">1. 代码编写必须在右边指定的区域编写；</span><br><span class="line">2. 函数接收一个变量 arr，list 数据类型；</span><br><span class="line">3. 函数返回值必须为字符串数据类型。</span><br><span class="line">测试用例 </span><br><span class="line">输入：[1, 2, 6, 4, 6]    输出：&#x27;01&#x27;；</span><br><span class="line">输入：[2, 3, 8, 5, 6]    输出：&#x27;02&#x27;；</span><br><span class="line">输入：[2, 2, 5, 3, 5]    输出：&#x27;03&#x27;；</span><br><span class="line">输入：[0, 0, 0, 0, 0]    输出：&#x27;03&#x27;。</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrayRepeat</span>(<span class="params">self, arr:<span class="type">List</span>[<span class="built_in">int</span>]</span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(arr) == <span class="built_in">len</span>(<span class="built_in">set</span>(arr)): <span class="comment"># 无重复</span></span><br><span class="line">            o,j = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">2</span>:</span><br><span class="line">                    j += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    o += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> o &gt; j: <span class="keyword">return</span> <span class="string">&#x27;02&#x27;</span></span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 有重复</span></span><br><span class="line">            <span class="comment"># 重复元素均不相邻</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr) - <span class="number">1</span>):</span><br><span class="line">                <span class="keyword">if</span> arr[i] == arr[i+<span class="number">1</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&#x27;03&#x27;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;01&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;03&#x27;</span></span><br><span class="line"></span><br><span class="line">test = [</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">6</span>], <span class="comment"># 1</span></span><br><span class="line">    [<span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">5</span>, <span class="number">6</span>], <span class="comment"># 2</span></span><br><span class="line">    [<span class="number">2</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>], <span class="comment"># 3</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]  <span class="comment"># 3</span></span><br><span class="line">]</span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.arrayRepeat(test[<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><h3 id="1-3-简单数学公式"><a href="#1-3-简单数学公式" class="headerlink" title="1.3:简单数学公式"></a>1.3:简单数学公式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">编写Python程序计算下列数学表达式的结果并输出，结果向上取整保留整数。</span><br><span class="line">res = √(( 3 ^ 4 + 5 * 6 ^ 5) / num)</span><br><span class="line">程序接收变量 num，返回的是 res。</span><br><span class="line">注明：</span><br><span class="line">* 代表乘。如 2 * 3 代表2乘以3，结果是 6；</span><br><span class="line">^ 代表次方。如2 ^ 3代表2的3次方，结果是 8。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收 int 类型的变量 num，返回结果 res 数据类型是 int。</span><br><span class="line">测试用例</span><br><span class="line">输入：30        输出：37</span><br><span class="line">解释：√((3^4+5*6^5)/30)=36.03...，向上取整结果是37。</span><br><span class="line"></span><br><span class="line">输入：5          输出：89</span><br><span class="line">解释：√((3^4+5*6^5)/5)=88.27...，向上取整结果是89。</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">function</span>(<span class="params">self, num:<span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> math.ceil(math.sqrt(( <span class="number">3</span> ** <span class="number">4</span> + <span class="number">5</span> * <span class="number">6</span> ** <span class="number">5</span>) / num))</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.function(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><ul><li>向上取整：math.ceil()</li><li>向下取整：math.floor()、整除”&#x2F;&#x2F;“</li><li>四舍五入：round()——<em><strong>*奇数向远离0取整，偶数去尾取整；或言之：奇数进位，偶数去尾*</strong></em></li><li>向0取整：int()</li></ul><h3 id="1-4-句子拼写检查-25年原题"><a href="#1-4-句子拼写检查-25年原题" class="headerlink" title="1.4:句子拼写检查(25年原题)"></a>1.4:句子拼写检查(25年原题)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一段英文句子，判断句中单词拼写是否满足以下规则。</span><br><span class="line">除以下特殊情况外，句子中第一个单词首字母必须大写，其它所有单词小写：</span><br><span class="line">1. 如果句中的某个单词或短语，字母全部为大写，则该单词或短语拼写正确。比如“USA”、“UK”、“JUST  DO  IT”等；</span><br><span class="line">2. “Python”、“Java”、“MachineLearning”、“DataMining”四个单词必须为双引号中给出的形式，否则拼写不正确；</span><br><span class="line">3. 如果句中单词为“数字+字母”的混合形式，比如“5G”，该单词所有字母全部大写。</span><br><span class="line">任务要求</span><br><span class="line">1. 输入英文句子为 str 类型，输出为 bool 类型；</span><br><span class="line">2. 如果句子满足规则要求，程序返回结果为 True；否则返回 False。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;I love Python&#x27;        输出：True</span><br><span class="line">输入：&#x27;python love me&#x27;        输出：False</span><br><span class="line">输入： &#x27;JUST DO IT&#x27;        输出：True</span><br><span class="line">输入： &#x27;I come from HK&#x27;        输出：True</span><br><span class="line">输入： &#x27;Machinelearning is so hot&#x27;        输出：False</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="1-5-重复子字符串"><a href="#1-5-重复子字符串" class="headerlink" title="1.5:重复子字符串"></a>1.5:重复子字符串</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个字符串 s，判断它是否由它的子串重复多次构成。如果由子串重复多次构成，输出子串，否则输出整个字符串。</span><br><span class="line">任务要求</span><br><span class="line">给定字符串 s 为 str 类型，输出字符串为 str 类型。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;abcabc&#x27;</span><br><span class="line">输出：&#x27;abc&#x27;</span><br><span class="line"></span><br><span class="line">输入：&#x27;abefd&#x27;</span><br><span class="line">输出：&#x27;abefd&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">输入：&#x27;&#x27;</span><br><span class="line">输出：&#x27;&#x27;</span><br></pre></td></tr></table></figure><h3 id="动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数-25年原题"><a href="#动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数-25年原题" class="headerlink" title="动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数(25年原题)"></a>动态规划求解：将字符串A变换为字符串B所用的最少字符操作次数(25年原题)</h3><blockquote><p>问题描述：<br>设A 和B 是2 个字符串。要用最少的字符操作将字符串A 转换为字符串B。<br>这里所说的字符操作包括<br>(1)删除一个字符；<br>(2)插入一个字符；<br>(3)将一个字符改为另一个字符。<br>将字符串A变换为字符串B 所用的最少字符操作次数也称为字符串A到B 的编辑距离，记为 D(A,B)。<br>试设计一个有效算法，对任给的2 个字符串A和B，计算出它们的编辑距离D(A,B)。</p></blockquote><h1 id="模块二-网页处理与文本分析"><a href="#模块二-网页处理与文本分析" class="headerlink" title="模块二 网页处理与文本分析"></a>模块二 网页处理与文本分析</h1><h3 id="2-1-选取网页表格中的数字"><a href="#2-1-选取网页表格中的数字" class="headerlink" title="2.1:选取网页表格中的数字"></a>2.1:选取网页表格中的数字</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个由表格构成的网页，返回指定位置中的数字，数字类型要转换为 int 类型。</span><br><span class="line">后台给出指定位置，位置由行（row）和列（col）构成，如 row = 2, col = 1, 表示第二行第一列，对应的数字是 249；</span><br><span class="line">程序返回的数字必须是 int 类型，类型不正确将导致结果不正确；</span><br><span class="line">后台给出的所有的位置都在表格中，无需考虑边界情况；</span><br><span class="line">表格的第一行是列名，由 A-Z 构成，共 26 列；第一列是行索引，由 1-30 构成，共 30 行。</span><br><span class="line">任务要求</span><br><span class="line">程序给出 int 类型的参数 row 和 col；</span><br><span class="line">程序返回参数是 int 类型。</span><br><span class="line">测试用例</span><br><span class="line">输入：row=29, col=20</span><br><span class="line">输出：252</span><br><span class="line">解释：表格第 29 行第 20 列中的数字是 252</span><br><span class="line">输入：row=23, col=15</span><br><span class="line">输出：582</span><br><span class="line">解释：表格第 23 行第 15 列中的数字是 252</span><br><span class="line">输入：row=10, col=11</span><br><span class="line">输出：219</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/random-num/index.html</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self, row: <span class="built_in">int</span>, col: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/random-num/index.html&#x27;</span></span><br><span class="line">responese = requests.get(url=url)</span><br><span class="line">responese.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(responese.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">trs = bs.select(<span class="string">&#x27;body &gt; table &gt; tbody:nth-child(2) &gt; tr&#x27;</span>)</span><br><span class="line">res = trs[row-<span class="number">1</span>].select(<span class="string">&#x27;td&#x27;</span>)[col].get_text()</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">int</span>(res)</span><br><span class="line">    </span><br><span class="line">solu = Solution()</span><br><span class="line"><span class="built_in">print</span>(solu.fun(<span class="number">23</span>,<span class="number">15</span>))</span><br></pre></td></tr></table></figure><h3 id="2-2-商品信息关键词权重计算"><a href="#2-2-商品信息关键词权重计算" class="headerlink" title="2.2:商品信息关键词权重计算"></a>2.2:商品信息关键词权重计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line"></span><br><span class="line">根据提供的商品文本信息，对商品的标题内容、属性内容和描述内容进行分词（不包含标题和商品的属性名），完成文本分析工作。</span><br><span class="line">请根据以上要求，将以下所需的函数补充完整。</span><br><span class="line">本任务提供了 jieba 中文分词库和 requests 库。</span><br><span class="line">任务要求</span><br><span class="line">1. 构建函数 wordTfidf()，对商品中关键词，计算其TF-IDF值；</span><br><span class="line">2. 返回文本中 TF-IDF 最大的前5个关键词，返回结果为 list 数据类型；</span><br><span class="line">3. 只保留词性为 n、nr、ns 的关键词；</span><br><span class="line">4. 下方给出的文本编码为UTF-8。</span><br><span class="line">测试用例</span><br><span class="line">输入：任务中商品信息</span><br><span class="line">输出：[&#x27;裙子&#x27;, &#x27;***&#x27;, &#x27;***&#x27;, ...]</span><br><span class="line">（此处隐藏剩余四个关键词的数据）</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/61/fj_chiffon_lady_dress.txt</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><p>对商品中关键词，计算其TF-IDF值；</p><p>返回文本中 TF-IDF 最大的前5个关键词，返回结果为 list 数据类型；</p><p> 只保留词性为 n、nr、ns 的关键词；</p></blockquote><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 运行或提交代码不需要自己编写测试用例，后台自动进行测试检查。</span></span><br><span class="line"><span class="comment"># 2. 您编写代码的区域需要限制在Solution类或其他类和函数体内，保证输入与输出符合任务要求即可。</span></span><br><span class="line"><span class="comment"># 3. 点击“提交代码”按钮，系统将查看程序是否正确，并保存代码，记录任务数据。</span></span><br><span class="line"><span class="comment"># 4. 提交代码次数越多，任务得分越低。</span></span><br><span class="line"><span class="comment"># 5. 点击右上方“结束任务”按钮，系统将在后台计算任务得分，任务结束。</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> jieba <span class="keyword">import</span> analyse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordTfidf</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/61/fj_chiffon_lady_dress.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        <span class="comment"># 使用jieba的analyse模块的extract_tags函数来提取关键词</span></span><br><span class="line">        <span class="comment"># zt.text是从网页获取到的文本内容</span></span><br><span class="line">        <span class="comment"># topK=5表示只提取最重要的5个关键词</span></span><br><span class="line">        <span class="comment"># allowPOS=(&quot;n&quot;, &quot;nr&quot;, &quot;ns&quot;)表示只提取名词、人名、地名这几种词性的关键词</span></span><br><span class="line">        jg = jieba.analyse.extract_tags(zt.text,topK=<span class="number">5</span>,allowPOS=(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;nr&quot;</span>,<span class="string">&quot;ns&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> jg</span><br></pre></td></tr></table></figure><h3 id="2-3-微信公众号排行榜分析-25年原题"><a href="#2-3-微信公众号排行榜分析-25年原题" class="headerlink" title="2.3:微信公众号排行榜分析(25年原题)"></a>2.3:微信公众号排行榜分析(25年原题)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">下方的网页为微信公共号数据分析展示页，网页数量为1。</span><br><span class="line">请根据网页给出的信息，完成以下任务，将右边的函数 weixinData() 补充完整。</span><br><span class="line">给定原创排行榜里任一微信公众号的名称，请判断该公众号是否满足以下条件：</span><br><span class="line">1.“头条平均阅读”数 &gt; 90000</span><br><span class="line">2.“原创平均阅读”数 &gt; 80000</span><br><span class="line">3.“预估活跃粉丝”数 &lt; 300万</span><br><span class="line">如果满足，函数 weixinData() 返回大写英文单词“YES”，否则返回“NO”。</span><br><span class="line">任务要求</span><br><span class="line">1. 函数接收 str 数据类型的微信公众号名称 name；</span><br><span class="line">2. 函数返回为英文字符“YES”或“NO”，返回参数为 str 数据类型；</span><br><span class="line">3. 不得修改函数 weixinData() 的名称；</span><br><span class="line">4. 题目所需网站链接已经在下方给出，编码方式为UTF-8。</span><br><span class="line">测试用例</span><br><span class="line">输入：“占豪”            输出：“NO”</span><br><span class="line">输入：“Vista看天下” 输出：“YES”</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/weixindata.html</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weixinData</span>(<span class="params">self, name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        data_list = &#123;&#125;</span><br><span class="line">        url:<span class="built_in">str</span> = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/weixindata.html&#x27;</span></span><br><span class="line">        response = requests.get(url=url)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="comment"># print(response)</span></span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        table = soup.find_all(<span class="string">&#x27;table&#x27;</span>, class_=<span class="string">&#x27;table&#x27;</span>)</span><br><span class="line">        trs = table[<span class="number">1</span>].find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line">            tds = tr.find_all(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">            wxname = tds[<span class="number">1</span>].select(<span class="string">&#x27;span &gt; span&#x27;</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">            <span class="comment"># 头条平均阅读 , 原创平均阅读 , 预估活跃粉丝</span></span><br><span class="line">            data_list[wxname] = [tds[<span class="number">4</span>].get_text(), tds[<span class="number">7</span>].get_text(), tds[<span class="number">3</span>].get_text()]</span><br><span class="line">        <span class="built_in">print</span>(data_list)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> data_list.keys():</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">        <span class="comment"># 当前名字</span></span><br><span class="line">        acdata = data_list[name]</span><br><span class="line">        <span class="comment"># print(acdata)</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(acdata)):</span><br><span class="line">            <span class="keyword">if</span> acdata[i][-<span class="number">2</span>:] == <span class="string">&#x27;万+&#x27;</span>:</span><br><span class="line">                acdata[i] = acdata[i].split(<span class="string">&#x27;万&#x27;</span>)[<span class="number">0</span>] + <span class="string">&#x27;00000&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> acdata[i]:</span><br><span class="line">                acdata[i] = acdata[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">            acdata[i] = <span class="built_in">int</span>(acdata[i])</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 头条平均阅读 &gt; 9万</span></span><br><span class="line">        <span class="comment"># 原创平均阅读 &gt; 8万</span></span><br><span class="line">        <span class="comment"># 预估活跃粉丝 &lt; 300万</span></span><br><span class="line">        <span class="keyword">if</span> (acdata[<span class="number">0</span>] &gt; <span class="number">900000</span>) <span class="keyword">and</span> (acdata[<span class="number">1</span>] &gt; <span class="number">800000</span>) <span class="keyword">and</span> (acdata[<span class="number">2</span>] &lt; <span class="number">300</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.weixinData(<span class="string">&#x27;Vista看天下&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>第二次编写</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weixinData</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/weixindata.html&#x27;</span></span><br><span class="line">response =  requests.get(url)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">trs = bs.select(<span class="string">&#x27;#XiGuaDataPage &gt; div.d-main.d-main-w &gt; div.rank-industry &gt; div.wrapper-col-right.wrapper-col-all &gt; table &gt; tbody &gt; tr&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line"><span class="keyword">if</span> tr.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;js-rank-detail-btn&#x27;</span>).get_text() == name:</span><br><span class="line"><span class="comment"># 头条平均阅读</span></span><br><span class="line">tt = tr.select_one(<span class="string">&#x27;td:nth-child(5)&#x27;</span>).get_text()</span><br><span class="line">tt = <span class="built_in">int</span>(tt) <span class="keyword">if</span> tt[-<span class="number">2</span>] != <span class="string">&#x27;万&#x27;</span> <span class="keyword">else</span> <span class="built_in">int</span>(tt[:-<span class="number">2</span>]) * <span class="number">10000</span></span><br><span class="line">tt = <span class="literal">True</span> <span class="keyword">if</span> tt &gt; <span class="number">90000</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原创平均阅读</span></span><br><span class="line">yc = tr.select_one(<span class="string">&#x27;td:nth-child(8)&#x27;</span>).get_text()</span><br><span class="line">yc = <span class="built_in">int</span>(yc) <span class="keyword">if</span> yc[-<span class="number">2</span>] != <span class="string">&#x27;万&#x27;</span> <span class="keyword">else</span> <span class="built_in">int</span>(yc[:-<span class="number">2</span>]) * <span class="number">10000</span></span><br><span class="line">yc = <span class="literal">True</span> <span class="keyword">if</span> yc &gt; <span class="number">80000</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 预估活跃粉丝</span></span><br><span class="line">yg = tr.select_one(<span class="string">&#x27;td:nth-child(4)&#x27;</span>).get_text()</span><br><span class="line">yg = <span class="literal">True</span> <span class="keyword">if</span> <span class="built_in">int</span>(<span class="built_in">float</span>(yg[:-<span class="number">1</span>])) &lt; <span class="number">300</span> <span class="keyword">else</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> tt <span class="keyword">and</span> yc <span class="keyword">and</span> yg:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;No&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;未找到&#x27;</span></span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line"><span class="built_in">print</span>(solu.weixinData(<span class="string">&#x27;Vista看天下&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="2-4-爱丽丝梦游仙境文本规范化"><a href="#2-4-爱丽丝梦游仙境文本规范化" class="headerlink" title="2.4:爱丽丝梦游仙境文本规范化"></a>2.4:爱丽丝梦游仙境文本规范化</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">采用Python自带的函数库进行数据操作，完成任务下方《爱丽丝梦游仙境》英文文本词频的分析。</span><br><span class="line">请将右边的函数  aliceText() 补充完整，使其能够输出某个单词的词频。</span><br><span class="line">任务要求</span><br><span class="line">1. 不得直接使用 Jieba 库对文本进行分词；</span><br><span class="line">2. 函数 aliceText() 接收一个英文单词 word，str 数据类型；返回该单词的词频，int 数据类型；</span><br><span class="line">3. 只保留单词长度大于等于 3 的单词的词频统计；</span><br><span class="line">4. 英文单词不区分大小写；</span><br><span class="line">5. 不同时态和单复数的英文单词为不同英文单词，不需要合并词频统计。如果文本中没有该单词，词频为0；</span><br><span class="line">6. 文本可以使用 requests 库进行读取，UTF-8 编码方式，否则无法正确读取文本。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;Pictures&#x27;        输出：3</span><br><span class="line">输入：&#x27;nothing&#x27;        输出：13</span><br><span class="line">输入：&#x27;caterpillar&#x27;     输出：14</span><br><span class="line">输入：&#x27;python&#x27;          输出：0</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/76/fj_alice_adventure.txt</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><ul><li>保留单词长度 &gt;&#x3D; 3</li><li>不区分大小写</li></ul></blockquote><p>做题思路</p><blockquote><ul><li>数据清洗：清除空格、换行、单词长度&lt; 3</li><li>全部转换为小写</li><li>使用 count 函数 统计单词出现的次数</li></ul></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word:<span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url:<span class="built_in">str</span> = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15960/76/fj_alice_adventure.txt&#x27;</span></span><br><span class="line">        response = requests.get(url=url)</span><br><span class="line">        response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        data = response.text</span><br><span class="line">        data = data.lower()  <span class="comment"># 转换为小写</span></span><br><span class="line">        <span class="comment"># 判断字符长度</span></span><br><span class="line">        st = data</span><br><span class="line">        res = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        index = <span class="number">0</span></span><br><span class="line">        index_bool = <span class="literal">True</span>  <span class="comment"># 判断第一次 &gt;= 3</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(st)):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= st[i] &lt;= <span class="string">&#x27;z&#x27;</span>:</span><br><span class="line">                index += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> index &gt;= <span class="number">3</span>:</span><br><span class="line">                    <span class="keyword">if</span> index_bool:</span><br><span class="line">                        res += st[i-<span class="number">2</span>:i+<span class="number">1</span>]</span><br><span class="line">                        index_bool = <span class="literal">False</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        res += st[i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                index = <span class="number">0</span></span><br><span class="line">                index_bool = <span class="literal">True</span></span><br><span class="line">                res += <span class="string">&#x27; &#x27;</span></span><br><span class="line">        <span class="comment"># 判断出现的次数</span></span><br><span class="line">        <span class="keyword">return</span> res.count(word.lower(),<span class="number">0</span>,<span class="built_in">len</span>(st))</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.aliceText(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 运行或提交代码不需要自己编写测试用例，后台自动进行测试检查。</span></span><br><span class="line"><span class="comment"># 2. 您编写代码的区域需要限制在Solution类或其他类和函数体内，保证输入与输出符合任务要求即可。</span></span><br><span class="line"><span class="comment"># 3. 点击“提交代码”按钮，系统将查看程序是否正确，并保存代码，记录任务数据。</span></span><br><span class="line"><span class="comment"># 4. 提交代码次数越多，任务得分越低。</span></span><br><span class="line"><span class="comment"># 5. 点击右上方“结束任务”按钮，系统将在后台计算任务得分，任务结束。</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        response = requests.get(<span class="string">&#x27;http://72.itmc.org.cn/JS001/data/user/16937/76/fj_alice_adventure.txt&#x27;</span>)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        text = response.text</span><br><span class="line">        <span class="comment"># 使用正则表达式提取单词</span></span><br><span class="line">        words = re.findall(<span class="string">r&#x27;\w+&#x27;</span>, text.lower())</span><br><span class="line">        <span class="comment"># 筛选出长度大于等于3的单词</span></span><br><span class="line">        filtered_words = [word <span class="keyword">for</span> word <span class="keyword">in</span> words <span class="keyword">if</span> <span class="built_in">len</span>(word) &gt;= <span class="number">3</span>]</span><br><span class="line">        </span><br><span class="line">        index = filtered_words.count(word.lower())</span><br><span class="line">        <span class="keyword">return</span> index</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-5-影片票房任务"><a href="#2-5-影片票房任务" class="headerlink" title="2.5:影片票房任务"></a>2.5:影片票房任务</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定内地某日票房排行榜，输入指定影片名称 movie_name，如：&#x27;金刚川&#x27;。完成以下任务：</span><br><span class="line">1. 任务一：获取指定影片的上映天数。如“金刚川”上映20天，返回 20；“一日成交”上映首日，返回0，“翱翔雄心”点映，返回 -1；</span><br><span class="line">2. 任务二：获取指定影片的综合票房（万元）。如“金刚川”，返回 432.33；</span><br><span class="line">3. 任务三：获取指定影片的排片占比。如“金刚川”，返回 0.248。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收 str 类型的变量 movie_name，返回 list 类型的变量；</span><br><span class="line">2. 返回列表包含参数如下：[任务一：int, 任务二：float，任务三：float]；</span><br><span class="line">3. 任务一中，如果是上映天数是“上映首日”，返回0；如果上映天数是“点映”，返回 -1；</span><br><span class="line">4. 任务三中需要将百分比形式转换为小数点形式。如 &#x27;24.8%&#x27; 需要转换为 0.248；如果票房 &lt;0.1%，返回 0.001；</span><br><span class="line">5. 票房信息排行榜在下方给出，utf-8编码。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;金刚川&#x27;</span><br><span class="line">输出：[20, 431.33, 0.248]</span><br><span class="line"></span><br><span class="line">输入：&#x27;半条棉被&#x27;</span><br><span class="line">输出：[69, 2.54, 0.001]</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/box_office_on_a_certain_day.html</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><ul><li>通过 电影名称</li><li>获取上映时间<ul><li>如果是上映天数是“上映首日”，返回0；如果上映天数是“点映”，返回 -1；</li></ul></li><li>获取 综合票房（万元<ul><li>“金刚川”，返回 432.33；</li></ul></li><li>获取 排片占比<ul><li>‘24.8%’ 需要转换为 0.248；如果票房 &lt;0.1%，返回 0.001；</li><li>先判断文字 &lt;0.1%</li><li>数字处理  <code>float(s[:-1]) / 100</code></li></ul></li><li>接受 movie_name: str</li><li>返回<ul><li>[任务一：int, 任务二：float，任务三：float]；</li></ul></li></ul></blockquote><p>做题思路</p><blockquote><p>先把所以数据获取过来</p><p>找到 电影名称 对应的 行数</p><p>找到后 单独对 各个任务 进行处理</p><p>存储到一个list 里面 最后返回</p></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">BoxOfficeSpider</span>(<span class="params">self, movie_name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/box_office_on_a_certain_day.html&#x27;</span></span><br><span class="line">        response = requests.get(url=url)</span><br><span class="line">        response.encoding = <span class="string">&#x27;uft-8&#x27;</span></span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        trs = soup.select(<span class="string">&#x27;#app &gt; div &gt; div.home-content &gt; div &gt; div.box-table &gt; table &gt; tbody &gt; tr&#x27;</span>)</span><br><span class="line">        <span class="comment"># print(trs)</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> trs:</span><br><span class="line">            <span class="comment"># 找电影名字</span></span><br><span class="line">            <span class="keyword">if</span> movie_name == i.find(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;movie-name&#x27;</span>).get_text():</span><br><span class="line">                <span class="comment"># 任务一: 上映时间</span></span><br><span class="line">                rwone = i.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;releaseInfo&#x27;</span>).get_text()</span><br><span class="line">                <span class="keyword">if</span> rwone == <span class="string">&#x27;上映首日&#x27;</span>:</span><br><span class="line">                    res[<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line">                <span class="keyword">elif</span> rwone == <span class="string">&#x27;点映&#x27;</span>:</span><br><span class="line">                    res[<span class="number">0</span>] = -<span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:  <span class="comment"># 把数字提取出来</span></span><br><span class="line">                    numlist = [char <span class="keyword">for</span> char <span class="keyword">in</span> rwone <span class="keyword">if</span> char.isdigit()]</span><br><span class="line">                    resnum = <span class="string">&#x27;&#x27;</span>.join(numlist)</span><br><span class="line">                    res.append(<span class="built_in">int</span>(resnum))</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 任务二: 综合票房（万元</span></span><br><span class="line">                res.append(<span class="built_in">float</span>(i.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;boxDesc-wrap&#x27;</span>).get_text()))</span><br><span class="line"></span><br><span class="line">                <span class="comment"># 任务三: 排片占比  24.8%&#x27; 需要转换为 0.248</span></span><br><span class="line">                s = i.select_one(<span class="string">&#x27;td:nth-child(4) &gt; div&#x27;</span>).get_text()</span><br><span class="line">                <span class="keyword">if</span> s == <span class="string">&#x27;&lt;0.1%&#x27;</span>:</span><br><span class="line">                    res.append(<span class="number">0.001</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    float_value = <span class="built_in">float</span>(s[:-<span class="number">1</span>]) / <span class="number">100</span></span><br><span class="line">                    res.append(float_value)</span><br><span class="line">                <span class="keyword">return</span> res</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.BoxOfficeSpider(<span class="string">&quot;半条棉被&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">BoxOfficeSpider</span>(<span class="params">self, movie_name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">res = [] <span class="comment"># [任务一：int, 任务二：float，任务三：float]</span></span><br><span class="line">response = requests.get(<span class="string">&#x27;http://72.itmc.org.cn/JS001/open/show/box_office_on_a_certain_day.html&#x27;</span>)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">trs = bs.select(<span class="string">&#x27;#app &gt; div &gt; div.home-content &gt; div &gt; div.box-table &gt; table &gt; tbody &gt; tr&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> tr <span class="keyword">in</span> trs:</span><br><span class="line"><span class="comment"># 通过电影名找打该电影</span></span><br><span class="line"><span class="keyword">if</span> tr.find(<span class="string">&#x27;p&#x27;</span>, class_=<span class="string">&#x27;movie-name&#x27;</span>).get_text() == movie_name:</span><br><span class="line"><span class="comment"># 任务一: 上映天数</span></span><br><span class="line">syts = tr.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;releaseInfo&#x27;</span>).get_text()</span><br><span class="line"><span class="keyword">if</span> syts == <span class="string">&#x27;上映首日&#x27;</span>:</span><br><span class="line">syts = <span class="number">0</span></span><br><span class="line"><span class="keyword">elif</span> syts == <span class="string">&#x27;点映&#x27;</span>:</span><br><span class="line">syts = -<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">syts = <span class="built_in">int</span>(syts[<span class="number">2</span>:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务二: 综合票房</span></span><br><span class="line">zhpf = tr.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;boxDesc-wrap&#x27;</span>).get_text()</span><br><span class="line">zhpf = <span class="built_in">round</span>(<span class="built_in">float</span>(zhpf), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 任务三: 排片占比</span></span><br><span class="line">pmzb = tr.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;countRate-wrap&#x27;</span>).get_text()</span><br><span class="line"><span class="keyword">if</span> pmzb == <span class="string">&#x27;&lt;0.1%&#x27;</span>:</span><br><span class="line">pmzb = <span class="number">0.001</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pmzb = <span class="built_in">float</span>(pmzb[:-<span class="number">1</span>]) / <span class="number">100</span></span><br><span class="line"></span><br><span class="line">res.append(syts)</span><br><span class="line">res.append(zhpf)</span><br><span class="line">res.append(pmzb)</span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line"><span class="built_in">print</span>(solu.BoxOfficeSpider(<span class="string">&#x27;半条棉被&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="2-6-商品搜系结果分析"><a href="#2-6-商品搜系结果分析" class="headerlink" title="2.6:商品搜系结果分析"></a>2.6:商品搜系结果分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">根据任务详情下方提供的网页（数量为1），完成商品搜索结果分析。</span><br><span class="line">请将右侧的函数 itemSearch() 补充完整，使其能完成以下功能：</span><br><span class="line">对于网页中出现的任一网店名称 ，函数返回以下信息，请将以上获取的信息保存在数组中，按顺序返回。</span><br><span class="line">任务要求</span><br><span class="line">该网店对应商品，是否参与满减促销（非满件促销），返回值为 True 或 False；</span><br><span class="line">该网店对应商品的价格，是否存在会员价，如果存在，则返回会员价，返回类型为 float（保留1位小数），如果不存在，返回原始价格；</span><br><span class="line">该网店对应商品的评论数，返回类型为 int；</span><br><span class="line">如果该网店存在两个及以上商品，返回价格较高的商品信息；如果商品价格相同，返回搜索结果最靠前的商品信息；</span><br><span class="line">链接地址在下方专题地址中给出，点击链接可以直接获取。</span><br><span class="line"></span><br><span class="line">测试用例</span><br><span class="line">输入：&quot;花花公子官方旗舰店&quot;    输出：[False, 139.0, 4400]</span><br><span class="line">解释：该网店价格最高的商品未参加满减促销活动，对应价格为139.0，商品评论数为4400</span><br><span class="line"></span><br><span class="line">输入：&quot;陌芙丝欧旗舰店&quot;           输出：[True, 139.0, 12000]</span><br><span class="line">解释：该网店价格最高的商品参加满减促销活动，对应价格为139.0，商品评论数为12000</span><br><span class="line"></span><br><span class="line">输入：&quot;合众服饰专营店&quot;           输出：[True,118.0,10000]</span><br><span class="line">解释：该网店价格最高的商品参加满减促销活动，对应价格为118.0，商品评论数为10000</span><br><span class="line">说明</span><br><span class="line">1. 会员价格是商品价格右边小字出现的价格信息；</span><br><span class="line">2. 评论数为“1万+”就代表评论数为“10000”；</span><br><span class="line">3. 函数接收“网店名称”这一变量，返回类型为数组；</span><br><span class="line">4. 不得修改函数的名称；</span><br><span class="line">5.“满减促销”和“满件促销”是不一样的概念；</span><br><span class="line">6. 网页中存在相同店铺名称的商品，请注意甄别。</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/open/show/ecjd.html</span><br></pre></td></tr></table></figure><p>题目分析</p><blockquote><p>接受： 网店名称</p><ul><li>满减促销 bool</li><li>是否存在会员价，如果存在，则返回会员价 float (保留1位小数)</li><li>评论数  int</li><li>如果该网店存在两个及以上商品，返回价格较高的商品信息；如果商品价格相同，返回搜索结果最靠前的商品信息；</li></ul></blockquote><p>做题思路</p><blockquote><p>先判断网店 &gt;&#x3D; 2 , 如果大于等于二 进行 判断价格 选择价格较为高的 , 如果价格相同选择第一个  √</p><p>对筛选出来的数据, 进行判断 三个任务</p><p>三个任务</p><ul><li>满减促销  是否参与满减促销（非满件促销）  True</li><li>是否存在会员价，如果存在，则返回会员价 float (保留1位小数)</li><li>评论数  int</li></ul><p>参数</p><ul><li>接受 店铺名称</li><li>返回 list</li></ul></blockquote><p>代码实现</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">itemSearch</span>(<span class="params">self,name:<span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/ecjd.html&#x27;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        soup = BeautifulSoup(response.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        lis = soup.select(<span class="string">&#x27;#J_goodsList &gt; ul &gt; li&#x27;</span>)</span><br><span class="line">        res = []</span><br><span class="line">        li = <span class="literal">None</span></span><br><span class="line">        li_bool = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> lis:</span><br><span class="line">            <span class="keyword">if</span> name == i.find(<span class="string">&#x27;span&#x27;</span>, class_=<span class="string">&#x27;J_im_icon&#x27;</span>).get_text():</span><br><span class="line">                <span class="keyword">if</span> li_bool:  <span class="comment"># 把第一个li 赋值过去</span></span><br><span class="line">                    li = i</span><br><span class="line">                    li_bool = <span class="literal">False</span></span><br><span class="line">                <span class="comment"># 价格 </span></span><br><span class="line">                jg = li.select_one(<span class="string">&#x27;div.p-price i&#x27;</span>).get_text()</span><br><span class="line">                <span class="comment"># 当 后面的价格贵的时候 进行替换</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">float</span>(jg) &lt; <span class="built_in">float</span>(i.select_one(<span class="string">&#x27;div.p-price i&#x27;</span>).get_text()):</span><br><span class="line">                    li = i</span><br><span class="line">        <span class="comment"># 是否参与 满减活动</span></span><br><span class="line">        <span class="keyword">if</span> li.find(<span class="string">&#x27;i&#x27;</span>,&#123;<span class="string">&#x27;data-tips&#x27;</span>: <span class="string">&#x27;本商品参与满减促销&#x27;</span>&#125;):</span><br><span class="line">            res.append(<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res.append(<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 价格标签</span></span><br><span class="line">        price = li.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;p-price&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断 是否存在 会员价格</span></span><br><span class="line">        <span class="keyword">if</span> price.find(<span class="string">&#x27;span&#x27;</span>,&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&quot;PLUS会员专享价&quot;</span>&#125;):</span><br><span class="line">            res.append(<span class="built_in">float</span>(price.find(<span class="string">&#x27;span&#x27;</span>,&#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&quot;PLUS会员专享价&quot;</span>&#125;).get_text()[<span class="number">1</span>:]))</span><br><span class="line">        <span class="keyword">else</span>: <span class="comment"># 如果不存在会员价格</span></span><br><span class="line">            res.append(<span class="built_in">float</span>(price.find(<span class="string">&#x27;i&#x27;</span>).get_text()))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 评论数  int</span></span><br><span class="line">        pl = li.select_one(<span class="string">&#x27;div.p-commit a&#x27;</span>).get_text()[:-<span class="number">1</span>]  <span class="comment"># 去掉最后一个加号</span></span><br><span class="line">        <span class="comment"># 判断最后面是不是 万</span></span><br><span class="line">        <span class="keyword">if</span> pl[-<span class="number">1</span>] == <span class="string">&#x27;万&#x27;</span>:</span><br><span class="line">            pl = <span class="built_in">float</span>(pl[:-<span class="number">1</span>]) * <span class="number">10000</span></span><br><span class="line">        </span><br><span class="line">        res.append(<span class="built_in">int</span>(pl))</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">res = solu.itemSearch(<span class="string">&#x27;花花公子官方旗舰店&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">先判断网店 &gt;= 2 , 如果大于等于二 进行 判断价格 选择价格较为高的 , 如果价格相同选择第一个  √</span></span><br><span class="line"><span class="string">对筛选出来的数据, 进行判断 三个任务</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">三个任务</span></span><br><span class="line"><span class="string">- 满减促销  是否参与满减促销（非满件促销）  True</span></span><br><span class="line"><span class="string">- 是否存在会员价，如果存在，则返回会员价 float (保留1位小数)</span></span><br><span class="line"><span class="string">- 评论数  int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- 接受 店铺名称</span></span><br><span class="line"><span class="string">- 返回 list</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">url:<span class="built_in">str</span> = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/ecjd.html&#x27;</span></span><br><span class="line">response = requests.get(url=url)</span><br><span class="line">response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">bs = BeautifulSoup(response.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">res = []</span><br><span class="line">lis = bs.select(<span class="string">&#x27;#J_goodsList &gt; ul &gt; li&#x27;</span>) <span class="comment"># 拿到所有的商品</span></span><br><span class="line">lis_name = []</span><br><span class="line">max_num = []</span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> lis:</span><br><span class="line"><span class="comment"># 如果不是空，就是找对了</span></span><br><span class="line"><span class="keyword">if</span> li.find(<span class="string">&#x27;a&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>: name&#125;):</span><br><span class="line"><span class="comment"># 价格</span></span><br><span class="line">lis_name.append(li)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lis_name:</span><br><span class="line">perice = i.select_one(<span class="string">&#x27;div &gt; div.p-price &gt; strong &gt; i&#x27;</span>).get_text()</span><br><span class="line">max_num.append(perice)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(max(max_num))</span></span><br><span class="line"><span class="comment"># val = max[0]</span></span><br><span class="line"><span class="comment"># key = 0  没做 先判断网店 &gt;= 2 ,</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># for i in range(1,len(max_num)):</span></span><br><span class="line"><span class="comment"># if val &gt; max_num:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = lis_name[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">if</span> i.find(<span class="string">&#x27;i&#x27;</span>, &#123;<span class="string">&#x27;data-tips&#x27;</span>: <span class="string">&#x27;本商品参与满减促销&#x27;</span>&#125;):</span><br><span class="line">res.append(<span class="literal">True</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">res.append(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> i.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;PLUS会员专享价&#x27;</span>&#125;):</span><br><span class="line">puls_perice = i.find(<span class="string">&#x27;span&#x27;</span>, &#123;<span class="string">&#x27;title&#x27;</span>: <span class="string">&#x27;PLUS会员专享价&#x27;</span>&#125;).get_text()[<span class="number">1</span>:]</span><br><span class="line">puls_perice = <span class="built_in">round</span>(<span class="built_in">float</span>(puls_perice),<span class="number">1</span>) <span class="comment"># 保留一位小数</span></span><br><span class="line">res.append(puls_perice)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">perice = i.select_one(<span class="string">&#x27;div.p-price &gt; strong &gt; i&#x27;</span>).get_text()</span><br><span class="line">perice = <span class="built_in">round</span>(<span class="built_in">float</span>(perice), <span class="number">1</span>)</span><br><span class="line">res.append(perice)</span><br><span class="line"></span><br><span class="line">commit = i.select_one(<span class="string">&#x27;div.p-commit a&#x27;</span>).get_text()</span><br><span class="line">commit = <span class="built_in">int</span>(<span class="built_in">float</span>(commit[:-<span class="number">2</span>]) * <span class="number">10000</span>) <span class="keyword">if</span> commit[-<span class="number">2</span>] == <span class="string">&#x27;万&#x27;</span> <span class="keyword">else</span> commit[:-<span class="number">1</span>]</span><br><span class="line">res.append(commit)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">solu  = Solution()</span><br><span class="line">res = solu.search(<span class="string">&#x27;陌芙丝欧旗舰店&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-7-商品关键词权重分析"><a href="#2-7-商品关键词权重分析" class="headerlink" title="2.7:商品关键词权重分析"></a>2.7:商品关键词权重分析</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">请使用 杭州大牌女装.txt 文本完成提取文本中权重最高的 5 个关键词的任务。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序以数组的形式返回五个关键词，关键词类型是 str；</span><br><span class="line">2. 使用结巴库内置的TextRank 算法抽取关键词，只返回关键词，不必返回权重。关键词的词性必须是名词和动词；</span><br><span class="line">3. 返回的5个关键词至少要有4个关键词与系统内置的答案一致；</span><br><span class="line">4. 返回关键词不需要考虑顺序；</span><br><span class="line"></span><br><span class="line">5. 杭州大牌女装.txt使用 requests 库读取，UTF-8编码，链接在下方给出；</span><br><span class="line">6. Jieba库词性表及说明.xlsx 也在下方给出，作为参考。</span><br><span class="line"></span><br><span class="line">测试用例</span><br><span class="line">输入：无</span><br><span class="line">输出：[&#x27;印花&#x27; ，&#x27;关键词2&#x27;，&#x27;关键词3&#x27;，&#x27;关键词4&#x27;，&#x27;关键词5&#x27;]</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/77/fj_Jieba词性表及说明.xlsx</span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/77/fj_5392_hangzhou_top_woman_wear.txt</span><br></pre></td></tr></table></figure><h1 id="模块三-数据处理与分析"><a href="#模块三-数据处理与分析" class="headerlink" title="模块三 数据处理与分析"></a>模块三 数据处理与分析</h1><h3 id="3-1-电商订单数据清洗"><a href="#3-1-电商订单数据清洗" class="headerlink" title="3.1:电商订单数据清洗"></a>3.1:电商订单数据清洗</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 任务详情 </span><br><span class="line">请根据系统提供的订单数据表，按要求完成以下任务：</span><br><span class="line">统计订单表格中，商品描述(choice_description)中为“NaN”的数量，并将其批量替换为“banana”，</span><br><span class="line">请根据以上要求，将函数 nanCount() 补充完整，函数的返回值为整数值，既为“NaN”的数量。</span><br><span class="line">任务要求</span><br><span class="line">1. 订单数据表为以逗号为分隔符的csv文件，编码方式为 UTF-8；</span><br><span class="line">2. 注意：DataFrame 由后台生成，作为参数 order_data 传递到 nonCount() 中，不需要生成新的 DataFrame；</span><br><span class="line">3. DataFrame 读取为订单数据表；</span><br><span class="line">3. 返回值为 NaN 的数量，int 数据类型。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">订单数据访问地址请见下方：</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/63/fj_order_data.csv</span><br></pre></td></tr></table></figure><h3 id="3-2-电商订单数据计算"><a href="#3-2-电商订单数据计算" class="headerlink" title="3.2:电商订单数据计算"></a>3.2:电商订单数据计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">请根据系统提供的订单数据表，按要求完成以下三个任务：</span><br><span class="line">传入一个字符串，返回订单总金额 (quantity * item_price) 最大或最小的商品，并返回商品的名称(item_name)。</span><br><span class="line">请根据以上要求，将函数 salesStr() 补充完整，函数的返回值为字符(str)，比如：&quot;Steak Burrito&quot;</span><br><span class="line">订单数据访问地址请见下方：</span><br><span class="line">字段名中文含义</span><br><span class="line">order_id 商品编号 </span><br><span class="line">quantity 数量 </span><br><span class="line">item_name 商品名称 </span><br><span class="line">choice_description 描述 </span><br><span class="line">item_price 单价 </span><br><span class="line">任务要求</span><br><span class="line">1. 传入一个字符串(&#x27;max&#x27; 或 &#x27;min&#x27;)，返回订单总金额最大或最小的商品的名称(item_name) ；</span><br><span class="line"></span><br><span class="line">2. 传入的字符串不区分大小写，即传入值可能是&quot;Max&quot;，也可能是&quot;max&quot;；</span><br><span class="line">3. 传入&quot;max&quot;，返回订单总金额 (quantity * item_price) 最大的商品名称；传入“min”，返回订单总金额 (quantity * item_price) 最小的商品名称；</span><br><span class="line">4. 返回字符串区分大小写，且保留字符串中间空格。</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/80/fj_order_data.csv</span><br></pre></td></tr></table></figure><h3 id="3-3-DataFrame计算平均值"><a href="#3-3-DataFrame计算平均值" class="headerlink" title="3.3:DataFrame计算平均值"></a>3.3:DataFrame计算平均值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">给定一个DataFrame对象 df，要求返回各行的平均值。</span><br><span class="line">具体操作如下：</span><br><span class="line">添加新列 &#x27;avg&#x27; 用于计算各行的平均值；</span><br><span class="line">使用数组返回新列 &#x27;avg&#x27;。</span><br><span class="line">任务要求</span><br><span class="line">程序接收 DataFrame 对象 df，返回结果是 list 数据类型；</span><br><span class="line">注意：平均值需要四舍五入保留两位小数。</span><br><span class="line">测试用例</span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">0123456</span><br><span class="line">024 27 7 23 25 7 21 </span><br><span class="line">116 30 8 4 26 30 8 </span><br><span class="line">218 28 7 17 17 16 25 </span><br><span class="line">输出：</span><br><span class="line">[19.14, 17.43, 18.29]</span><br><span class="line">解释：首先生成新列&#x27;avg&#x27;，需要注意平均数需要四舍五入保留小数点后两位</span><br><span class="line"></span><br><span class="line">0123456avg</span><br><span class="line">024 27 7 23 25 7 21 19.14 </span><br><span class="line">116 30 8 4 26 30 8 17.43 </span><br><span class="line">218 28 7 17 17 16 25 18.29 </span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line"></span><br><span class="line">0123</span><br><span class="line">010 19 4 7 </span><br><span class="line">19 5 28 14 </span><br><span class="line">230 27 1 13 </span><br><span class="line">321 14 19 9 </span><br><span class="line">41 25 30 16 </span><br><span class="line"></span><br><span class="line">输出：[10.0, 14.0, 17.75, 15.75, 18.0]</span><br><span class="line"></span><br><span class="line">解释：首先生成新列&#x27;avg&#x27;，其次返回&#x27;avg&#x27;列</span><br><span class="line"></span><br><span class="line">0123avg</span><br><span class="line">010 19 4 7 10.00 </span><br><span class="line">19 5 28 14 14.00 </span><br><span class="line">230 27 1 13 17.75 </span><br><span class="line">321 14 19 9 15.75 </span><br><span class="line">41 25 30 16 18.00 </span><br></pre></td></tr></table></figure><h3 id="3-4-乐高商店收入计算"><a href="#3-4-乐高商店收入计算" class="headerlink" title="3.4:乐高商店收入计算"></a>3.4:乐高商店收入计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述</span><br><span class="line">我们需要完成乐高商店的分析，请你根据指引完成以下任务：</span><br><span class="line">使用 Pandas 读取数据；</span><br><span class="line">去掉没有价格的数据，将销量为空的数据填充为0；</span><br><span class="line">计算所有产品总收入；</span><br><span class="line">计算该数据中产品价格的平均值;</span><br><span class="line">程序后台传入产品标题title，要求计算该产品的收入（收入总计）；</span><br><span class="line">将总收入、平均价格、产品收入保存到列表里，返回给后台。</span><br><span class="line">题目要求</span><br><span class="line">程序传入标题title数据类型是str；</span><br><span class="line">程序传出数据类型是列表类型，列表中所有元素的数据类型均是 float；</span><br><span class="line">如果产品标题title存在多个，则计算相同title商品的总收入；</span><br><span class="line">平均价格需要四舍五入保留小数点后2位。</span><br><span class="line">测试用例</span><br><span class="line">输入：’乐高旗舰店官网大电影系列70837Shimmer&amp;Shine闪亮水疗馆玩具积木’</span><br><span class="line">输出；[xxx, xxx, 1598.0]</span><br><span class="line">解释：总收入和平均价格隐藏，当前产品收入总计是1598.0</span><br><span class="line">输入：’乐高旗舰店幻影忍者系列70668雷电忍者杰的暴风战机’</span><br><span class="line">输出：[xxx, xxx, 259073.0]</span><br><span class="line">解释：总收入和平均价格隐藏，当前产品收入总计是259073.0</span><br><span class="line">输入：’乐高旗舰店官网创意百变高手系列10261大型过山车积木成人送礼’</span><br><span class="line">输出：[xxx, xxx, 41986.0]</span><br><span class="line">数据说明</span><br><span class="line">文本数据是excel文件，字段含义如下：</span><br><span class="line">字段含义实例</span><br><span class="line">title 商品名 乐高旗舰店官网 LEGO积木 儿童玩具男孩 积木拼装玩具益智 </span><br><span class="line">age_range 商品对应的年龄等级 适用年纪6+岁 </span><br><span class="line">price 商品价格 899.0 </span><br><span class="line">sales_num 售卖数量 217.0 </span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/241/fj_lego_tmallshop_sales_data.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-5-部门平均薪资汇总计算"><a href="#3-5-部门平均薪资汇总计算" class="headerlink" title="3.5:部门平均薪资汇总计算"></a>3.5:部门平均薪资汇总计算</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务说明</span><br><span class="line">        读取给定的职工薪酬考勤簿，职工薪酬考勤簿由两个表格组成，分别是 基本薪资 工作表和 上班通勤 工作表。要求计算每一个部门内部的平均薪资，并把结果 降序 排列，返回给判定程序。</span><br><span class="line">        员工个人薪酬计算过程如下：</span><br><span class="line">        1.薪资由两部分组成， 月基本薪资 和 通勤工资，另外需要扣除需要缴纳的 社保费及公积金；</span><br><span class="line">        2.月基本薪资 = 基本薪资 + 岗位工资 + 绩效工资；</span><br><span class="line">        3.通勤工资中计算如下：</span><br><span class="line">            日薪 = (基本薪资 + 岗位工资 + 绩效工资) / 应出勤天数</span><br><span class="line">            时薪 = 日薪 / 8</span><br><span class="line">        4.通勤工资中，法定节假日加班薪资是工作日加班的 2 倍，周末加班工资是工作日加班的 1.5 倍，工作日加班工资与时薪 相同；</span><br><span class="line">        5.通勤工资需要扣除因请假导致的缺勤，请假/小时需要扣除的工资按照时薪计算。</span><br><span class="line">        6.社保费及公积金个人缴费按照社会保险缴费基数计算：</span><br><span class="line">            a.养老保险个人缴费比例是 8%</span><br><span class="line">            b.医疗保险个人缴费比例是 2%</span><br><span class="line">            c.失业保险个人缴费比例是 1%</span><br><span class="line">            d.公积金缴费比例是 10%</span><br><span class="line">       </span><br><span class="line">        示例：</span><br><span class="line">        小王基本薪资 2000，岗位工资 2000，社会保险缴费基数是 2000。绩效工资 0，应出勤天数 20 天，请假 1 天，工作日加班 8 小时，法定节假日加班 4 小时，周末加班 4 小时。</span><br><span class="line">        小王基本薪资+岗位工资+绩效工资是：2000 + 2000 = 4000；</span><br><span class="line">        小王时薪：4000 / 20 / 8 = 25；</span><br><span class="line">        小王加班工资：25 * 8 + 25 * 4 * 1.5 + 25 * 4 * 2 = 550；</span><br><span class="line">        小王请假扣除：25 * 8 = 200；</span><br><span class="line">        小王五险一金扣除：2000 * 0.08 + 2000 * 0.02 + 2000 * 0.01 + 2000 * 0.1 = 420；</span><br><span class="line">        小王本月实发工资：4000 + 550 - 200 - 420 = 3930。</span><br><span class="line">        假设小王所在部门有 5 个人，5 个人工资分别是 4050，4010，4120，4000，4500。小王所在部门的平均工资是：(3930+ 4010 + 4120 + 4000 + 4500) /5 = 4112。同理可算出其他部门的平均工资。</span><br><span class="line"></span><br><span class="line">        注意：返回结果需四舍五入保留小数点后两位！  </span><br><span class="line">        返回结果参数类型是 pd.Series。Series 的索引应为部门名，Series 的数据应为部门平均工资，Series 的 Name 属性应修改为 “平均薪资”。</span><br><span class="line">任务要求</span><br><span class="line">程序无需接收参数输入，需要返回结果参数的格式是 pd.Series；</span><br><span class="line">返回结果时需要四舍五入保留小数点后两位，计算过程内保留小数点后两位可能导致最后结果不正确；</span><br><span class="line">部门平均工资需要降序排列；</span><br><span class="line">本题所需的基本薪资表和上班通勤表均在职工薪酬工作簿中，按需读取。</span><br><span class="line">Series 数据的类型应为 float 64，Name 属性应为 “平均薪资”。</span><br><span class="line">index 的属性名应为部门。</span><br><span class="line">测试用例</span><br><span class="line">部分返回数据：</span><br><span class="line">部门  </span><br><span class="line">销售部       15767.86</span><br><span class="line">运营部       ****</span><br><span class="line">工程部       ****  </span><br><span class="line">财务部       ****  </span><br><span class="line">研发部       ****  </span><br><span class="line">市场部       ****  </span><br><span class="line">人力资源部    4233.27  </span><br><span class="line">Name: 平均薪资, dtype: float64附件信息</span><br><span class="line">职工薪酬簿.xlsx，职工薪酬工作簿由 基本薪资 工作表和 上班通勤 工作表组成。</span><br><span class="line">基本薪资工作表。基本薪资工作表包含个人所属部门，各部分薪资状况和社会保险缴纳基数。共 7 个部门共 50 条数据，其中只有销售部有绩效工资。</span><br><span class="line">上班通勤工作表。上班通勤工作表包含本月应出勤天数，实际出勤天数。请假加班天数等。工作表中的名字与基本薪资工作表中的名字一一对应。共 50 条数据。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/242/fj_employee_salary_work_books.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-6-编制比较资产负债表"><a href="#3-6-编制比较资产负债表" class="headerlink" title="3.6:编制比较资产负债表"></a>3.6:编制比较资产负债表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务描述</span><br><span class="line"></span><br><span class="line">“A企业资产负债表.xlsx”文件的“比较资产负债表”包含 A 企业 2020 年和 2021 年的资产负债数据，请完成以下指定任务。</span><br><span class="line">使用 0 填充表格中的空值；</span><br><span class="line">计算 2021 年各项目变动额和变动率并添加相关数据列；</span><br><span class="line">程序接受某项目的项目名称 name，要求输出该项目对应的变动额和变动率。</span><br><span class="line">任务要求</span><br><span class="line"></span><br><span class="line">代码要编辑在 balance_sheet 函数下；</span><br><span class="line">变动额需要四舍五入保留小数点后 2 位，变动率需要四舍五入保留小数点后 4 位；</span><br><span class="line">变动额和变动率的数据类型都是浮点数数据类型；</span><br><span class="line">程序只判定 return后的结果值，输出（print）后的结果值不作为判断依据；</span><br><span class="line">程序返回结果的数据类型为列表。</span><br><span class="line"></span><br><span class="line">测试用例</span><br><span class="line"></span><br><span class="line">输入：name=&quot;负债总计&quot;</span><br><span class="line">输出：[26928392.51, 0.2567]</span><br><span class="line">解释：负债总计变动额是 26928392.51，变动率是 0.2567</span><br><span class="line"></span><br><span class="line">输入：name=&quot;无形资产&quot;</span><br><span class="line">输出：[-600000.0, -0.0667]</span><br><span class="line">解释：无形资产变动额是 -600000.0，变动率是 -0.0667</span><br><span class="line"></span><br><span class="line">输入：name=&quot;负债合计&quot;</span><br><span class="line">输出：[26928392.51, 0.2567]</span><br><span class="line"></span><br><span class="line">代码提示</span><br><span class="line"></span><br><span class="line">我们通过将 Series 转换为列表的形式，将其中的数字提取出来。</span><br><span class="line"></span><br><span class="line">通过如下案例，我们取出 DataFrame 中的 1。</span><br><span class="line">In [1]: import pandas as pd</span><br><span class="line"></span><br><span class="line"># 定义一个 DataFrame</span><br><span class="line">In [2]: df = pd.DataFrame([[1, 2], [3, 4]], columns=[&#x27;A&#x27;, &#x27;B&#x27;])</span><br><span class="line"></span><br><span class="line"># 预览下 df</span><br><span class="line">In [3]: df</span><br><span class="line">Out[3]:</span><br><span class="line">   A  B</span><br><span class="line">0  1  2</span><br><span class="line">1  3  4</span><br><span class="line"></span><br><span class="line"># 通过列名取出 A 列</span><br><span class="line">In [4]: df[&#x27;A&#x27;]</span><br><span class="line">Out[4]:</span><br><span class="line">0    1</span><br><span class="line">1    3</span><br><span class="line">Name: A, dtype: int64</span><br><span class="line"></span><br><span class="line"># 取出 A 列再将 A 列转换为列表</span><br><span class="line">In [5]: df[&#x27;A&#x27;].tolist()</span><br><span class="line">Out[5]: [1, 3]</span><br><span class="line"></span><br><span class="line"># 取出列表中的第一个元素，就是我们想要的 1</span><br><span class="line">In [6]: df[&#x27;A&#x27;].tolist()[0]</span><br><span class="line">Out[6]: 1</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/243/fj_Interprice_balance_data.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-7-某店铺不同地区销售情况分析福香"><a href="#3-7-某店铺不同地区销售情况分析福香" class="headerlink" title="3.7:某店铺不同地区销售情况分析福香"></a>3.7:某店铺不同地区销售情况分析福香</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">题目描述</span><br><span class="line">下方是某店铺在 2 月份的订单数据，共 28010 行、7 列。 在该数据中，每一行代表一笔订单，每一笔订单可以 看做是一位顾客（买家），价格相同的产品可视为同一产品；</span><br><span class="line">请编写程序，完成以下任务：</span><br><span class="line">程序传入参数 area（收货地址），要求计算该地区订单的’订单的付款转化率’、’买家全额支付的转化率’、’买家实际支付总金额’、’客单价’、’销量（订单量）最多的产品的价格’、’买家实际支付总金额在所有地区实际支付总金额中的占比’，并将结果以列表形式返回。</span><br><span class="line">题目要求</span><br><span class="line">程序接收 str 类型的 area，返回的结果为 list 数据类型；</span><br><span class="line">返回的结果中，列表中各个数据的数据类型为 str，其中转化率数据及占比数据需以百分比的形式输出，并且需要保留小数点后2位，如’13.14%’，其余结果不需要以百分比形式输出，但需要保留小数点后2位；</span><br><span class="line">如果某地区所有买家的买家实际支付金额为 0，即该地区没有付费行为。则该地区的’客单价’、’销量（订单量）最多的产品的价格’需返回字符串’本地区无销量’，其他结果则正常计算；</span><br><span class="line">如果该产品（订单）被全额退款，那么该产品不计入销量。</span><br><span class="line">参考公式</span><br><span class="line">付款转化率 = 付款订单数 / 总订单数；</span><br><span class="line">买家全额支付的转化率 = 买家全额支付的订单数 / 总订单数；</span><br><span class="line">客单价 = 实际支付金额 / 支付买家数；</span><br><span class="line">测试用例</span><br><span class="line">输入：area = ‘河南省’</span><br><span class="line">输出：[‘81.99%’, ‘61.18%’, ‘56354.03’, ‘92.84’, ‘37.00’, ‘2.96%’]</span><br><span class="line">解释：河南省’订单的付款转化率’为’81.99%’，’买家全额支付的转化率’为’61.18%’，’买家实际支付总金额’为’56354.03’，’客单价’为’92.84’，’销量（订单量）最多的产品的价格’为’37.00’，’买家实际支付总金额在所有地区实际支付总金额中的占比’为’2.96%’</span><br><span class="line"></span><br><span class="line">输入：area = ‘江苏省’</span><br><span class="line">输出：[‘86.78%’, ‘66.75%’, ‘159359.18’, ‘109.22’, ‘37.00’, ‘8.38%’]</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/240/fj_7568_tmall_order_report.csv</span><br></pre></td></tr></table></figure><h3 id="3-8-用户职位信息统计"><a href="#3-8-用户职位信息统计" class="headerlink" title="3.8:用户职位信息统计"></a>3.8:用户职位信息统计</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">请根据任务下方提供的用户职位统计信息表，完成以下任务：</span><br><span class="line">职位表中每个字段含义如下：</span><br><span class="line">字段说明</span><br><span class="line"></span><br><span class="line">user_id 用户序号 </span><br><span class="line"> </span><br><span class="line">age 用户年龄 </span><br><span class="line"> </span><br><span class="line">gender 用户性别 </span><br><span class="line"> </span><br><span class="line">occupation 用户职位 </span><br><span class="line"> </span><br><span class="line">zip_code 用户邮编 </span><br><span class="line"> </span><br><span class="line">编写一个职位统计函数 jobStatistics()，给定表格里的任一职位，统计其以下信息</span><br><span class="line">1. 任务一：统计该职位女性用户的百分占比（结果保留两位小数），输出数据类型为 str；</span><br><span class="line">2. 任务二：统计该职位女性用户百分占比在所有职位女性用户百分占比中的排名（降序），输出数据类型为 int。</span><br><span class="line">将以上2个结果保存在 数组(list) 中，按顺序返回。</span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收一个 str 类型的变量 op，返回一个 list 类型的变量；</span><br><span class="line">2. &quot;gender&quot; 列中，&quot;F&quot; 代表女性，&quot;M&quot; 代表男性；</span><br><span class="line">3. 返回结果格式如下：[任务一: str, 任务二: int]。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;artist&#x27;</span><br><span class="line">输出：[ &#x27;46.43%&#x27;, 4]</span><br><span class="line">解释：该职位中女性用户占据该职位所有用户的46.43%，该职位女性占比排名在所有职位女性占比排名中位列第 4</span><br><span class="line"></span><br><span class="line">输入：&#x27;student&#x27;</span><br><span class="line">输出：[&#x27;30.61%&#x27;, 10]</span><br><span class="line">解释：该职位中女性用户占据该职位所有用户的30.61%，该职位女性占比排名在所有职位女性占比排名中位列第 10</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/67/fj_jobstatics.xlsx</span><br></pre></td></tr></table></figure><h3 id="3-9-某知名网站高质量视频主挖掘"><a href="#3-9-某知名网站高质量视频主挖掘" class="headerlink" title="3.9:某知名网站高质量视频主挖掘"></a>3.9:某知名网站高质量视频主挖掘</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">任务详情</span><br><span class="line">根据下方提供的某知名网站视频信息数据，构造一个打分模型，并根据分值挖掘高质量视频主，要求输入视频主的名字author，返回对应的UP主分层。</span><br><span class="line"></span><br><span class="line">IFL模型</span><br><span class="line">针对视频主的视频信息构建了IFL模型，以评估视频的质量。</span><br><span class="line"></span><br><span class="line">I (Interaction_rate)</span><br><span class="line">I 值反映的是平均每个视频的互动率，互动率越高，表明其视频更能产生用户的共鸣，使其有话题感。</span><br><span class="line">I = (总弹幕数 + 总评论数) / (总播放量 * 统计范围内视频数量) * 100。</span><br><span class="line"></span><br><span class="line">F (Frequence)</span><br><span class="line">F 值表示的是每个视频的平均发布周期，每个视频之间的发布周期越短，说明内容生产者创作视频的时间也就越短，创作时间太长，不是忠实粉丝的用户可能将其遗忘。</span><br><span class="line">F = (统计范围内最晚发布视频时间 - 最早发布视频时间) / 发布视频的数量。</span><br><span class="line">如果 F 的值为 0，表示该视频主仅发布一条视频。那么将 F 的值重新赋值为 F 的最大值 + 1，如原有数据中，F 的最大值是 100，那么就将 F 的最大值设置为 100 + 1 = 101。</span><br><span class="line"></span><br><span class="line">L (Like_rate)</span><br><span class="line">L值表示的是统计时间内发布视频的平均点赞率，越大表示视频质量越稳定，用户对up主的认可度也就越高。</span><br><span class="line">L = (点赞数 * 1 + 投币数 * 2 + 收藏数 * 3 + 分享数 * 4) / (播放量 * 发布视频数) * 100。</span><br><span class="line"></span><br><span class="line">维度打分</span><br><span class="line">维度确认的核心是分值确定，按照设定的标准，我们给每个视频主的 I/F/L 值打分，分值的大小取决于我们的偏好，</span><br><span class="line">即我们越喜欢的行为，打的分数就越高 ：</span><br><span class="line">- I 值。表示 up 主视频的平均评论率，这个值越大，就说明其视频越能使用户有话题，当I值越大时，分值越大。</span><br><span class="line">- F 值。表示视频的平均发布周期，我们当然想要经常看到，所以这个值越大时，分值越小。</span><br><span class="line">- L 值。表示发布视频的平均点赞率，S 值越大时，质量越稳定，分值也就越大。</span><br><span class="line"></span><br><span class="line">视频主主分层 我们根据每一项指标是否高于平均值，把UP主划分为8类，我们根据案例中的情况进行划分，具体如下表</span><br><span class="line"></span><br><span class="line">视频主分类I值是否大于平均值F值是否小于平均值L值是否大于平均值解释</span><br><span class="line">高质量视频主 1 1 1 用户活跃高，更新周期短，视频质量高 </span><br><span class="line">高质量拖更视频主 1 0 1 用户活跃高，更新周期长，视频质量高 </span><br><span class="line">高质量内容高深视频主 0 1 1 用户活跃低，更新周期短，视频质量高 </span><br><span class="line">高质量内容高深拖更视频主 0 0 1 用户活跃低，更新周期长，视频质量高 </span><br><span class="line">接地气活跃视频主 1 1 0 用户活跃高，更新周期短，视频质量低 </span><br><span class="line">活跃视频主 0 1 0 用户活跃低，更新周期短，视频质量低 </span><br><span class="line">接地气视频主 1 0 0 用户活跃高，更新周期长，视频质量低 </span><br><span class="line">还在成长的视频主 0 0 0 用户活跃低，更新周期长，视频质量低 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">数据链接已经在下方给出： 各字段表示含义如下：</span><br><span class="line">字段名含义</span><br><span class="line">pubdate 发布时间 </span><br><span class="line">bv BV号 </span><br><span class="line">url 视频链接 </span><br><span class="line">title 标题 </span><br><span class="line">author 作者 </span><br><span class="line">description 视频简介 </span><br><span class="line">tag 标签 </span><br><span class="line">favorites 收藏 </span><br><span class="line">coins 投币 </span><br><span class="line">danmu 弹幕 </span><br><span class="line">likes 点赞 </span><br><span class="line">reply 评论 </span><br><span class="line">views 播放量 </span><br><span class="line">share 分享</span><br><span class="line"> </span><br><span class="line">任务要求</span><br><span class="line">1. 程序接收 str 类型的变量 author，返回结果的数据类型是str类型；</span><br><span class="line">2. 便于数据美观，IFL 的值需要保留小数点后两位（四舍五入）；</span><br><span class="line">3. 数据中可能存在重复数据；</span><br><span class="line">4. 某知名视频网站视频数据为逗号分割的 csv 文件，utf-8 编码。</span><br><span class="line">测试用例</span><br><span class="line">输入：&#x27;龙爪洪荒&#x27;</span><br><span class="line">输出：&#x27;高质量拖更视频主&#x27;</span><br><span class="line"></span><br><span class="line">输入：&#x27;AO摆渡人&#x27;</span><br><span class="line">输出：&#x27;活跃视频主&#x27;</span><br><span class="line"></span><br><span class="line">http://72.itmc.org.cn:80/JS001/data/user/15960/94/fj_B_video_web_data.csv</span><br></pre></td></tr></table></figure><h4 id="答案"><a href="#答案" class="headerlink" title="答案:"></a>答案:</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1.1：求两数之和</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">twoSum</span>(<span class="params">self, nums: <span class="built_in">list</span>, target: <span class="built_in">int</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        zt = []</span><br><span class="line">        qc = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> nums:</span><br><span class="line">            <span class="keyword">if</span> qc == <span class="literal">True</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">for</span> z <span class="keyword">in</span> nums:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">int</span>(i) + <span class="built_in">int</span>(z) == target:</span><br><span class="line">                    qc = <span class="literal">True</span></span><br><span class="line">                    zt.append(nums.index(i))</span><br><span class="line">                    zt.append(nums.index(z,nums.index(i)+<span class="number">1</span>))</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> zt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.2：判断数组重复元素</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">arrayRepeat</span>(<span class="params">self, arr: <span class="built_in">list</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(arr) != <span class="built_in">len</span>(<span class="built_in">set</span>(arr)):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">                <span class="keyword">if</span> i != <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">if</span> arr[i] != arr[i - <span class="number">1</span>]:</span><br><span class="line">                        <span class="keyword">pass</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">return</span> <span class="string">&quot;03&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;01&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            num = <span class="number">0</span></span><br><span class="line">            zt = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> arr:</span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">                    num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    zt += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> num &gt; zt:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;02&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;03&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.3：简单数学公式</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">SpMtFml</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> math.ceil(math.sqrt((<span class="number">3</span>**<span class="number">4</span>+<span class="number">5</span>*<span class="number">6</span>**<span class="number">5</span>)/num))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.4：句子拼写检查</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detectCapital</span>(<span class="params">self, st: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        list1 = st.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">        t=<span class="number">0</span></span><br><span class="line">        ww=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">            t=t+<span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> i.upper() <span class="keyword">in</span> [<span class="string">&#x27;PYTHON&#x27;</span>, <span class="string">&#x27;JAVA&#x27;</span>, <span class="string">&#x27;MACHINELEARNING&#x27;</span>, <span class="string">&#x27;DATAMINING&#x27;</span>]:</span><br><span class="line">                <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&quot;Python&quot;</span>, <span class="string">&quot;Java&quot;</span>, <span class="string">&quot;MachineLearning&quot;</span>, <span class="string">&quot;DataMining&quot;</span>]:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">any</span>(char.isdigit() <span class="keyword">for</span> char <span class="keyword">in</span> i):</span><br><span class="line">                <span class="keyword">if</span> i.upper() != i:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> t == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> i.capitalize() != i:</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">elif</span> i.lower() != i <span class="keyword">and</span> i.upper() != i:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.5：重复子字符串 100.0分</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">patternRepeatedSubstring</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        ss = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            ss += i</span><br><span class="line">            <span class="keyword">if</span> s.count(ss) == <span class="built_in">len</span>(s) / <span class="built_in">len</span>(ss):</span><br><span class="line">                <span class="keyword">return</span> ss</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.1：选取网页表格中的数字</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">table_num</span>(<span class="params">self, row: <span class="built_in">int</span>, col: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/open/show/random-num/index.html&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding= <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        qc = BeautifulSoup(zt.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        jg = qc.find_all(<span class="string">&quot;td&quot;</span>)[(row-<span class="number">1</span>)*<span class="number">26</span>+row-<span class="number">1</span>+col].text</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(jg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.2：商品信息关键词权重计算</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"><span class="keyword">from</span> jieba <span class="keyword">import</span> analyse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wordTfidf</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/61/fj_chiffon_lady_dress.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        <span class="comment"># 使用jieba的analyse模块的extract_tags函数来提取关键词</span></span><br><span class="line">        <span class="comment"># zt.text是从网页获取到的文本内容</span></span><br><span class="line">        <span class="comment"># topK=5表示只提取最重要的5个关键词</span></span><br><span class="line">        <span class="comment"># allowPOS=(&quot;n&quot;, &quot;nr&quot;, &quot;ns&quot;)表示只提取名词、人名、地名这几种词性的关键词</span></span><br><span class="line">        jg = jieba.analyse.extract_tags(zt.text,topK=<span class="number">5</span>,allowPOS=(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;nr&quot;</span>,<span class="string">&quot;ns&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> jg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.3：微信公众号排行榜分析</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">weixinData</span>(<span class="params">self, name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/open/show/weixindata.html&#x27;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        qc = BeautifulSoup(zt.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                txt = qc.find_all(<span class="string">&quot;span&quot;</span>,class_=<span class="string">&quot;js-rank-detail-btn&quot;</span>)[i].text</span><br><span class="line">                txt1 = qc.find_all(<span class="string">&quot;td&quot;</span>)[i*<span class="number">11</span>+<span class="number">4</span>+i].text</span><br><span class="line">                txt2 = qc.find_all(<span class="string">&quot;td&quot;</span>)[i*<span class="number">11</span>+<span class="number">7</span>+i].text</span><br><span class="line">                txt3 = qc.find_all(<span class="string">&quot;td&quot;</span>)[i*<span class="number">11</span>+<span class="number">3</span>+i].text</span><br><span class="line">                <span class="keyword">if</span> txt == name :</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&quot;万&quot;</span> <span class="keyword">in</span> txt1 <span class="keyword">or</span> <span class="built_in">float</span>(txt1) &gt; <span class="number">90000</span>:</span><br><span class="line">                        <span class="keyword">if</span> <span class="string">&quot;万&quot;</span> <span class="keyword">in</span> txt2 <span class="keyword">or</span> <span class="built_in">float</span>(txt2) &gt;<span class="number">80000</span>:</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">float</span>(txt3[<span class="number">0</span>:-<span class="number">1</span>]) &lt; <span class="number">300</span>:</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">&quot;YES&quot;</span></span><br><span class="line">                            <span class="keyword">else</span>:</span><br><span class="line">                                <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">                        <span class="keyword">else</span>:</span><br><span class="line">                            <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                          <span class="keyword">return</span> <span class="string">&quot;NO&quot;</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.4：爱丽丝梦游仙境文本规范化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/76/fj_alice_adventure.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(word) &lt; <span class="number">3</span> :</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        qc = re.findall(word,zt.text,re.I)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(qc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.5：影片票房任务</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">BoxOfficeSpider</span>(<span class="params">self, movie_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">    url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/open/show/box_office_on_a_certain_day.html&quot;</span></span><br><span class="line">    zt = requests.get(url)</span><br><span class="line">    zt.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">    qc = BeautifulSoup(zt.text,<span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    name = qc.find_all(<span class="string">&quot;p&quot;</span>,class_=<span class="string">&quot;movie-name&quot;</span>)</span><br><span class="line">    txt1 = qc.find_all(<span class="string">&quot;span&quot;</span>,class_=<span class="string">&quot;releaseInfo&quot;</span>)</span><br><span class="line">    txt2 = qc.find_all(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;boxDesc-wrap red-color&quot;</span>)</span><br><span class="line">    txt3 = qc.find_all(<span class="string">&quot;div&quot;</span>,class_=<span class="string">&quot;countRate-wrap&quot;</span>)</span><br><span class="line">    key = &#123;&#125;</span><br><span class="line">    val = [[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]<span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(name))]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(txt1)):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> (re.findall(<span class="string">r&quot;\d+&quot;</span>,txt1[i].text)):</span><br><span class="line">                val[i][j] = <span class="built_in">int</span>(re.findall(<span class="string">r&quot;\d+&quot;</span>,txt1[i].text)[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">elif</span> (<span class="string">&quot;点映&quot;</span> <span class="keyword">in</span>  txt1[i].text):</span><br><span class="line">                val[i][j] = -<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val[i][j] = <span class="number">0</span></span><br><span class="line">            val[i][j+<span class="number">1</span>] = <span class="built_in">float</span>(txt2[i].text)</span><br><span class="line">            val[i][j+<span class="number">2</span>] = txt3[i].text[:-<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;&lt;&quot;</span> <span class="keyword">in</span> val[i][j+<span class="number">2</span>]):</span><br><span class="line">                val[i][j+<span class="number">2</span>] = <span class="number">0.001</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                val[i][j+<span class="number">2</span>] = <span class="built_in">float</span>(val[i][j+<span class="number">2</span>])*<span class="number">0.01</span></span><br><span class="line">                val[i][j+<span class="number">2</span>] = <span class="built_in">float</span>(<span class="built_in">str</span>(val[i][j+<span class="number">2</span>])[<span class="number">0</span>:<span class="number">5</span>])</span><br><span class="line">        key[name[i].text] = val[i]</span><br><span class="line">    <span class="keyword">return</span> key[movie_name]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.6：商品搜索结果分析</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">itemSearch</span>(<span class="params">self, shop_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;###/open/show/ecjd.html&quot;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.ok:</span><br><span class="line">            response.encoding = <span class="string">&quot;utf-8&quot;</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.parseItem(response.text)[shop_name]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseItem</span>(<span class="params">self, html</span>):</span><br><span class="line">        soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">        <span class="comment"># 父目录</span></span><br><span class="line">        temp_dict = <span class="built_in">dict</span>()</span><br><span class="line">        <span class="keyword">for</span> child <span class="keyword">in</span> soup.findAll(class_=<span class="string">&quot;gl-item&quot;</span>):</span><br><span class="line">            <span class="comment"># 商品名称</span></span><br><span class="line">            item_name = child.find(class_=<span class="string">&quot;J_im_icon&quot;</span>).a.text</span><br><span class="line">            temp_list = []</span><br><span class="line">            temp = child.find(class_=<span class="string">&quot;p-icons&quot;</span>).text</span><br><span class="line">            <span class="comment">#         print(child.find(&quot;i&quot;,&#123;&quot;data-tips&quot;:&quot;本商品参与满减促销&quot;&#125;))</span></span><br><span class="line">            <span class="comment"># 是否有满减活动</span></span><br><span class="line">            temp_list.append(re.search(<span class="string">&quot;满\d+-\d+&quot;</span>, temp) != <span class="literal">None</span>)</span><br><span class="line">            <span class="comment"># 是否有会员价</span></span><br><span class="line">            temp_list.append(<span class="built_in">float</span>(child.find(class_=<span class="string">&quot;p-price&quot;</span>).strong.i.text))</span><br><span class="line">            <span class="keyword">if</span> child.find(class_=<span class="string">&quot;price-plus-1&quot;</span>):</span><br><span class="line">                temp_list.pop()</span><br><span class="line">                temp_list.append(</span><br><span class="line">                    <span class="built_in">round</span>(<span class="built_in">float</span>(child.find(class_=<span class="string">&quot;price-plus-1&quot;</span>).text[<span class="number">1</span>:])))</span><br><span class="line">            <span class="comment"># 该网店对应商品的评论数</span></span><br><span class="line">            <span class="keyword">if</span> child.find(class_=<span class="string">&quot;p-commit&quot;</span>):</span><br><span class="line">                temp_commit = child.select_one(<span class="string">&quot;.p-commit strong a&quot;</span>).text</span><br><span class="line">                temp_list.append(<span class="built_in">int</span>(<span class="built_in">float</span>(</span><br><span class="line">                    temp_commit[:-<span class="number">2</span>]) * <span class="number">10000</span>) <span class="keyword">if</span> <span class="string">&#x27;万&#x27;</span> <span class="keyword">in</span> temp_commit <span class="keyword">else</span> <span class="built_in">int</span>(<span class="built_in">float</span>(temp_commit[:-<span class="number">1</span>])))</span><br><span class="line">            <span class="comment"># 该商品的价格</span></span><br><span class="line">            <span class="comment"># 如果该网店存在两个及以上商品，返回价格较高的商品信息；如果商品价格相同，返回排名最靠前的商品信息</span></span><br><span class="line">            <span class="keyword">if</span> item_name <span class="keyword">in</span> temp_dict.keys() <span class="keyword">and</span> temp_dict[item_name][<span class="number">1</span>] &gt;= temp_list[<span class="number">1</span>]:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="comment"># 保存数据</span></span><br><span class="line">            temp_dict.update(&#123;item_name: temp_list&#125;)</span><br><span class="line">        <span class="keyword">return</span> temp_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.7：商品关键词权重分析</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> jieba.analyse <span class="keyword">import</span> textrank</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">itemAnalyse</span>(<span class="params">self</span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/77/fj_5392_hangzhou_top_woman_wear.txt&quot;</span></span><br><span class="line">        zt = requests.get(url)</span><br><span class="line">        zt.encoding=<span class="string">&quot;utf-8&quot;</span></span><br><span class="line">        qc = textrank(zt.text,topK=<span class="number">5</span>,allowPOS=(<span class="string">&quot;n&quot;</span>,<span class="string">&quot;v&quot;</span>))</span><br><span class="line">        <span class="keyword">return</span> qc</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.1：电商订单数据清洗</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">nanCount</span>(<span class="params">self, order_data:<span class="string">&#x27;DataFrame&#x27;</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/63/fj_order_data.csv&quot;</span></span><br><span class="line">        zt = pd.read_csv(url)</span><br><span class="line">        mo = zt[<span class="string">&quot;choice_description&quot;</span>].isnull().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="keyword">return</span> mo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.2：电商订单数据计算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">salesStr</span>(<span class="params">self, condition: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/80/fj_order_data.csv&quot;</span></span><br><span class="line">        zt = pd.read_csv(url)</span><br><span class="line">        zt[<span class="string">&quot;item_price&quot;</span>] = zt[<span class="string">&quot;item_price&quot;</span>].apply(<span class="keyword">lambda</span> x:x.replace(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;&quot;</span>)).astype(<span class="built_in">float</span>)</span><br><span class="line">        zt[<span class="string">&quot;总金额&quot;</span>] = zt[<span class="string">&quot;item_price&quot;</span>] * zt[<span class="string">&quot;quantity&quot;</span>]</span><br><span class="line">        <span class="keyword">if</span> condition.lower() == <span class="string">&quot;max&quot;</span>:</span><br><span class="line">            jg = zt.groupby(<span class="string">&quot;item_name&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;总金额&quot;</span>).index[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            jg = zt.groupby(<span class="string">&quot;item_name&quot;</span>).<span class="built_in">sum</span>().sort_values(<span class="string">&quot;总金额&quot;</span>).index[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> jg</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.3：DataFrame计算平均值</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">CalAvg</span>(<span class="params">self, df: <span class="string">&#x27;pandas.DataFrame&#x27;</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        df[<span class="string">&quot;avg&quot;</span>] = df.mean(axis=<span class="number">1</span>).<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> df[<span class="string">&quot;avg&quot;</span>].tolist()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.4：乐高商店收入计算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self, title</span>):</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/241/fj_lego_tmallshop_sales_data.xlsx&quot;</span></span><br><span class="line">        zt = pd.read_excel(url)</span><br><span class="line">        zt.dropna(subset=[<span class="string">&quot;price&quot;</span>])</span><br><span class="line">        zt[<span class="string">&quot;sales_num&quot;</span>] = zt[<span class="string">&quot;sales_num&quot;</span>].fillna(<span class="number">0</span>)</span><br><span class="line">        mo = <span class="built_in">sum</span>(zt[<span class="string">&quot;sales_num&quot;</span>] * zt[<span class="string">&quot;price&quot;</span>])</span><br><span class="line">        age = zt[<span class="string">&quot;price&quot;</span>].mean().<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">        title = zt[zt[<span class="string">&quot;title&quot;</span>] == title]</span><br><span class="line">        jg = <span class="built_in">sum</span>(title[<span class="string">&quot;sales_num&quot;</span>] * title[<span class="string">&quot;price&quot;</span>])</span><br><span class="line">        <span class="keyword">return</span> [mo,age,jg]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.5：部门平均薪资汇总计算</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">department_salary_summary</span>(<span class="params">self</span>) -&gt; pd.Series:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/242/fj_employee_salary_work_books.xlsx&quot;</span></span><br><span class="line">        zt = pd.read_excel(url, sheet_name=<span class="string">&quot;基本薪资&quot;</span>)</span><br><span class="line">        qc = pd.read_excel(url, sheet_name=<span class="string">&quot;上班通勤&quot;</span>)</span><br><span class="line">        mo = pd.merge(zt, qc, on=<span class="string">&quot;姓名&quot;</span>)</span><br><span class="line">        mo.fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        mo[<span class="string">&quot;月基本薪资&quot;</span>] = mo[<span class="string">&quot;基本薪资&quot;</span>] + mo[<span class="string">&quot;岗位工资&quot;</span>] + mo[<span class="string">&quot;绩效工资&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;日薪&quot;</span>] = mo[<span class="string">&quot;月基本薪资&quot;</span>] / mo[<span class="string">&quot;应出勤天数（天）&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;时薪&quot;</span>] = mo[<span class="string">&quot;日薪&quot;</span>] / <span class="number">8</span></span><br><span class="line">        mo[<span class="string">&quot;法定节假日加班&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;法定假日加班（小时）&quot;</span>] * <span class="number">2</span></span><br><span class="line">        mo[<span class="string">&quot;周末加班&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;周末加班（小时）&quot;</span>] * <span class="number">1.5</span></span><br><span class="line">        mo[<span class="string">&quot;工作日加班&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;工作日加班（小时）&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;通勤工资&quot;</span>] = mo[<span class="string">&quot;法定节假日加班&quot;</span>] + mo[<span class="string">&quot;周末加班&quot;</span>] + mo[<span class="string">&quot;工作日加班&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;请假扣费&quot;</span>] = mo[<span class="string">&quot;时薪&quot;</span>] * mo[<span class="string">&quot;请假（小时）&quot;</span>]</span><br><span class="line">        mo[<span class="string">&quot;社保缴费&quot;</span>] = (mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.08</span> + mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.02</span> + mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.01</span> + mo[<span class="string">&quot;社会保险缴费基数&quot;</span>] * <span class="number">0.10</span>)</span><br><span class="line">        mo[<span class="string">&quot;实发工资&quot;</span>] = mo[<span class="string">&quot;月基本薪资&quot;</span>] + mo[<span class="string">&quot;通勤工资&quot;</span>] - mo[<span class="string">&quot;请假扣费&quot;</span>] - mo[<span class="string">&quot;社保缴费&quot;</span>]</span><br><span class="line">        jg = mo.groupby(<span class="string">&quot;部门&quot;</span>)[<span class="string">&quot;实发工资&quot;</span>].mean().<span class="built_in">round</span>(<span class="number">2</span>).astype(<span class="built_in">float</span>).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        jg.name = <span class="string">&quot;平均薪资&quot;</span></span><br><span class="line">        jg.index.name = <span class="string">&quot;部门&quot;</span></span><br><span class="line">        <span class="keyword">return</span> jg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.6：编制比较资产负债表</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">balance_sheet</span>(<span class="params">self, name</span>):</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/243/fj_Interprice_balance_data.xlsx&quot;</span></span><br><span class="line">        zt = pd.read_excel(url,sheet_name=<span class="string">&quot;比较资产负债表&quot;</span>)</span><br><span class="line">        zt.fillna(<span class="number">0</span>,inplace = <span class="literal">True</span>)</span><br><span class="line">        zt[<span class="string">&quot;变动额&quot;</span>] = zt[<span class="string">&quot;2021.12.31&quot;</span>] - zt[<span class="string">&quot;2020.12.31&quot;</span>]</span><br><span class="line">        zt[<span class="string">&quot;变动率&quot;</span>] = zt[<span class="string">&quot;变动额&quot;</span>] / zt[<span class="string">&quot;2020.12.31&quot;</span>]</span><br><span class="line">        mo = zt[zt[<span class="string">&quot;项目&quot;</span>]==name]</span><br><span class="line">        txt1 = (mo[<span class="string">&quot;变动额&quot;</span>].values[<span class="number">0</span>]).<span class="built_in">round</span>(<span class="number">2</span>)</span><br><span class="line">        txt2 = (mo[<span class="string">&quot;变动率&quot;</span>].values[<span class="number">0</span>]).<span class="built_in">round</span>(<span class="number">4</span>)</span><br><span class="line">        <span class="keyword">return</span> [txt1,txt2]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.7：某店铺不同地区销售情况分析</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">task</span>(<span class="params">self, area: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url = <span class="string">&quot;http://72.itmc.org.cn:80/JS001/data/user/15930/240/fj_7568_tmall_order_report.csv&quot;</span></span><br><span class="line">        zt = pd.read_csv(url)</span><br><span class="line">        qc = zt[zt[<span class="string">&quot;收货地址&quot;</span>] == area]</span><br><span class="line">        mo = <span class="built_in">len</span>(qc)</span><br><span class="line"></span><br><span class="line">        fkdds = <span class="built_in">len</span>(qc.query(<span class="string">&quot;买家实际支付金额 !=0 | 退款金额 != 0&quot;</span>))</span><br><span class="line">        fkzhl = <span class="string">f&quot;<span class="subst">&#123;(fkdds / mo) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line"></span><br><span class="line">        qefkdds = <span class="built_in">len</span>(qc.query(<span class="string">&quot;买家实际支付金额 == 总金额&quot;</span>))</span><br><span class="line">        qefkzhl = <span class="string">f&quot;<span class="subst">&#123;(qefkdds / mo) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line"></span><br><span class="line">        zfzje = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">sum</span>(qc[<span class="string">&#x27;买家实际支付金额&#x27;</span>]):<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">        sjzfje = <span class="built_in">sum</span>(qc[<span class="string">&quot;买家实际支付金额&quot;</span>])</span><br><span class="line">        zfmjs = <span class="built_in">len</span>(qc[qc[<span class="string">&quot;买家实际支付金额&quot;</span>] != <span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> zfmjs &gt; <span class="number">0</span>:</span><br><span class="line">            kdj = <span class="string">f&quot;<span class="subst">&#123;sjzfje / zfmjs:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            kdj = <span class="string">&quot;本地沒有銷量&quot;</span></span><br><span class="line">        txt = qc[qc[<span class="string">&quot;买家实际支付金额&quot;</span>] != <span class="number">0</span>]</span><br><span class="line">        <span class="keyword">if</span> zfmjs &gt; <span class="number">0</span>:</span><br><span class="line">            po = <span class="string">f&quot;<span class="subst">&#123;txt[<span class="string">&#x27;买家实际支付金额&#x27;</span>].mode()[<span class="number">0</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            po = <span class="string">&quot;本地沒有銷量&quot;</span></span><br><span class="line">        ni = <span class="built_in">sum</span>(zt[<span class="string">&quot;买家实际支付金额&quot;</span>])</span><br><span class="line">        ll = <span class="string">f&quot;<span class="subst">&#123;(sjzfje / ni) * <span class="number">100</span>:<span class="number">.2</span>f&#125;</span>%&quot;</span></span><br><span class="line">        <span class="keyword">return</span> [fkzhl, qefkzhl, zfzje, kdj, po, ll]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.8：用户职位信息统计</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">jobStatistics</span>(<span class="params">self, occupation: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>:</span><br><span class="line">        url =<span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/15930/67/fj_jobstatics.xlsx&#x27;</span></span><br><span class="line">        chipo = pd.read_excel(url)</span><br><span class="line">        chipo1 = chipo[chipo[<span class="string">&quot;occupation&quot;</span>] == occupation]</span><br><span class="line">        num = <span class="string">&quot;&#123;:.2%&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(chipo1[chipo1[<span class="string">&quot;gender&quot;</span>]==<span class="string">&quot;F&quot;</span>]) / <span class="built_in">len</span>(chipo1))</span><br><span class="line">        num1 = chipo.groupby([<span class="string">&quot;occupation&quot;</span>,<span class="string">&quot;gender&quot;</span>]).count()[<span class="string">&quot;user_id&quot;</span>].unstack().fillna(<span class="number">0</span>)</span><br><span class="line">        num1[<span class="string">&quot;占比&quot;</span>] = num1[<span class="string">&quot;F&quot;</span>] / (num1[<span class="string">&quot;F&quot;</span>] + num1[<span class="string">&quot;M&quot;</span>])</span><br><span class="line">        <span class="keyword">return</span> [num,<span class="built_in">int</span>(num1[<span class="string">&quot;占比&quot;</span>].rank(ascending = <span class="literal">False</span>)[occupation])]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup</title>
      <link href="/2024/12/18/BeautifulSoup/"/>
      <url>/2024/12/18/BeautifulSoup/</url>
      
        <content type="html"><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">res = requests.get(<span class="string">&#x27;https://www.something.com/&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(res.text, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.title)</span><br><span class="line"><span class="built_in">print</span>(soup.title.name)</span><br><span class="line"><span class="built_in">print</span>(soup.title.parent)  <span class="comment"># 找到父级</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;Dormouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.p.children))  <span class="comment"># 子节点可以调用contents 和 children属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>父级</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="string">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.a.parent)  <span class="comment"># 找到父级</span></span><br></pre></td></tr></table></figure><p>多个父级</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;</span></span><br><span class="line"><span class="string">Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.a.parents))  <span class="comment"># 找到父级</span></span><br></pre></td></tr></table></figure><p>兄弟</p><p><strong>next_sibling、previous_sibling、next_siblings、previous_siblings</strong>这四个属性来获取。</p><p>而next_siblings和previous_siblings是获取前面和后面的兄弟节点，返回的类型依然是生成器类型。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;Elsie&lt;/a&gt;hello</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.a.next_sibling)  <span class="comment"># next_sibling上个兄弟元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.a.next_siblings))</span><br><span class="line"><span class="built_in">print</span>(soup.a.previous_sibling)  <span class="comment"># previous_sibling下个兄弟元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(soup.a.previous_siblings))</span><br></pre></td></tr></table></figure><h2 id="方法选择器"><a href="#方法选择器" class="headerlink" title="方法选择器"></a>方法选择器</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">html_doc = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse&#x27;s story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class=&quot;title&quot; name=&quot;Dormouse&quot;&gt;&lt;b&gt;The Dormouse&#x27;s story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/elsie&quot; class=&quot;sister&quot; id=&quot;link1&quot;&gt;&lt;span&gt;Elsie&lt;/span&gt;&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/lacie&quot; class=&quot;sister&quot; id=&quot;link2&quot;&gt;&lt;span&gt;Lacie&lt;/span&gt;&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href=&quot;http://example.com/tillie&quot; class=&quot;sister&quot; id=&quot;link3&quot;&gt;&lt;span&gt;Tillie&lt;/span&gt;&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class=&quot;story&quot;&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(name=<span class="string">&#x27;p&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(attrs=&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;link1&#x27;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(attrs=&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Dormouse&#x27;</span>&#125;))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(class_=<span class="string">&#x27;sister&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(soup.find_all(<span class="built_in">id</span>=<span class="string">&#x27;link1&#x27;</span>))</span><br></pre></td></tr></table></figure><h2 id="BeautifulSoup-后继元素"><a href="#BeautifulSoup-后继元素" class="headerlink" title="BeautifulSoup 后继元素"></a>BeautifulSoup 后继元素</h2><p>使用<code>descendants</code>属性，我们可以获得标签的所有后代（所有级别的子级）。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;index.html&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    contents = f.read()</span><br><span class="line"></span><br><span class="line">    soup = BeautifulSoup(contents, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    root = soup.body</span><br><span class="line"></span><br><span class="line">    root_childs = [e.name <span class="keyword">for</span> e <span class="keyword">in</span> root.descendants <span class="keyword">if</span> e.name <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>]</span><br><span class="line">    <span class="built_in">print</span>(root_childs) <span class="comment"># [&#x27;h2&#x27;, &#x27;ul&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;li&#x27;, &#x27;p&#x27;, &#x27;p&#x27;]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JIeba文本处理</title>
      <link href="/2024/12/16/Jieba%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
      <url>/2024/12/16/Jieba%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="JIeba文本处理"><a href="#JIeba文本处理" class="headerlink" title="JIeba文本处理"></a>JIeba文本处理</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 启动paddle模式。 0.40版之后开始支持，早期版本不支持</span></span><br><span class="line">jieba.enable_paddle()</span><br><span class="line">strs=[<span class="string">&quot;我来到北京清华大学&quot;</span>,<span class="string">&quot;乒乓球拍卖完了&quot;</span>,<span class="string">&quot;中国科学技术大学&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">str</span> <span class="keyword">in</span> strs:</span><br><span class="line">    seg_list = jieba.cut(<span class="built_in">str</span>,use_paddle=<span class="literal">True</span>) <span class="comment"># 使用paddle模式</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Paddle Mode: &quot;</span> + <span class="string">&#x27;/&#x27;</span>.join(<span class="built_in">list</span>(seg_list)))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 全模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Full Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精确模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;我来到北京清华大学&quot;</span>, cut_all=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Default Mode: &quot;</span> + <span class="string">&quot;/ &quot;</span>.join(seg_list))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 默认是精确模式</span></span><br><span class="line">seg_list = jieba.cut(<span class="string">&quot;他来到了网易杭研大厦&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>.join(seg_list))</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 搜索引擎模式</span></span><br><span class="line">seg_list = jieba.cut_for_search(<span class="string">&quot;小明硕士毕业于中国科学院计算所，后在日本京都大学深造&quot;</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;, &quot;</span>.join(seg_list))</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">【全模式】: 我/ 来到/ 北京/ 清华/ 清华大学/ 华大/ 大学</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">【精确模式】: 我/ 来到/ 北京/ 清华大学</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">【新词识别】：他, 来到, 了, 网易, 杭研, 大厦    (此处，“杭研”并没有在词典中，但是也被Viterbi算法识别出来了)</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">【搜索引擎模式】： 小明, 硕士, 毕业, 于, 中国, 科学, 学院, 科学院, 中国科学院, 计算, 计算所, 后, 在, 日本, 京都, 大学, 日本京都大学, 深造</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="jieba三种模式"><a href="#jieba三种模式" class="headerlink" title="jieba三种模式"></a>jieba三种模式</h3><ul><li><code>jieba.cut()</code>：生成的是一个生成器，generator，也就是可以通过for循环来取里面的每一个词。</li><li><code>jieba.lcut()</code>：生成一个list</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">st = <span class="string">&#x27;注意：该代码tf计算使用的是整个语料，这里只是举个简单的例子，大家在写的时候按文档计算词频即可！我这里就不做修改了&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(st))  <span class="comment"># 精简模式</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut(st, cut_all=<span class="literal">True</span>))  <span class="comment"># 全模式，使用cut_all=True 指定</span></span><br><span class="line"><span class="built_in">print</span>(jieba.lcut_for_search(st))  <span class="comment"># 搜素引擎模式</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>案例 统计出现次数最多的</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">txt = <span class="built_in">open</span>(<span class="string">&quot;三国演义.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line">words = jieba.lcut(txt)     <span class="comment"># 使用精确模式对文本进行分词</span></span><br><span class="line">counts = &#123;&#125;     <span class="comment"># 通过键值对的形式存储词语及其出现的次数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(word) == <span class="number">1</span>:    <span class="comment"># 单个词语不计算在内</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        counts[word] = counts.get(word, <span class="number">0</span>) + <span class="number">1</span>    <span class="comment"># 遍历所有词语，每出现一次其对应的值加 1</span></span><br><span class="line"></span><br><span class="line">items = <span class="built_in">list</span>(counts.items())</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)    <span class="comment"># 根据词语出现的次数进行从大到小排序</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    word, count = items[i]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:&lt;5&#125;&#123;1:&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(word, count))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">aliceText</span>(<span class="params">self, word: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&#x27;http://72.itmc.org.cn:80/JS001/data/user/16937/76/fj_alice_adventure.txt&#x27;</span></span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        words = response.text.lower()</span><br><span class="line">        word = word.lower()  <span class="comment"># 转小写</span></span><br><span class="line">        counts = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> s <span class="keyword">in</span> words.split():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(s) &lt;= <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                counts[s] = counts.get(s,<span class="number">0</span>) + <span class="number">1</span> <span class="comment"># 遍历所有词语，每出现一次其对应的值加 1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 字典转换二维数组</span></span><br><span class="line">        items = <span class="built_in">list</span>(counts.items())<span class="comment">#list 里面存放的是 元组</span></span><br><span class="line">        <span class="comment"># 排序</span></span><br><span class="line">        items.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) <span class="comment"># 降序</span></span><br><span class="line">        <span class="built_in">print</span>(items)</span><br><span class="line">        <span class="keyword">return</span> counts[word]</span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">solu.aliceText(<span class="string">&#x27;Pictures&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Jieba实现TF-IDF算法"><a href="#Jieba实现TF-IDF算法" class="headerlink" title="Jieba实现TF-IDF算法"></a><strong>Jieba实现TF-IDF算法</strong></h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;关键词是能够表达文档中心内容的词语，常用于计算机系统标引论文内容特征、</span></span><br><span class="line"><span class="string">信息检索、系统汇集以供读者检阅。关键词提取是文本挖掘领域的一个分支，是文本检索、</span></span><br><span class="line"><span class="string">文档比较、摘要生成、文档分类和聚类等文本挖掘研究的基础性工作&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">keywords = jieba.analyse.extract_tags(text, topK=<span class="number">5</span>, withWeight=<span class="literal">False</span>, allowPOS=())</span><br><span class="line"><span class="built_in">print</span>(keywords)  <span class="comment"># [&#x27;文档&#x27;, &#x27;文本&#x27;, &#x27;关键词&#x27;, &#x27;挖掘&#x27;, &#x27;文本检索&#x27;]</span></span><br></pre></td></tr></table></figure><blockquote><p>公式：<code>jieba.analyse.extract_tags(text, topK=5, withWeight=False, allowPOS=())</code></p><ul><li><code>text</code>：为待提取的文本</li><li><code>topK</code>：权重最大的关键字，默认值为 20</li><li><code>withWeight</code>：是否返回关键字的权重，默认为 <code>False</code></li><li><code>allowPOS</code>：指定词性，默认为空，即不筛选</li></ul></blockquote><h3 id="Jieba实现Textrank算法"><a href="#Jieba实现Textrank算法" class="headerlink" title="Jieba实现Textrank算法"></a>Jieba实现Textrank算法</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jieba.analyse</span><br><span class="line"></span><br><span class="line">text = <span class="string">&#x27;&#x27;&#x27;关键词是能够表达文档中心内容的词语，常用于计算机系统标引论文内容特征、</span></span><br><span class="line"><span class="string">信息检索、系统汇集以供读者检阅。关键词提取是文本挖掘领域的一个分支，是文本检索、</span></span><br><span class="line"><span class="string">文档比较、摘要生成、文档分类和聚类等文本挖掘研究的基础性工作&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">keyword = jieba.analyse.textrank(text, topK=<span class="number">5</span>, withWeight=<span class="literal">False</span>, allowPOS=(<span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;ns&#x27;</span>, <span class="string">&#x27;nr&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(keyword)  <span class="comment"># [&#x27;文档&#x27;, &#x27;内容&#x27;, &#x27;文本&#x27;, &#x27;特征&#x27;, &#x27;词语&#x27;]</span></span><br></pre></td></tr></table></figure><p>中文文本：《三国演义》 分析人物<a href="https://python123.io/resources/pye/threekingdoms.txt">https://python123.io/resources/pye/threekingdoms.txt</a></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">中文文本分词,使用字典表达词频</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">self, ren_name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        url = <span class="string">&#x27;https://python123.io/resources/pye/threekingdoms.txt&#x27;</span></span><br><span class="line">        r = requests.get(url)</span><br><span class="line">        r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        words = jieba.lcut(r.text)</span><br><span class="line">        name = <span class="built_in">dict</span>()</span><br><span class="line">        jieba</span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(word) &lt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;诸葛亮&#x27;</span>,<span class="string">&#x27;孔明曰&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;孔明&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;关公&#x27;</span>,<span class="string">&#x27;云长&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;关羽&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;玄德&#x27;</span>,<span class="string">&#x27;玄德曰&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;刘备&#x27;</span></span><br><span class="line">            <span class="keyword">elif</span> word <span class="keyword">in</span> (<span class="string">&#x27;孟德&#x27;</span>, <span class="string">&#x27;丞相&#x27;</span>):</span><br><span class="line">                rword = <span class="string">&#x27;曹操&#x27;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rword = word</span><br><span class="line">            name[rword] = name.get(rword, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> name[ren_name]</span><br><span class="line"></span><br><span class="line">s = Solution()</span><br><span class="line"><span class="built_in">print</span>(s.fun(<span class="string">&#x27;曹操&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们发现明明是同一个人,不过有别的称号罢了,但是统计的却不一样,所以我们要进行修改:</p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用模块大全（总结）</title>
      <link href="/2024/12/12/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%A4%A7%E5%85%A8%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/"/>
      <url>/2024/12/12/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%A4%A7%E5%85%A8%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Python常用模块大全（总结）"><a href="#Python常用模块大全（总结）" class="headerlink" title="Python常用模块大全（总结）"></a>Python常用模块大全（总结）</h1><h2 id="os模块："><a href="#os模块：" class="headerlink" title="os模块："></a>os模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.remove() 删除文件 </span><br><span class="line">os.unlink() 删除文件 </span><br><span class="line">os.rename() 重命名文件 </span><br><span class="line">os.listdir() 列出指定目录下所有文件 </span><br><span class="line">os.chdir() 改变当前工作目录</span><br><span class="line">os.getcwd() 获取当前文件路径</span><br><span class="line">os.mkdir() 新建目录</span><br><span class="line">os.rmdir() 删除空目录(删除非空目录, 使用shutil.rmtree())</span><br><span class="line">os.makedirs() 创建多级目录</span><br><span class="line">os.removedirs() 删除多级目录</span><br><span class="line">os.stat(file) 获取文件属性</span><br><span class="line">os.chmod(file) 修改文件权限</span><br><span class="line">os.utime(file) 修改文件时间戳</span><br><span class="line">os.name(file) 获取操作系统标识</span><br><span class="line">os.system() 执行操作系统命令</span><br><span class="line">os.execvp() 启动一个新进程</span><br><span class="line">os.fork() 获取父进程ID，在子进程返回中返回0</span><br><span class="line">os.execvp() 执行外部程序脚本（Uinx）</span><br><span class="line">os.spawn() 执行外部程序脚本（Windows）</span><br><span class="line">os.access(path, mode) 判断文件权限(详细参考cnblogs)</span><br><span class="line">os.wait() 暂时未知</span><br><span class="line">os.path模块：</span><br><span class="line">os.path.split(filename) 将文件路径和文件名分割(会将最后一个目录作为文件名而分离)</span><br><span class="line">os.path.splitext(filename) 将文件路径和文件扩展名分割成一个元组</span><br><span class="line">os.path.dirname(filename) 返回文件路径的目录部分</span><br><span class="line">os.path.basename(filename) 返回文件路径的文件名部分</span><br><span class="line">os.path.join(dirname,basename) 将文件路径和文件名凑成完整文件路径</span><br><span class="line">os.path.abspath(name) 获得绝对路径</span><br><span class="line">os.path.splitunc(path) 把路径分割为挂载点和文件名</span><br><span class="line">os.path.normpath(path) 规范path字符串形式</span><br><span class="line">os.path.exists() 判断文件或目录是否存在</span><br><span class="line">os.path.isabs() 如果path是绝对路径，返回True</span><br><span class="line">os.path.realpath(path) #返回path的真实路径</span><br><span class="line">os.path.relpath(path[, start]) #从start开始计算相对路径 </span><br><span class="line">os.path.normcase(path) #转换path的大小写和斜杠</span><br><span class="line">os.path.isdir() 判断name是不是一个目录，name不是目录就返回false</span><br><span class="line">os.path.isfile() 判断name是不是一个文件，不存在返回false</span><br><span class="line">os.path.islink() 判断文件是否连接文件,返回boolean</span><br><span class="line">os.path.ismount() 指定路径是否存在且为一个挂载点，返回boolean</span><br><span class="line">os.path.samefile() 是否相同路径的文件，返回boolean</span><br><span class="line">os.path.getatime() 返回最近访问时间 浮点型</span><br><span class="line">os.path.getmtime() 返回上一次修改时间 浮点型</span><br><span class="line">os.path.getctime() 返回文件创建时间 浮点型</span><br><span class="line">os.path.getsize() 返回文件大小 字节单位</span><br><span class="line">os.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径</span><br><span class="line">os.path.lexists #路径存在则返回True,路径损坏也返回True</span><br><span class="line">os.path.expanduser(path) #把path中包含的”~”和”~user”转换成用户目录</span><br><span class="line">os.path.expandvars(path) #根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span><br><span class="line">os.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件</span><br><span class="line">os.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件</span><br><span class="line">os.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组</span><br><span class="line">os.path.walk(path, visit, arg) #遍历path，给每个path执行一个函数详细见手册</span><br><span class="line">os.path.supports_unicode_filenames() 设置是否支持unicode路径名</span><br></pre></td></tr></table></figure><h2 id="stat模块："><a href="#stat模块：" class="headerlink" title="stat模块："></a>stat模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述os.stat()返回的文件属性列表中各值的意义</span><br><span class="line">fileStats = os.stat(path) 获取到的文件属性列表</span><br><span class="line">fileStats[stat.ST_MODE] 获取文件的模式</span><br><span class="line">fileStats[stat.ST_SIZE] 文件大小</span><br><span class="line">fileStats[stat.ST_MTIME] 文件最后修改时间</span><br><span class="line">fileStats[stat.ST_ATIME] 文件最后访问时间</span><br><span class="line">fileStats[stat.ST_CTIME] 文件创建时间</span><br><span class="line">stat.S_ISDIR(fileStats[stat.ST_MODE]) 是否目录</span><br><span class="line">stat.S_ISREG(fileStats[stat.ST_MODE]) 是否一般文件</span><br><span class="line">stat.S_ISLNK(fileStats[stat.ST_MODE]) 是否连接文件</span><br><span class="line">stat.S_ISSOCK(fileStats[stat.ST_MODE]) 是否COCK文件</span><br><span class="line">stat.S_ISFIFO(fileStats[stat.ST_MODE]) 是否命名管道</span><br><span class="line">stat.S_ISBLK(fileStats[stat.ST_MODE]) 是否块设备</span><br><span class="line">stat.S_ISCHR(fileStats[stat.ST_MODE]) 是否字符设置</span><br></pre></td></tr></table></figure><h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块:"></a>sys模块:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.argv 命令行参数List，第一个元素是程序本身路径 </span><br><span class="line">sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </span><br><span class="line">sys.modules.keys() 返回所有已经导入的模块列表</span><br><span class="line">sys.modules 返回系统导入的模块字段，key是模块名，value是模块 </span><br><span class="line">sys.exc_info() 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span><br><span class="line">sys.exit(n) 退出程序，正常退出时exit(0)</span><br><span class="line">sys.hexversion 获取Python解释程序的版本值，16进制格式如：0x020403F0</span><br><span class="line">sys.version 获取Python解释程序的版本信息</span><br><span class="line">sys.platform 返回操作系统平台名称</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdout.write(‘aaa‘) 标准输出内容</span><br><span class="line">sys.stdout.writelines() 无换行输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stdin.read() 输入一行</span><br><span class="line">sys.stderr 错误输出</span><br><span class="line">sys.exc_clear() 用来清除当前线程所出现的当前的或最近的错误信息 </span><br><span class="line">sys.exec_prefix 返回平台独立的python文件安装的位置 </span><br><span class="line">sys.byteorder 本地字节规则的指示器，big-endian平台的值是‘big‘,little-endian平台的值是‘little‘ </span><br><span class="line">sys.copyright 记录python版权相关的东西 </span><br><span class="line">sys.api_version 解释器的C的API版本 </span><br><span class="line">sys.version_info ‘final‘表示最终,也有‘candidate‘表示候选，表示版本级别，是否有后继的发行 </span><br><span class="line">sys.getdefaultencoding() 返回当前你所用的默认的字符编码格式 </span><br><span class="line">sys.getfilesystemencoding() 返回将Unicode文件名转换成系统文件名的编码的名字 </span><br><span class="line">sys.builtin_module_names Python解释器导入的内建模块列表 </span><br><span class="line">sys.executable Python解释程序路径 </span><br><span class="line">sys.getwindowsversion() 获取Windows的版本 </span><br><span class="line">sys.stdin.readline() 从标准输入读一行，sys.stdout.write(“a”) 屏幕输出a</span><br><span class="line">sys.setdefaultencoding(name) 用来设置当前默认的字符编码(详细使用参考文档) </span><br><span class="line">sys.displayhook(value) 如果value非空，这个函数会把他输出到sys.stdout(详细使用参考文档)</span><br></pre></td></tr></table></figure><h2 id="datetime-date-time模块："><a href="#datetime-date-time模块：" class="headerlink" title="datetime,date,time模块："></a>datetime,date,time模块：</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">datetime.date.today() 本地日期对象,(用<span class="built_in">str</span>函数可得到它的字面表示(<span class="number">2014</span>-03-<span class="number">24</span>))</span><br><span class="line">datetime.date.isoformat(obj) 当前[年-月-日]字符串表示(<span class="number">2014</span>-03-<span class="number">24</span>)</span><br><span class="line">datetime.date.fromtimestamp() 返回一个日期对象，参数是时间戳,返回 [年-月-日]</span><br><span class="line">datetime.date.weekday(obj) 返回一个日期对象的星期数,周一是<span class="number">0</span></span><br><span class="line">datetime.date.isoweekday(obj) 返回一个日期对象的星期数,周一是<span class="number">1</span></span><br><span class="line">datetime.date.isocalendar(obj) 把日期对象返回一个带有年月日的元组</span><br><span class="line">datetime对象：</span><br><span class="line">datetime.datetime.today() 返回一个包含本地时间(含微秒数)的datetime对象 <span class="number">2014</span>-03-<span class="number">24</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">50.419000</span></span><br><span class="line">datetime.datetime.now([tz]) 返回指定时区的datetime对象 <span class="number">2014</span>-03-<span class="number">24</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">50.419000</span></span><br><span class="line">datetime.datetime.utcnow() 返回一个零时区的datetime对象</span><br><span class="line">datetime.fromtimestamp(timestamp[,tz]) 按时间戳返回一个datetime对象，可指定时区,可用于strftime转换为日期表示 </span><br><span class="line">datetime.utcfromtimestamp(timestamp) 按时间戳返回一个UTC-datetime对象</span><br><span class="line">datetime.datetime.strptime(‘<span class="number">2014</span>-03-<span class="number">16</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">21</span>‘,”%Y-%m-%d %H:%M:%S”) 将字符串转为datetime对象</span><br><span class="line">datetime.datetime.strftime(datetime.datetime.now(), ‘%Y%m%d %H%M%S‘) 将datetime对象转换为<span class="built_in">str</span>表示形式</span><br><span class="line">datetime.date.today().timetuple() 转换为时间戳datetime元组对象，可用于转换时间戳</span><br><span class="line">datetime.datetime.now().timetuple()</span><br><span class="line">time.mktime(timetupleobj) 将datetime元组对象转为时间戳</span><br><span class="line">time.time() 当前时间戳</span><br><span class="line">time.localtime</span><br><span class="line">time.gmtime</span><br></pre></td></tr></table></figure><h2 id="hashlib-md5模块："><a href="#hashlib-md5模块：" class="headerlink" title="hashlib,md5模块："></a>hashlib,md5模块：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hashlib.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</span><br><span class="line">md5.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</span><br></pre></td></tr></table></figure><h2 id="random模块："><a href="#random模块：" class="headerlink" title="random模块："></a>random模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random.random() 产生0-1的随机浮点数</span><br><span class="line">random.uniform(a, b) 产生指定范围内的随机浮点数</span><br><span class="line">random.randint(a, b) 产生指定范围内的随机整数</span><br><span class="line">random.randrange([start], stop[, step]) 从一个指定步长的集合中产生随机数</span><br><span class="line">random.choice(sequence) 从序列中产生一个随机数</span><br><span class="line">random.shuffle(x[, random]) 将一个列表中的元素打乱</span><br><span class="line">random.sample(sequence, k) 从序列中随机获取指定长度的片断</span><br></pre></td></tr></table></figure><h2 id="types模块："><a href="#types模块：" class="headerlink" title="types模块："></a>types模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存了所有数据类型名称。</span><br><span class="line">if type(‘1111‘) == types.StringType:</span><br><span class="line">MySQLdb模块：</span><br><span class="line">MySQLdb.get_client_info() 获取API版本</span><br><span class="line">MySQLdb.Binary(‘string‘) 转为二进制数据形式</span><br><span class="line">MySQLdb.escape_string(‘str‘) 针对mysql的字符转义函数</span><br><span class="line">MySQLdb.DateFromTicks(1395842548) 把时间戳转为datetime.date对象实例</span><br><span class="line">MySQLdb.TimestampFromTicks(1395842548) 把时间戳转为datetime.datetime对象实例</span><br><span class="line">MySQLdb.string_literal(‘str‘) 字符转义</span><br><span class="line">MySQLdb.cursor()游标对象上的方法：《python核心编程》P624</span><br></pre></td></tr></table></figure><h2 id="atexit模块："><a href="#atexit模块：" class="headerlink" title="atexit模块："></a>atexit模块：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">atexit.register(fun,args,args2..) 注册函数func，在解析器退出前调用该函数</span><br></pre></td></tr></table></figure><h2 id="string模块"><a href="#string模块" class="headerlink" title="string模块"></a>string模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.capitalize() 把字符串的第一个字符大写</span><br><span class="line">str.center(width) 返回一个原字符串居中，并使用空格填充到width长度的新字符串</span><br><span class="line">str.ljust(width) 返回一个原字符串左对齐，用空格填充到指定长度的新字符串</span><br><span class="line">str.rjust(width) 返回一个原字符串右对齐，用空格填充到指定长度的新字符串</span><br><span class="line">str.zfill(width) 返回字符串右对齐，前面用0填充到指定长度的新字符串</span><br><span class="line">str.count(str,[beg,len]) 返回子字符串在原字符串出现次数，beg,len是范围</span><br><span class="line">str.decode(encodeing[,replace]) 解码string,出错引发ValueError异常</span><br><span class="line">str.encode(encodeing[,replace]) 解码string</span><br><span class="line">str.endswith(substr[,beg,end]) 字符串是否以substr结束，beg,end是范围</span><br><span class="line">str.startswith(substr[,beg,end]) 字符串是否以substr开头，beg,end是范围</span><br><span class="line">str.expandtabs(tabsize = 8) 把字符串的tab转为空格，默认为8个</span><br><span class="line">str.find(str,[stat,end]) 查找子字符串在字符串第一次出现的位置，否则返回-1</span><br><span class="line">str.index(str,[beg,end]) 查找子字符串在指定字符中的位置，不存在报异常</span><br><span class="line">str.isalnum() 检查字符串是否以字母和数字组成，是返回true否则False</span><br><span class="line">str.isalpha() 检查字符串是否以纯字母组成，是返回true,否则false</span><br><span class="line">str.isdecimal() 检查字符串是否以纯十进制数字组成，返回布尔值</span><br><span class="line">str.isdigit() 检查字符串是否以纯数字组成，返回布尔值</span><br><span class="line">str.islower() 检查字符串是否全是小写，返回布尔值</span><br><span class="line">str.isupper() 检查字符串是否全是大写，返回布尔值</span><br><span class="line">str.isnumeric() 检查字符串是否只包含数字字符，返回布尔值</span><br><span class="line">str.isspace() 如果str中只包含空格，则返回true,否则FALSE</span><br><span class="line">str.title() 返回标题化的字符串（所有单词首字母大写，其余小写）</span><br><span class="line">str.istitle() 如果字符串是标题化的(参见title())则返回true,否则false</span><br><span class="line">str.join(seq) 以str作为连接符，将一个序列中的元素连接成字符串</span><br><span class="line">str.split(str=‘‘,num) 以str作为分隔符，将一个字符串分隔成一个序列，num是被分隔的字符串</span><br><span class="line">str.splitlines(num) 以行分隔，返回各行内容作为元素的列表</span><br><span class="line">str.lower() 将大写转为小写</span><br><span class="line">str.upper() 转换字符串的小写为大写</span><br><span class="line">str.swapcase() 翻换字符串的大小写</span><br><span class="line">str.lstrip() 去掉字符左边的空格和回车换行符</span><br><span class="line">str.rstrip() 去掉字符右边的空格和回车换行符</span><br><span class="line">str.strip() 去掉字符两边的空格和回车换行符</span><br><span class="line">str.partition(substr) 从substr出现的第一个位置起，将str分割成一个3元组。</span><br><span class="line">str.replace(str1,str2,num) 查找str1替换成str2，num是替换次数</span><br><span class="line">str.rfind(str[,beg,end]) 从右边开始查询子字符串</span><br><span class="line">str.rindex(str,[beg,end]) 从右边开始查找子字符串位置 </span><br><span class="line">str.rpartition(str) 类似partition函数，不过从右边开始查找</span><br><span class="line">str.translate(str,del=‘‘) 按str给出的表转换string的字符，del是要过虑的字符</span><br></pre></td></tr></table></figure><h2 id="urllib模块："><a href="#urllib模块：" class="headerlink" title="urllib模块："></a>urllib模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urllib.quote(string[,safe]) 对字符串进行编码。参数safe指定了不需要编码的字符</span><br><span class="line">urllib.unquote(string) 对字符串进行解码</span><br><span class="line">urllib.quote_plus(string[,safe]) 与urllib.quote类似，但这个方法用‘+‘来替换‘ ‘，而quote用‘%20‘来代替‘ ‘</span><br><span class="line">urllib.unquote_plus(string ) 对字符串进行解码</span><br><span class="line">urllib.urlencode(query[,doseq]) 将dict或者包含两个元素的元组列表转换成url参数。</span><br><span class="line">例如 字典&#123;‘name‘:‘wklken‘,‘pwd‘:‘123‘&#125;将被转换为”name=wklken&amp;pwd=123″</span><br><span class="line">urllib.pathname2url(path) 将本地路径转换成url路径</span><br><span class="line">urllib.url2pathname(path) 将url路径转换成本地路径</span><br><span class="line">urllib.urlretrieve(url[,filename[,reporthook[,data]]]) 下载远程数据到本地</span><br><span class="line">filename：指定保存到本地的路径（若未指定该，urllib生成一个临时文件保存数据）</span><br><span class="line">reporthook：回调函数，当连接上服务器、以及相应的数据块传输完毕的时候会触发该回调</span><br><span class="line">data：指post到服务器的数据</span><br><span class="line">rulrs = urllib.urlopen(url[,data[,proxies]]) 抓取网页信息，[data]post数据到Url,proxies设置的代理</span><br><span class="line">urlrs.readline() 跟文件对象使用一样</span><br><span class="line">urlrs.readlines() 跟文件对象使用一样</span><br><span class="line">urlrs.fileno() 跟文件对象使用一样</span><br><span class="line">urlrs.close() 跟文件对象使用一样</span><br><span class="line">urlrs.info() 返回一个httplib.HTTPMessage对象，表示远程服务器返回的头信息</span><br><span class="line">urlrs.getcode() 获取请求返回状态HTTP状态码</span><br><span class="line">urlrs.geturl() 返回请求的URL</span><br></pre></td></tr></table></figure><h2 id="re模块："><a href="#re模块：" class="headerlink" title="re模块："></a>re模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一.常用正则表达式符号和语法：</span><br><span class="line">&#x27;.&#x27; 匹配所有字符串，除\n以外</span><br><span class="line">‘-’ 表示范围[0-9]</span><br><span class="line">&#x27;*&#x27; 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</span><br><span class="line">&#x27;+&#x27; 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+</span><br><span class="line">&#x27;^&#x27; 匹配字符串开头</span><br><span class="line">‘$’ 匹配字符串结尾 re</span><br><span class="line">&#x27;\&#x27; 转义字符， 使后一个字符改变原来的意思，如果字符串中有字符*需要匹配，可以\*或者字符集[*] re.findall(r&#x27;3\*&#x27;,&#x27;3*ds&#x27;)结[&#x27;3*&#x27;]</span><br><span class="line">&#x27;*&#x27; 匹配前面的字符0次或多次 re.findall(&quot;ab*&quot;,&quot;cabc3abcbbac&quot;)结果：[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;a&#x27;]</span><br><span class="line">‘?’ 匹配前一个字符串0次或1次 re.findall(&#x27;ab?&#x27;,&#x27;abcabcabcadf&#x27;)结果[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;a&#x27;]</span><br><span class="line">&#x27;&#123;m&#125;&#x27; 匹配前一个字符m次 re.findall(&#x27;cb&#123;1&#125;&#x27;,&#x27;bchbchcbfbcbb&#x27;)结果[&#x27;cb&#x27;, &#x27;cb&#x27;]</span><br><span class="line">&#x27;&#123;n,m&#125;&#x27; 匹配前一个字符n到m次 re.findall(&#x27;cb&#123;2,3&#125;&#x27;,&#x27;bchbchcbfbcbb&#x27;)结果[&#x27;cbb&#x27;]</span><br><span class="line">&#x27;\d&#x27; 匹配数字，等于[0-9] re.findall(&#x27;\d&#x27;,&#x27;电话:10086&#x27;)结果[&#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;8&#x27;, &#x27;6&#x27;]</span><br><span class="line">&#x27;\D&#x27; 匹配非数字，等于[^0-9] re.findall(&#x27;\D&#x27;,&#x27;电话:10086&#x27;)结果[&#x27;电&#x27;, &#x27;话&#x27;, &#x27;:&#x27;]</span><br><span class="line">&#x27;\w&#x27; 匹配字母和数字，等于[A-Za-z0-9] re.findall(&#x27;\w&#x27;,&#x27;alex123,./;;;&#x27;)结果[&#x27;a&#x27;, &#x27;l&#x27;, &#x27;e&#x27;, &#x27;x&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span><br><span class="line">&#x27;\W&#x27; 匹配非英文字母和数字,等于[^A-Za-z0-9] re.findall(&#x27;\W&#x27;,&#x27;alex123,./;;;&#x27;)结果[&#x27;,&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;;&#x27;, &#x27;;&#x27;, &#x27;;&#x27;]</span><br><span class="line">&#x27;\s&#x27; 匹配空白字符 re.findall(&#x27;\s&#x27;,&#x27;3*ds \t\n&#x27;)结果[&#x27; &#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;]</span><br><span class="line">&#x27;\S&#x27; 匹配非空白字符 re.findall(&#x27;\s&#x27;,&#x27;3*ds \t\n&#x27;)结果[&#x27;3&#x27;, &#x27;*&#x27;, &#x27;d&#x27;, &#x27;s&#x27;]</span><br><span class="line">&#x27;\A&#x27; 匹配字符串开头</span><br><span class="line">&#x27;\Z&#x27; 匹配字符串结尾</span><br><span class="line">&#x27;\b&#x27; 匹配单词的词首和词尾，单词被定义为一个字母数字序列，因此词尾是用空白符或非字母数字符来表示的</span><br><span class="line">&#x27;\B&#x27; 与\b相反，只在当前位置不在单词边界时匹配</span><br><span class="line">&#x27;(?P&lt;name&gt;...)&#x27; 分组，除了原有编号外在指定一个额外的别名 re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;)(?P&lt;birthday&gt;[0-9]&#123;8&#125;)&quot;,&quot;371481199306143242&quot;).groupdict(&quot;city&quot;) 结果&#123;&#x27;province&#x27;: &#x27;3714&#x27;, &#x27;city&#x27;: &#x27;81&#x27;, &#x27;birthday&#x27;: &#x27;19930614&#x27;&#125;</span><br><span class="line">[] 是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\s*]表示空格或者*号。</span><br><span class="line">二.常用的re函数：</span><br><span class="line">方法/属性 作用</span><br><span class="line">re.match(pattern, string, flags=0) 从字符串的起始位置匹配，如果起始位置匹配不成功的话，match()就返回none</span><br><span class="line">re.search(pattern, string, flags=0) 扫描整个字符串并返回第一个成功的匹配</span><br><span class="line">re.findall(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个列表返回</span><br><span class="line">re.finditer(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个迭代器返回</span><br><span class="line">re.sub(pattern, repl, string, count=0, flags=0) 替换匹配到的字符串</span><br></pre></td></tr></table></figure><h2 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceil:取大于等于x的最小的整数值，如果x是一个整数，则返回x</span><br><span class="line">copysign:把y的正负号加到x前面，可以使用0</span><br><span class="line">cos:求x的余弦，x必须是弧度</span><br><span class="line">degrees:把x从弧度转换成角度</span><br><span class="line">e:表示一个常量</span><br><span class="line">exp:返回math.e,也就是2.71828的x次方</span><br><span class="line">expm1:返回math.e的x(其值为2.71828)次方的值减１</span><br><span class="line">fabs:返回x的绝对值</span><br><span class="line">factorial:取x的阶乘的值</span><br><span class="line">floor:取小于等于x的最大的整数值，如果x是一个整数，则返回自身</span><br><span class="line">fmod:得到x/y的余数，其值是一个浮点数</span><br><span class="line">frexp:返回一个元组(m,e),其计算方式为：x分别除0.5和1,得到一个值的范围</span><br><span class="line">fsum:对迭代器里的每个元素进行求和操作</span><br><span class="line">gcd:返回x和y的最大公约数</span><br><span class="line">hypot:如果x是不是无穷大的数字,则返回True,否则返回False</span><br><span class="line">isfinite:如果x是正无穷大或负无穷大，则返回True,否则返回False</span><br><span class="line">isinf:如果x是正无穷大或负无穷大，则返回True,否则返回False</span><br><span class="line">isnan:如果x不是数字True,否则返回False</span><br><span class="line">ldexp:返回x*(2**i)的值</span><br><span class="line">log:返回x的自然对数，默认以e为基数，base参数给定时，将x的对数返回给定的base,计算式为：log(x)/log(base)</span><br><span class="line">log10:返回x的以10为底的对数</span><br><span class="line">log1p:返回x+1的自然对数(基数为e)的值</span><br><span class="line">log2:返回x的基2对数</span><br><span class="line">modf:返回由x的小数部分和整数部分组成的元组</span><br><span class="line">pi:数字常量，圆周率</span><br><span class="line">pow:返回x的y次方，即x**y</span><br><span class="line">radians:把角度x转换成弧度</span><br><span class="line">sin:求x(x为弧度)的正弦值</span><br><span class="line">sqrt:求x的平方根</span><br><span class="line">tan:返回x(x为弧度)的正切值</span><br><span class="line">trunc:返回x的整数部分</span><br></pre></td></tr></table></figure><h4 id="说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！"><a href="#说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！" class="headerlink" title="说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！"></a>说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！</h4>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python IDLE 使用教程</title>
      <link href="/2024/12/05/IDLE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2024/12/05/IDLE%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Python-IDLE-使用教程"><a href="#Python-IDLE-使用教程" class="headerlink" title="Python IDLE 使用教程"></a>Python IDLE 使用教程</h1><h3 id="IDLE字体的修改Options-Configure-IDLE"><a href="#IDLE字体的修改Options-Configure-IDLE" class="headerlink" title="IDLE字体的修改Options-Configure IDLE"></a>IDLE字体的修改Options-Configure IDLE</h3><ul><li>Font Face：设置字体 <code>courier</code>字体</li><li>Size：设置字体大小</li><li>Indentation Width：按一个Tab键缩进的长度，默认是四个空格</li></ul><p><strong>背景颜色</strong></p><p>如果想要将背景色设置为<strong>黑色</strong>，可以选择<code>Highlights</code>按钮，然后点击<code>idle dark</code>。切换之后就是如图所示效果。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/673e65265b3f3070fceb83f6b0426aab.png" alt="img"></p><h3 id="Python-IDLE-快捷键"><a href="#Python-IDLE-快捷键" class="headerlink" title="Python IDLE 快捷键"></a>Python IDLE 快捷键</h3><p><a href="https://www.bilibili.com/video/BV1Me4y1r7Dt/">BIlibili</a></p><ul><li><code>F5</code> 运行程序</li><li><code>Ctrl + [</code> 、<code>Ctrl + ]</code> 缩进代码 </li><li><code>Alt+3</code> 、<code>Alt+4</code> 注释、取消注释代码行 </li><li><code>Alt+5</code> 、<code>Alt+6</code> 切换缩进方式 空格&lt;&#x3D;&gt;Tab </li><li><code>Alt+/</code> 单词完成，&#x3D;&#x3D;只要文中出现过&#x3D;&#x3D;，就可以帮你&#x3D;&#x3D;自动补齐&#x3D;&#x3D;。多按几次可以循环选择 </li><li><code>Alt+M</code> 打开模块代码，<u>先选中模块</u>，然后按下此快捷键，打开该模块的py源码供浏览</li><li><code>F1</code> 打开Python文档</li><li><code>Ctrl+Z</code> 撤销一步操作 </li><li><code>Ctrl+Shift+Z</code> 恢复上—次的撤销操作 </li><li><code>Ctrl+C</code>、 <code>Ctrl+V</code> 复制，粘贴</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比赛内容</title>
      <link href="/2024/12/02/%E6%AF%94%E8%B5%9B%E5%86%85%E5%AE%B9/"/>
      <url>/2024/12/02/%E6%AF%94%E8%B5%9B%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛内容"><a href="#比赛内容" class="headerlink" title="比赛内容"></a>比赛内容</h1><p>比赛内容:包括 Python 语言基础与算法设计、Python 网页与文本分析、Python 数据处理与分析三项竞赛内容。赛项设置理论竞赛和实操竞赛两个环节，全部采用电脑作答的方式。</p><h3 id="（1）Python-语言基础与算法设计"><a href="#（1）Python-语言基础与算法设计" class="headerlink" title="（1）Python 语言基础与算法设计"></a>（1）Python 语言基础与算法设计</h3><p>本部分重点考察参赛选手对于 Python 基础语法和常见计算机算法的掌握情况与实际使用能力。赛项要求参赛选手能够根据任务要求，输出正确的计算结果。<br>任务考察点分为两方面，一方面考察参赛选手对于 Python基础语法中的掌握，例如**<u>逻辑判断、循环、遍历、字符串、列表、字典、元组、集合、函数、类</u>**等相关知识点;另一方面考察参赛选手的算法设计能力，例如常见的&#x3D;&#x3D;初级排序算法&#x3D;&#x3D;、&#x3D;&#x3D;查找算法&#x3D;&#x3D;等相关知识点。</p><h3 id="（2）Python-网页与文本分析"><a href="#（2）Python-网页与文本分析" class="headerlink" title="（2）Python 网页与文本分析"></a>（2）Python 网页与文本分析</h3><p>本部分考察点分为两方面，一方面需要选手了解常用&#x3D;&#x3D;网页结构&#x3D;&#x3D;，熟练使用 Python 相关工具获取内置专题**<u>页面的指定数据</u><strong>;另一方面需要选手了解 Python 常用</strong><u>文本处理与分析的模块</u>**(库)，能够根据任务要求完成指定操作并返回任务中所需要的数据。</p><h3 id="（3）Python-数据处理与分析"><a href="#（3）Python-数据处理与分析" class="headerlink" title="（3）Python 数据处理与分析"></a>（3）Python 数据处理与分析</h3><p>参赛选手可根据自己的专业方向与兴趣特长，合理选择考试任务方向合理分配考试时间，尽可能多地完成相关任务，得到任务期望输出的指定结果，提交准确高效的赛题解答代码。本部分需要使用的Python相关数据处理与分析的第三方包(库)，如 &#x3D;&#x3D;Numpy&#x3D;&#x3D; 和 &#x3D;&#x3D;Pandas&#x3D;&#x3D; 等，其均已内置于竞赛系统，无需参赛选手手动安装，参赛选手仅需要比赛时引入相关包(库)</p><p>能够熟练使用 &#x3D;&#x3D;Requests、 BeautifulSoup、Pandas、Numpy、Jieba、Pyecharts、Matplotlib&#x3D;&#x3D; 等常见 的 Python 包（库）来解决学习工作中的碰到的实际问题</p><h3 id="三、竞赛内容"><a href="#三、竞赛内容" class="headerlink" title="三、竞赛内容"></a>三、竞赛内容</h3><p>竞赛包括知识理论和上机实操两部分，均分为 Python 语言基础 与算法设计、Python 网页与文本分析、Python 数据处理与分析三项 竞赛内容。</p><table><thead><tr><th>竞赛内容</th><th>相关知识</th><th>技能要求</th></tr></thead><tbody><tr><td>Python 语言基 础与算法设计</td><td>Python 基础语法 和常见的算法与 数据结构等</td><td>掌握 Python &#x3D;&#x3D;基础语法&#x3D;&#x3D;和&#x3D;&#x3D;常见数据结构&#x3D;&#x3D;； 了解常见的计算机算法； 代码编写规范。</td></tr><tr><td>Python 网页与 文本分析</td><td>HTTP 协议、浏 览器原理、网页 基础、爬虫基本 原理、文件切分 清洗与分类等</td><td>熟悉 Python 网页分析常用的 Requests、 bs4 等包（库）； 掌握基于网页规则的信息抽取； 掌握 <code>Jieba</code>、<code>SnowNLP</code> 等文本分析库； 了解基本的自然语言语言解析规则与相 关应用场景精通正则表达式。</td></tr><tr><td>Python 数据处 理与分析</td><td>数 据 获 取 与 清 洗、数据分析、 基础统计分析等</td><td>熟悉 <code>Numpy</code>、<code>Pandas</code>、<code>Pyecharts</code>、<code>Matplotlib</code> 等数据处理与分析相关的包（库）； 掌握基础的数据处理与分析方法； 了解数据分析处理实际常用应用算法；</td></tr></tbody></table><blockquote><p>一共五个小时</p><p>上午两个半小时、下午两个半小时</p><p>上午 算法和爬虫</p><p>下午 数据处理与分析</p></blockquote><h3 id="九、成绩评定"><a href="#九、成绩评定" class="headerlink" title="九、成绩评定"></a>九、成绩评定</h3><p>（一）评分标准 Python 编程竞赛得分分为知识理论部分和上机实操部分，两者分 数比例设置为 2:8。</p><p> 实操部分分为模块 A：Python 语言基础与算法设计、Python 网页 与文本分析，模块 B：Python 数据处理与分析，模块 A、B 各占 50%， 实操中每个竞赛试题任务的最终得分等于任务得分 * 任务难度 系数，难度系数分为容易、中等、困难三个等级。 1.程序设计 每道程序设计任务的测试用例，分为公开测试用例和隐藏测试用 例两种，每个任务满分为 100 分，由任务基础分和任务完成分两部分 构成。 点击“提交代码”按钮，系统显示提交结果、提交次数、执行 用时，并计算该任务的任务基础分和任务完成分。 2.提交结果 点击“提交代码”按钮，提交结果为“全部通过”“部分通过”“未通 过”3 种状态： 全部通过：测试用例全部通过，程序无报错，程序执行时间未超 过规定上限。 部分通过：测试用例未全部通过，程序无报错，程序执行时间未 超过规定上限。 未通过：程序运行异常或程序执行时间超过规定上限。 3.任务基础分 任务基础分总分为 60 分。 点击提交代码，提交结果显示“全部通过”时，任务基础分为 60 分，并计算任务完成分。 点击提交代码，提交结果显示“部分通过”时，根据测试用例通过 数量计算相应任务基础分，而任务完成分为 0 分。 例如某参赛选手某个任务测试用例部分通过，提交次数为 3，系 统计算任务基础分&#x3D;42 分，则该任务最终得分&#x3D;任务基础分 42 分+任 务完成分 0 分&#x3D;42 分。 4.任务完成分 任务完成分最高为 40 分。 当提交结果显示“部分通过”和“未通过”时，任务完成分为 0 分。 只有提交结果显示“全部通过”，系统才能计算任务完成分。 任务完成分&#x3D; 40 * 0.8 ^ (提交次数-1），任务完成分最低为 0 分。 5.竞赛总成绩 参赛选手竞赛总成绩&#x3D; ∑各个任务最终得分*难度系数，竞赛总成 绩由完成的程序设计任务数量和任务难度决定，竞赛总成绩保留 2 位 小数。 6.成绩评定 评分方式为系统根据程序运行结果评分。</p><p>​</p><ul><li><a href="https://blog.ymypay.cn/index.php/2022/10/18/python_2022js/#htoc-3-9">AMEN博客</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Python》3小时期末速成课笔记</title>
      <link href="/2024/12/02/%E3%80%8APython%E3%80%8B3%E5%B0%8F%E6%97%B6%E6%9C%9F%E6%9C%AB%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/12/02/%E3%80%8APython%E3%80%8B3%E5%B0%8F%E6%97%B6%E6%9C%9F%E6%9C%AB%E9%80%9F%E6%88%90%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="《Python》3小时期末速成课笔记"><a href="#《Python》3小时期末速成课笔记" class="headerlink" title="《Python》3小时期末速成课笔记"></a>《Python》3小时期末速成课笔记</h1><p><a href="https://www.bilibili.com/video/BV1p94y1T7j5">BIlibili地址</a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><ul><li>变量与数据类型</li><li>表达式</li></ul><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li><p>指向对象的值的名称就是变量，也就是一种标识符，是对内存中的存储位置的命名。</p></li><li><p>对于不同的对象，有不同的类型，得到的内存地址也不一样，通过对得到的地址进行命名得到变量名称，我们将数据存入变量，为存储的数据设置不同的数据结构。</p></li><li><p>变量的值是在不断的动态变化的，Python的变量可以不声明直接赋值使用。由于Python采用动态类型（Dynamic Type），变量可以根据赋值类型决定变量的数据类型</p></li><li><p>&#x3D;&#x3D;在Python中，变量使用等号赋值以后会被创建，定义完成后可以直接使用&#x3D;&#x3D;，</p></li><li><p>变量命名规则:</p><blockquote><p>名称第一字符为英文字母或者下划线</p><p>名称不能使用python的关键字或保留字符</p><p>名称第一字符后可以使用英文字母、下划线和数字</p><p>名称区分大小写，单词与单词之间使用下划线连接</p></blockquote></li></ul><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Python有可以自由的改变变量的数据类型的动态类型和变量事先说明的&#x3D;&#x3D;静态类型&#x3D;&#x3D;，特定类型是数值数据存入相应的数据类型的变量中，相比下，动态数据类型更加灵活。</p><p>变量的数据类型有多种类型，Python3中有六个标准的数据类型:</p><ul><li>Numbers（数字类型）</li><li>Strings（字符串类型）</li><li>Lists（列表类型）</li><li>Tuples（元组类型）</li><li>Dictionaries（字典类型）</li><li>Sets（集合类型）</li></ul><p>Python内置的数字类型有&#x3D;&#x3D;整型（Integers）、浮点型（Floating point numbers）和复数（Complex numbers）&#x3D;&#x3D;三种，作为可以进行算术运算等的数据类型。</p><p>可以使用<code>type()</code>函数来查看数据类型</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="number">1</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><ol><li><p>整型（Integers）<br>整数类型(int)简称为整型，表示整数，包括正负的整数，如:0110、-123123456789。</p><p>Python的整型是长整型，能表达的数的范围是无限的，内存足够大，就能表示足够多的数。在使用整型的数还包括其它进制，0b开始的是二进制(binary)，0o开始的是八进制(octonary)，0x开始的十六进制(hexadecimal)，进制之间可以使用函数进行转换，使用时需要注意数值符合进制。</p></li><li><p>布尔型（Booleans）</p><p>布尔值是整型(Integers)的子类，用于逻辑判断真(True)或假(False)用数值1和0分别代表常量True和False。</p><p>在Python语言中，False可以是数值为0、对象为None或者是序列中的空字符串空列表、空元组。</p></li><li><p>浮点型（Float）</p><p>浮点型(Float)是含有小数的数值，用于实数表示，由正负号、数字和小数点组成，正号可以省略。如：-3.0、0.13。8个字节一个浮点，范围-1.8308~+1.8308的数均可以表示。</p></li><li><p>复数型（Complex）</p><p>复数类型(Complex)由实数和虚数组成，用于复数的表示，虚数部分需加上j或J，如：-1j、0j，1.0j。Python的复数类型是其他语言一般没有的。</p></li><li><p>字符串类型（Strings）</p><p>字符串(Strings)，在Python 中的字符串是一种对象类型，使用str表示，通常单引号’或者双引号””包裹起来。如果不想让反斜杠发生转义，可以在字符串前加个r表示原始字符串，加号+是字符串的连接符，星号*表示复制当前的字符串，紧跟的数字为复制的次数。</p><p>字符串是字符的序列，可以按照单个字符或字符片段进行索引</p><p>字符串包括两种序号体系:</p><ul><li>正向递归序列</li><li>反向递归序列</li></ul><p><img src="C:\Users\taichi\AppData\Roaming\Typora\typora-user-images\image-20241202081118976.png" alt="image-20241202081118976"></p></li></ol><h4 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h4><p>算术运算符主要是用于数字类型的数据基本运算，Python支持直接进行计算，也就是可以将python shell当计算器来使用。</p><table><thead><tr><th>运算符</th><th>说明</th><th>表达式</th><th>结果</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>10 + 24</td><td>34</td></tr><tr><td>-</td><td>减</td><td>10 -2</td><td>8</td></tr><tr><td>*</td><td>乘</td><td>12 * 2</td><td>24</td></tr><tr><td>&#x2F;</td><td>除</td><td>34&#x2F;10</td><td>3.4</td></tr><tr><td>%</td><td>取模：余数</td><td>34%10</td><td>4</td></tr><tr><td>**</td><td>幂</td><td>2 ** 4</td><td>16</td></tr><tr><td>&#x2F;&#x2F;</td><td>取整数：返回商数整数部分</td><td>34 &#x2F;&#x2F; 10</td><td>3</td></tr></tbody></table><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> + <span class="number">24</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">10</span> - <span class="number">2</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">12</span> * <span class="number">2</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">34</span> / <span class="number">10</span></span><br><span class="line"><span class="number">3.4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">34</span> % <span class="number">10</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> ** <span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">34</span> // <span class="number">10</span></span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>逻辑运算符为and（与）、or（或）、not（非）用于逻辑运算判断表达式的True或者False，通常与流程控制一起使用</p><ul><li><code>and</code>：表达式一边有False 就会返回False，当两边都是True时返True .</li><li><code>or</code>：表达式一边True 就会返回 True，当两边都是False 时返回 False。</li><li><code>not</code>：表达式取反，返回值与原值相反。</li></ul><h4 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h4><p>复合赋值运算符时将一个变量参与运算的运算结果赋值给改变量，即a参加了该运算，运算完成后结果赋值给a</p><table><thead><tr><th>运算符</th><th>说明</th><th>表达式</th><th>等效表达式</th></tr></thead><tbody><tr><td>&#x3D;</td><td>直接赋值</td><td>x &#x3D; y + z</td><td>x &#x3D; y + z</td></tr><tr><td>+&#x3D;</td><td>加法赋值</td><td>x +&#x3D; y</td><td>x &#x3D; x + y</td></tr><tr><td>-&#x3D;</td><td>减法赋值</td><td>x -&#x3D; y</td><td>x &#x3D; x - y</td></tr><tr><td>*&#x3D;</td><td>乘法赋值</td><td>x *&#x3D; y</td><td>x &#x3D; x * y</td></tr><tr><td>&#x2F;&#x3D;</td><td>除法赋值</td><td>x &#x2F;&#x3D; y</td><td>x &#x3D; x &#x2F; y</td></tr><tr><td>%&#x3D;</td><td>取模赋值</td><td>x %&#x3D; y</td><td>x &#x3D; x % y</td></tr><tr><td>**&#x3D;</td><td>幂赋值</td><td>x **&#x3D; y</td><td>x &#x3D; x ** y</td></tr><tr><td>&#x2F;&#x2F;&#x3D;</td><td>整除赋值</td><td>x &#x2F;&#x2F;&#x3D; y</td><td>x &#x3D; x &#x2F;&#x2F; y</td></tr></tbody></table><h4 id="算数运算符优先级"><a href="#算数运算符优先级" class="headerlink" title="算数运算符优先级"></a>算数运算符优先级</h4><p>由数值、变量、运算符组合的表达式和数学上相同，是有运算符优先级的，优先级高的运算符先进行运算同级运算符，**<u>自左向右运算</u><strong>，遵从小括号优先原则。等号的</strong><u>同级运算</u><strong>时例外，</strong><u>一般都是自右向左进行运算</u>**。</p><h2 id="组合数组类型"><a href="#组合数组类型" class="headerlink" title="组合数组类型"></a>组合数组类型</h2><ul><li>列表</li><li>元组</li><li>字符串</li><li>字典</li><li>集合</li></ul><blockquote><p>组合数据类型</p><ul><li>序列类型<ul><li>列表 list</li><li>元组 tuple</li><li>字符串 string</li><li>**<u>序列类型</u>**是一个元素向量，元素之间存在先后关系，通过索引访问，元素之间不排他</li></ul></li><li>集合类型：集合 set<ul><li>**<u>集合类型</u>**是一个元素集合，元素之间无序，相同元素在集合中唯一</li></ul></li><li>映射类型：字典dict<ul><li>**<u>映射类型</u>**是“键-值”数据项的组合，每个元素是一个键值对</li></ul></li></ul><p>**<u>组合数据类型</u><strong>能够将多个同类型或不同类型的</strong><u>数据组织起</u><strong>，通过单一的表示使数据操作</strong><u>更有序、更容易</u>**。</p></blockquote><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><p>Python中“序列”的概念</p><ul><li>在Python中，序列是最基本的数据结构;</li><li>序列中的每个元素都被分配一个数字，以表明它的位置，并称之为&#x3D;&#x3D;索引&#x3D;&#x3D;。其中，第一个索引值为0，第二个索引值为1，依此类推。</li><li>Python中的序列都可以进行&#x3D;&#x3D;索引、切片、加、乘、检查成员&#x3D;&#x3D;等操作。为了使用方便Python还内建了确定序列的长度len()以及确定最大max()和最小min()元素的方法。</li><li>Python中最常用的序列是&#x3D;&#x3D;列表、元组和字符串&#x3D;&#x3D;。</li></ul><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>列表的概念</p><ul><li>List用来存储任意大小的数据集合。</li><li>一个列表中可以包含任意个数据，每个数据称为元素。</li><li>列表是Python中使用最频繁的数据类型，它是放在方括号([])内、用逗号分隔的一系列元素。</li><li>列表中元素的&#x3D;&#x3D;类型可以不同&#x3D;&#x3D;，它支持数字、字符串甚至可以包含列表。换言之，列表允许嵌套。</li></ul><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1  <span class="comment"># 创建一个空列表</span></span><br><span class="line">list2 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  <span class="comment"># 创建带有初始值的列表</span></span><br><span class="line">list3 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line">list4 = [<span class="number">0</span>] * <span class="number">10</span>   <span class="comment"># 长度为10,每个元素为0</span></span><br><span class="line">list5 = [<span class="number">1</span>,<span class="number">3.14</span>, <span class="string">&#x27;hi&#x27;</span>]  <span class="comment"># 列表可以包括不同类型的元素,但不推荐这种写法</span></span><br><span class="line">list6 = [<span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)] * <span class="built_in">len</span>(nums)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 list类的构造函数来创建</span></span><br><span class="line">lsit1 = <span class="built_in">list</span>()</span><br><span class="line">list2 = <span class="built_in">list</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]) <span class="comment"># 创建带有初始值的列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以使用len()函数 来获取长度</span></span><br><span class="line">length = <span class="built_in">len</span>(list2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># list() 可以将任何可迭代的数据转换成列表</span></span><br><span class="line">lst = <span class="built_in">list</span>(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = <span class="built_in">list</span>(<span class="string">&#x27;python&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;n&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的访问</span></span><br><span class="line">list2 = lsit([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">var = list2[<span class="number">0</span>] + list2[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 一般地，负数下标的有效范围介于-1和-len(列表变量)之间</span></span><br><span class="line">var = list2[<span class="number">0</span>] + list2[-<span class="number">1</span>] <span class="comment"># 负数下标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表的切片 lsit[start:end]  左闭右开</span></span><br><span class="line"><span class="comment"># 起始下标和结束下标可以省略。</span></span><br><span class="line"><span class="comment"># 如果省略起始下标，则起始下标默认为0;如果省略结束下标，则结束下标默认为列表长度，即截取到列表的最后一个元素</span></span><br><span class="line">list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">list2 = [:<span class="number">2</span>]  <span class="comment"># [0:2]</span></span><br><span class="line">list3 = [<span class="number">3</span>:]   <span class="comment"># [3:5]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">True</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1[<span class="number">2</span>]</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>list1[<span class="number">2</span>:<span class="number">3</span>]  <span class="comment"># 注意,2:3 是返回一个数组,并里面只有一个内容</span></span><br><span class="line">[<span class="literal">True</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带步长的切片 list[start:end:step]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">step:正负数均可，其绝对值大小决定了切取数据时的“步长”，而正负号决定了“切取方向”正表示“从左往右”取值，负表示“从右往左”取值。当step省略时，默认为1，即从左往右以增量1取值。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:<span class="number">6</span>]   <span class="comment"># step=1,从左往右取值</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">2</span>:<span class="number">6</span>:<span class="number">2</span>]   <span class="comment"># step=2,从左往右取值</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">6</span>:<span class="number">2</span>:<span class="number">2</span>]  <span class="comment"># step=2,从左往右取值</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[-<span class="number">2</span>:-<span class="number">6</span>:-<span class="number">2</span>]  <span class="comment"># step=-2,从右往左取值</span></span><br><span class="line">[<span class="number">8</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>列表的内置函数</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td><code>len(listname)</code></td><td>返回列表的元素数量</td></tr><tr><td><code>max(listname)</code></td><td>返回列表中元素的最大值</td></tr><tr><td><code>min(listname)</code></td><td>返回列表中元素的最小值</td></tr><tr><td><code>list(tuple)</code></td><td>将元素转换为列表</td></tr></tbody></table><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>lsit.append(obj)</td><td>在列表末尾添加新的对象</td></tr><tr><td>list.count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td>list.extend(seq)</td><td>在列表末尾一次性追加另一个序列的多个值</td></tr><tr><td>list.index(obj)</td><td>从列表中找出某个值第一个匹配项的索引位置</td></tr><tr><td>list.insert(index,obj)</td><td>将对象插入列表</td></tr><tr><td>list.pop(obj&#x3D;list[-1])</td><td>移除列表中的一个元素（默认是最后一个），并返回该元素的值</td></tr><tr><td>list.remove(obj)</td><td>移除列表中某个值的第一个匹配项</td></tr><tr><td>list.reverse()</td><td>将列表中的元素反向</td></tr><tr><td>lsit.sort([func])</td><td>对原列表进行排序</td></tr><tr><td>list.clear()</td><td>清空列表</td></tr><tr><td>list.copy()</td><td>复制列表</td></tr></tbody></table><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><p>Python 的元组与列表相似，不同之处在于&#x3D;&#x3D;元组的元素是不能修改的&#x3D;&#x3D;。</p><p>当创建不同类型的数据时，推荐使用元组来创建</p><p>元组的创建</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在括号中添加元素,并用逗号分隔元素</span></span><br><span class="line">tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2017</span>)</span><br><span class="line">tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">tup3 = (<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"><span class="comment"># 创建空元组</span></span><br><span class="line">tup = ()</span><br><span class="line"><span class="comment"># 创建只包含一个元组时,需要在元组后面添加逗号</span></span><br><span class="line">tup = (<span class="number">50</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Tuple类的构造函数 tuple()</span></span><br><span class="line">tup1 = <span class="built_in">tuple</span>()</span><br><span class="line">tup2 = <span class="built_in">tuple</span>((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment"># 元组的下标索引也从0开始,而且也可以进行截取、组合等操作</span></span><br></pre></td></tr></table></figure><p>元组的访问</p><p>使用下标索引来访问元组中的值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2017</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup2 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;put1[0]: &#x27;</span>, tup1[<span class="number">0</span>])</span><br><span class="line">put1[<span class="number">0</span>]:  Google</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(<span class="string">&#x27;put2[1:5]: &#x27;</span>, tup2[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line">put2[<span class="number">1</span>:<span class="number">5</span>]:  (<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>元组的修改</p><p>元素中的元素值是**<u>不允许修改</u>**的，但可以对元组进行连接拼接组合</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="number">12</span>,<span class="number">34.55</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: <span class="string">&#x27;tuple&#x27;</span> <span class="built_in">object</span> does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><p>元组的删除</p><p>元素中的元素值是**<u>不允许删除</u>**的，但可以使用del语句删除整个元组</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>tup1 = (<span class="string">&#x27;Google&#x27;</span>, <span class="string">&#x27;Runoob&#x27;</span>, <span class="number">1997</span>, <span class="number">2017</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> tup1</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(tup1)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;tup1&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>元组的内置函数</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>len(tuple)</td><td>个数</td></tr><tr><td>max(tuple)</td><td>最大值</td></tr><tr><td>min(tuple)</td><td>最小值</td></tr><tr><td>tuple(seq)</td><td>将列表转换为元组</td></tr></tbody></table><p>元组和列表都属于序列</p><p>列表为&#x3D;&#x3D;可变序列&#x3D;&#x3D;，可以**<u>随意修改列表汇总的元素值，增加、删除</u>**元素;</p><p>元组为&#x3D;&#x3D;不可变序列&#x3D;&#x3D;，元组中的元素**<u>一旦定义就不允许进行增、删和替换操作</u><strong>。</strong><u>元组的访问和处理速度比列表更快</u><strong>。如果所需要定义的序列内容</strong><u>不会进行修改</u>**，那么最好使用元组。另外，使用元组也可以使元素无法被修改，从而使代码更安全。</p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串的创建</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">var1 = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">var2 = <span class="string">&quot;hello python&quot;</span></span><br><span class="line">var3 = <span class="built_in">str</span>(<span class="string">&#x27;hello&#x27;</span>)  <span class="comment"># 使用str类的构造函数</span></span><br><span class="line"><span class="comment"># Python的三引号(三个单引号或三个双引号均可)用于字符串跨多行，字符串中可以包含换行符、制表符以及其它特殊字符。</span></span><br><span class="line">para_str = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">多行字符串</span></span><br><span class="line"><span class="string">可以使用制表位</span></span><br><span class="line"><span class="string">TAB(\t)</span></span><br><span class="line"><span class="string">也可以使用换行符[\n]。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>字符串中值的访问</p><p>Python不支持字符类型。即使是单个字符，Python也将其视为一个字符串来使用访问子串，实际上就是用方括号来截取字符串，有的文献称之为“切片运算”</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;0123456789&#x27;</span></span><br><span class="line">str1[<span class="number">0</span>:<span class="number">3</span>]  <span class="comment"># 0~2, 012</span></span><br><span class="line">str1[:]    <span class="comment"># all,全部</span></span><br><span class="line">str1[<span class="number">6</span>:]   <span class="comment"># 获取6之后的 6789</span></span><br><span class="line">str1[:-<span class="number">3</span>]  <span class="comment"># 从后面数第三个 之前的所有字符串,0~6</span></span><br><span class="line">str1[<span class="number">2</span>]    <span class="comment"># 单个字符串 2</span></span><br><span class="line">str1[-<span class="number">1</span>]   <span class="comment"># 最后一位</span></span><br><span class="line">str1[::-<span class="number">1</span>]  <span class="comment"># 反序 9~0</span></span><br><span class="line">str1[-<span class="number">3</span>:-<span class="number">1</span>] <span class="comment"># 倒数第三与数第一前一个字符 78 </span></span><br><span class="line">str1[-<span class="number">3</span>:]   <span class="comment"># 倒数第三到最后 789</span></span><br><span class="line">str1[:-<span class="number">5</span>:-<span class="number">3</span>] <span class="comment"># 96  逆序截取</span></span><br></pre></td></tr></table></figure><p>python中的转义字符</p><p>当字符串中需要使用特殊字符时，可在特殊字符前冠以反斜杠()，形成转义字符。Python的转义字符如下表所示。</p><table><thead><tr><th>转义字符</th><th>描述</th></tr></thead><tbody><tr><td><code>\(在行尾时)</code></td><td>续行符</td></tr><tr><td><code>\\</code></td><td>反斜杠符号</td></tr><tr><td><code>\&#39;</code></td><td>单引号</td></tr><tr><td><code>\&quot;</code></td><td>双引号</td></tr><tr><td><code>\b</code></td><td>退格</td></tr><tr><td><code>\000</code></td><td>空</td></tr><tr><td><code>\n</code></td><td>换行</td></tr><tr><td><code>\r</code></td><td>回车</td></tr></tbody></table><p>字符串内置函数</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><code>capitalize()</code></td><td>将字符串的第一个字符转换为大写</td></tr><tr><td><code>center(width,fillchar)</code></td><td>返回一个指定的宽度width居中的字符串,fillchar为填充的字符串，默认是空格</td></tr><tr><td><code>lower()</code></td><td>转换字符串中所有大写字母为小写</td></tr><tr><td><code>upper()</code></td><td>转换字符串中所有小写字母为大写</td></tr><tr><td><code>swapcase()</code></td><td>将字符串中大写转换为小写，小写转换为大写</td></tr><tr><td><code>find(str, beg=0,end=len(string))</code></td><td>检测str是否包含在字符串中，如果用beg和end指定范围，则检查是否包含在指定的范围内，如果是，则返回开始的索引值，否则返回-1</td></tr><tr><td><code>index(str,beg=0,end=len(string))</code></td><td>跟find()方法一样，只不过如果str不在字符串中，则会报一个异常。</td></tr><tr><td><code>count(str,beg=0,end=len(string))</code></td><td>返回 str 在 string 里面出现的次数，如果指定 beg 或者 end，则返回指定范围内 str 出现的次数。</td></tr><tr><td><code>len(string)</code></td><td>返回字符串长度</td></tr><tr><td><code>rstrip()</code></td><td>删除字符串末尾的空格</td></tr><tr><td><code>lstrip()</code></td><td>截掉字符串左边的空格</td></tr></tbody></table><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><p><strong>字典的观念</strong></p><p>允许查找与任意键相关联的信息的集合称为“映射”。Python的字典是映射。</p><p>Python的字典是一种可变容器模型，且可以存储任意类型对象。</p><p><strong>字典的创建</strong></p><p>字典中的每个项都是“&#x3D;&#x3D;键&#x2F;值对&#x3D;&#x3D;”,“键”与“值”之间用冒号(&#x3D;&#x3D;:&#x3D;&#x3D;)分割，而每个“对”之间用逗号(&#x3D;&#x3D;,&#x3D;&#x3D;)分割，整个字典放在花括号(<code>&#123;&#125;</code>)中。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">d = &#123;key1: value1, key2: value2, key3: value3&#125;</span><br></pre></td></tr></table></figure><p>对每个键&#x2F;值对而言，&#x3D;&#x3D;键必须是唯一的，且不可变&#x3D;&#x3D;，如字符串、数字或元组均可作为键，但列表不可以。值可以取任何数据类型，但值可以改变。</p><p>使用dict类的构造函数dict()创造</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dict1 = <span class="built_in">dict</span>(&#123;<span class="string">&quot;Tom&quot;</span>: <span class="string">&#x27;123456789&#x27;</span>, <span class="string">&#x27;Amy&#x27;</span>: <span class="string">&#x27;23456789&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p><strong>字典元素的访问</strong></p><p>以“键”通过下表来返回“值”</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;&#x27;香蕉&#x27;:20, &#x27;苹果&#x27;:50&#125;</span><br><span class="line">print(dict2[&quot;香蕉&quot;])  # 20</span><br></pre></td></tr></table></figure><p>元素在字典中的排列顺序是随机的，与输入的顺序不一定相同，所以不能用位置作为下标。</p><p>访问字典元素时，如果输入的“键”不存在，也会产生错误。</p><p><strong>字典元素的添加与修改</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line">dict1[<span class="string">&#x27;Age&#x27;</span>] = <span class="number">8</span>   <span class="comment"># 更新 Age</span></span><br><span class="line">dict1[<span class="string">&#x27;School&#x27;</span>] = <span class="string">&#x27;XG&#x27;</span>  <span class="comment"># 添加信息</span></span><br></pre></td></tr></table></figure><p><strong>字典的遍历</strong></p><p>使用for循环可以遍历一个字典。遍历得到的是字典的&#x3D;&#x3D;关键字&#x3D;&#x3D;。</p><p>为遍历出整个字典对象，在for循环体中，使用&#x3D;&#x3D;以“关键字”作为下标来返回“值”&#x3D;&#x3D;。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dict1:</span><br><span class="line"><span class="built_in">print</span>(key, <span class="string">&#x27;: &#x27;</span>, dict1[key])</span><br></pre></td></tr></table></figure><p><strong>字典键的特性</strong></p><p>字典的“**<u>值</u><strong>”可以取任何Python对象，没有任何限制，它既可以是标准对象，也可以是用户自己定义的对象，但“</strong><u>键</u>**”不行。</p><p>关于字典的键，有两点必须牢记:</p><ol><li>同一个键不得出现两次。创建字典时如果一个值被赋值两次，则后一个值被记住</li><li>键必须不可变。可以用数字、字符串或元组做键，用列表则不行</li></ol><p><strong>字典的内置函数</strong></p><ul><li><p>len(dict)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算字典元素个数,即键的总数</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">len</span>(dict1)  <span class="comment"># 3</span></span><br></pre></td></tr></table></figure></li><li><p>str(dict)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">dict2 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">str</span>(dict2)  <span class="comment"># 输出字典,以可打印的字符串表示</span></span><br><span class="line"><span class="string">&quot;&#123;&#x27;Name&#x27;: &#x27;Taichi&#x27;, &#x27;Age&#x27;: 7, &#x27;Class&#x27;: &#x27;First&#x27;&#125;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>type(variable)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回输入的遍历类型,如果变量是字典就返回字典类型</span></span><br><span class="line">dict1 = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Taichi&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">type</span>(dict1) <span class="comment"># &lt;class &#x27;dict&#x27;&gt;</span></span><br></pre></td></tr></table></figure></li></ul><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>dict.clear()</td><td>删除字典内所有元素</td></tr><tr><td>dict.copy()</td><td>返回一个字典的浅复制</td></tr><tr><td>dict.fromkeys(seq[,value])</td><td>创建一个新字典，以序列seq中的元素作为字典的键，value为字典所有键对应的初始值</td></tr><tr><td>def.get(key, default&#x3D;None)</td><td>反之指定键的值，如果值不存在字典返回 default</td></tr><tr><td>key in dict (in 操作数)</td><td>如果键在字典dict里，则返回 True，否则返回 False</td></tr><tr><td>dict.items()</td><td>以列表返回可遍历的（键，值）元组数组</td></tr><tr><td>dict.keys()</td><td>返回所有的键</td></tr><tr><td>dict.values()</td><td>返回一个迭代器，可以使用list() 来转换为列表，列表为字典中的所有值</td></tr><tr><td>dict.update(dict2)</td><td>把字典dict的键&#x2F;值对 更新到dict里</td></tr></tbody></table><h4 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h4><p><strong>集合的概念</strong></p><p>集合(set)是Python的基本数据类型，把&#x3D;&#x3D;不同的元素&#x3D;&#x3D;组合在一起便形成了集合。组成一个集合的成员称作该集合的元素(element)。</p><p>集合分为两类:**<u>可变集合(set)</u><strong>，</strong><u>不可变集合(frozenset)</u>**。</p><p>可变集合(set)可添加和删除元素，是非可哈希的，不能用作字典的键，也不能做其他集合的元素。<br>不可变集合(frozenset)与之相反。</p><p><strong>创建</strong></p><p>可变集合的创建</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 创建空集合</span></span><br><span class="line">set2 = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># 使用set函数将列表、元组、字符串转为集合</span></span><br><span class="line">set3 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure><p>&#x3D;&#x3D;在一个集合中不能有相同的元素。相同的元素会被自动删除&#x3D;&#x3D;</p><p>不可变集合创建</p><p>创建不可变集合应使用 <code>frozenset()</code>函数，不能使用大括号</p><p>不可变集合不能被修改</p><p><strong>集合的遍历</strong></p><p>因集合是无序的，不能使用索引来访问集合中的元素。可使用for循环可以遍历一个集合。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> set1:</span><br><span class="line">    <span class="built_in">print</span>(var)</span><br></pre></td></tr></table></figure><ul><li>元素访问的顺序依赖于它们在内部是如何存储的。输出中元素的顺序与创建集合时的顺序是不同的</li><li>无序使得可以实现高效的集合操作</li></ul><p><strong>增加和删除集合元素</strong></p><ul><li>如果要增加的元素**<u>没包含</u><strong>在集合中，它会被增加到集合中并且集合的</strong><u>大小加1;</u>**</li><li>如果要增加的元素**<u>包含在</u><strong>集合中，则添加操作</strong><u>不会有效果</u>**，集合没有被修改。</li><li>如果元素存在，<code>discard</code> 方法会删除它，但是如果元素不是集合成员时，则不会有效果。</li><li><code>clear</code>方法删除集合中的所有元素，留下一个空集合</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">set1 = &#123;<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>&#125;</span><br><span class="line">set1.add(<span class="string">&#x27;pear&#x27;</span>)      <span class="comment"># 添加 pear</span></span><br><span class="line">set1.discard(<span class="string">&#x27;apple&#x27;</span>) <span class="comment"># 删除 apple</span></span><br><span class="line">set1.clear()          <span class="comment"># 清空</span></span><br></pre></td></tr></table></figure><p><strong>集合运算</strong></p><p>交集操作符“<code>&amp;</code>”有一个与之等价的方法<code>intersection()</code></p><p>并集操作符“<code>|</code>”有一个与之等价的方法<code>union()</code></p><p>差集操作符“<code>-</code>”与之等价的方法是<code>difference()</code></p><p><code>a.difference(b)</code>: 返回一个包含那些属于集合a但不属于集合b的元素的新集合</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = &#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 | set2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 &amp; set2</span><br><span class="line">&#123;<span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set2 = &#123;<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 - set2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>内置函数</strong></p><ol><li>len()：返回集合元素的个数</li><li>set()、frozenset()：创建集合</li><li>适合所有集合的方法（见下表）</li></ol><table><thead><tr><th>方法</th><th>操作</th></tr></thead><tbody><tr><td>s.issubset(t)</td><td>如果s是t的子集，则返回True，否则返回False</td></tr><tr><td>s.issuperset(t)</td><td>如果s是t的超集，则返回True，否则返回False</td></tr><tr><td>s.union(t)</td><td>返回s和t的并集</td></tr><tr><td>s.intersection(t)</td><td>返回s和t的交集</td></tr><tr><td>s.difference(t)</td><td>s - t，把s中所有的t减去</td></tr><tr><td>s.symmetric_difference(t)</td><td>s和t并集，然后删除交集</td></tr><tr><td>s.copy()</td><td>s的浅复制</td></tr></tbody></table><p>仅适合<strong>可变集合</strong>的方法</p><table><thead><tr><th>方法名称</th><th>操作</th></tr></thead><tbody><tr><td>s.update(t)</td><td>用t中的元素修改s，即s现在包含s或t的成员。</td></tr><tr><td>s.intersection_updata(t)</td><td>s中的成员是共同属于s和t中的元素。</td></tr><tr><td>s.difference_updata(t)</td><td>s中的成员是属于s但不包含在t中的元素。</td></tr><tr><td>s.symmetric_difference_updata(t)</td><td>s中的成员更新为那些包含在s或t中，但不是s和t共有的元素。</td></tr><tr><td>s.add(obj)</td><td>在集合s中添加对象obj</td></tr><tr><td>s.remove(obj)</td><td>从集合s中删除对象obj，如果obj不是集合s中的元素(obj not in s)将引发KeyError错误。</td></tr><tr><td>s.discard(obj)</td><td>如果obj是集合s中的元素，从集合s中删除对象obj。</td></tr><tr><td>s.pop()</td><td>删除集合s中的任意一个对象，并返回它。</td></tr><tr><td>s.clear()</td><td>删除集合s中的所有元素。</td></tr></tbody></table><p>集合和列表都可以存储多个元素，两者不同:</p><ul><li>集合**<u>不能存储重复的元素</u>**</li><li>集合中的元素是**<u>无序的</u><strong>，</strong><u>不能通过下标</u>**运算符来访问元素</li><li>集合还支持如何判断集合关系以及四种集合运算</li><li>**<u>列表</u><strong>的存储方式为</strong><u>顺序存储</u><strong>，而集合采用的存储方式更加复杂。这使得在执行查找元素和删除元素的操作时，使用集合比使用列表的</strong><u>效率高</u>**。</li></ul><p>【例】编写程序，统计文本中只出现一次的单词（不考虑文本中的特殊字符，默认英文单词均为小写）</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">text = <span class="built_in">input</span>(<span class="string">&#x27;Please input a text here:&#x27;</span>)</span><br><span class="line">words = text.split()  <span class="comment"># 默认空格分割</span></span><br><span class="line">word_count = <span class="built_in">set</span>()</span><br><span class="line">word_dis = <span class="built_in">set</span>()  <span class="comment"># 多次出现的单词</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> words:</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> word_count:</span><br><span class="line">        word_dis.add(word) <span class="comment"># 删除多次出现的</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        word_count.add(word)  <span class="comment"># 保存第一次出现的单词</span></span><br><span class="line">wordss = word_count - word_dis  <span class="comment"># 把出现多次的单词清理掉</span></span><br><span class="line"><span class="keyword">for</span> word <span class="keyword">in</span> wordss:</span><br><span class="line">    <span class="built_in">print</span>(word)</span><br></pre></td></tr></table></figure><h2 id="控制流程"><a href="#控制流程" class="headerlink" title="控制流程"></a>控制流程</h2><ul><li>选择结构控制</li><li>循环结构控制</li></ul><h4 id="选择结构-if语句"><a href="#选择结构-if语句" class="headerlink" title="选择结构-if语句"></a>选择结构-if语句</h4><p>单分支</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>双分支</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">bool</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>多分支</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> bool1:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> bool2:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">elif</span> bool3:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>练习题</p><p>例:体型判断。按“体指数”对肥胖程度进行划分</p><p>体指数t&#x3D;体重w&#x2F;(身高h)2</p><p>(w 单位为公斤，h单位为米)</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BMI=体重÷身高的平方</span></span><br><span class="line">width = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你的体重:&#x27;</span>))  <span class="comment"># 公斤</span></span><br><span class="line">height = <span class="built_in">eval</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入你的身高:&#x27;</span>)) <span class="comment"># 米</span></span><br><span class="line"></span><br><span class="line">bmi = width / (height * height)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;BMI: &quot;</span>, <span class="built_in">format</span>(bmi, <span class="string">&#x27;.2f&#x27;</span>))</span><br><span class="line"><span class="keyword">if</span> bmi &lt; <span class="number">18</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;太瘦了&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt;= <span class="number">25</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正常&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> bmi &lt;= <span class="number">27</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;超重了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;肥胖&#x27;</span>)</span><br></pre></td></tr></table></figure><p>if三元运算符</p><p><code>X if bool else Y</code>，当bool为True的时候，返回X，False 返回 Y</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x,y = <span class="number">4</span>,<span class="number">6</span></span><br><span class="line">bigger = x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"><span class="built_in">print</span>(bigger)</span><br></pre></td></tr></table></figure><h4 id="循环结构控制"><a href="#循环结构控制" class="headerlink" title="循环结构控制"></a>循环结构控制</h4><p><strong>while语句</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># while 中的 else 语句</span></span><br><span class="line">cou = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> con &lt;= <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(cou, <span class="string">&#x27;小于或等于3&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(cou,<span class="string">&#x27;大于3&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>for语句</strong></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1~100 累加和</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):  <span class="comment"># 左闭右开</span></span><br><span class="line">    x += i</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><strong>break和continue</strong></p><blockquote><p>break 退出循环（终止循环）</p><p>continue 退出本次循环</p><p>return 函数体结束</p></blockquote><h2 id="函数与模块"><a href="#函数与模块" class="headerlink" title="函数与模块"></a>函数与模块</h2><ul><li>函数的概述</li><li>函数的参数和返回值</li><li>函数的调用</li><li>模块</li></ul><h4 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h4><p>一个程序可以按不同功能实现拆分成不同模块，而函数就是能实现某一部分功能的代码块。</p><p>Python中，定义一个函数要使用def语句，依次写出函数名、括号、括号内参数和冒号(:)，然后在缩进块中编写函数体，函数的返回值用return语句返回。</p><p>注意：&#x3D;&#x3D;Python是靠缩进块来标明函数的作用域范围的，缩进块内是函数体，这和其它高级编程语言是有区别的，比如:C&#x2F;C++&#x2F;iavaR语言大括号{}内的是函数体&#x3D;&#x3D;。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">num1: <span class="built_in">int</span>, num2: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="keyword">return</span> num1 <span class="keyword">if</span> num1 &gt; num2 <span class="keyword">else</span> num2  <span class="comment"># 三元表达式,返回最大值</span></span><br></pre></td></tr></table></figure><p><strong>全局变量</strong></p><p>在函数外面定义的变量称为全局变量。全局变量的作用域在整个代码段(文件、块)，在整个程序代码中都能被访问到。在函数内部可以去访问全局变量。如下所示代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">global_var = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">modify_var</span>():</span><br><span class="line">    <span class="comment"># 这里定义了一个局部变量，与全局变量同名</span></span><br><span class="line">    global_var = <span class="number">40</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Inside function:&quot;</span>, global_var)  <span class="comment"># 输出：Inside function: 40</span></span><br><span class="line"></span><br><span class="line">modify_var()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Outside function:&quot;</span>, global_var)  <span class="comment"># 输出：Outside function: 30</span></span><br></pre></td></tr></table></figure><p>如果要在**<u>函数内部去修改全局变量的值</u>**，并使之在整个程序生效，采用关键字<code>global</code>即可。</p><p><strong>局部变量</strong></p><p>在函数内部定义的参数和变量称为局部变量，超出了这个函数的作用域局部变量是无效的，它的作用域仅在函数内部。如下所示代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个全局变量</span></span><br><span class="line">total_score = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_score</span>(<span class="params">score</span>):</span><br><span class="line">    <span class="comment"># 定义一个局部变量</span></span><br><span class="line">    local_score = score</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Local score: <span class="subst">&#123;local_score&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 修改全局变量</span></span><br><span class="line">    <span class="keyword">global</span> total_score</span><br><span class="line">    total_score += local_score</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Total score: <span class="subst">&#123;total_score&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用函数，传入分数</span></span><br><span class="line">add_score(<span class="number">85</span>)  <span class="comment"># 输出：Local score: 85, Total score: 85</span></span><br><span class="line">add_score(<span class="number">90</span>)  <span class="comment"># 输出：Local score: 90, Total score: 175</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在函数外部访问全局变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Final total score: <span class="subst">&#123;total_score&#125;</span>&quot;</span>)  <span class="comment"># 输出：Final totalscore: 175</span></span><br></pre></td></tr></table></figure><p>一个python表达式可以访问局部命名空间和全局命名空间里的变量。如果**<u>一个局部变量和一个全局变量&#x3D;&#x3D;重名&#x3D;&#x3D;</u><strong>，则</strong><u>局部变量会覆盖全局变量</u>**。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">x = <span class="number">1</span>  <span class="comment"># 全局变量</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>():</span><br><span class="line">    x = <span class="number">2</span>  <span class="comment"># 局部变量</span></span><br><span class="line">    <span class="built_in">print</span>(x)  <span class="comment"># 2</span></span><br><span class="line">fun()</span><br><span class="line"><span class="built_in">print</span>(x)   <span class="comment"># 1</span></span><br></pre></td></tr></table></figure><h4 id="函数的参数和返回值"><a href="#函数的参数和返回值" class="headerlink" title="函数的参数和返回值"></a>函数的参数和返回值</h4><p>参数传递的方式</p><p>在Python中，将函数参数分为三类:位置参数、**<u>可变参数</u><strong>、</strong><u>关键字参数</u>**。</p><ol><li><p>位置参数</p><p>直接传入**<u>参数数据即可</u>**，如果有多个参数，位置先后顺序不能改变</p></li><li><p>可变参数</p><p>有2种传递方式:</p><p>1是直接传入参数值;</p><p>2是先封装成列表(list)或元组(tuple)，再在封装后的列表或元组前面添加一个星号“*”传入。</p></li><li><p>(3)关键字参数</p><p>有2种传递方式:</p><p>1是直接传入参数值;</p><p>2是可以先将参数封装成字典(dict)，再在封装后的字典前添加2个星号“**”传入</p></li></ol><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 位置参数和关键字参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Sub</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="keyword">return</span> x-y</span><br><span class="line">Sub(<span class="number">20</span>,<span class="number">10</span>)  <span class="comment"># 位置参数</span></span><br><span class="line">Sub(x=<span class="number">20</span>, y=<span class="number">10</span>) <span class="comment"># 关键字参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认值参数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fun</span>(<span class="params">num1=<span class="number">99</span>, num2=<span class="number">50</span></span>):</span><br><span class="line">    <span class="keyword">return</span> (num1-num2)</span><br><span class="line">fun()  <span class="comment"># 使用默认参数 返回49</span></span><br><span class="line">fun(<span class="number">55</span>)  <span class="comment"># x=55,y是默认50,返回 5</span></span><br><span class="line">fun(<span class="number">20</span>,<span class="number">10</span>)  <span class="comment"># 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可变参数</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;当在定义函数参数的时候，我们不知道究竟需要多少个参数的时候，只要在参数前面加上星“*”即可，这样的参数称为可变参数。如下所示代码:&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">var_par</span>(<span class="params">*param</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第三个参数是:&#x27;</span>, param[<span class="number">2</span>]) <span class="comment"># 10</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;可变长度是:&#x27;</span>, <span class="built_in">len</span>(param))  <span class="comment"># 5</span></span><br><span class="line">var_par(<span class="string">&#x27;taichi&#x27;</span>, <span class="number">23</span>, <span class="number">6</span>, <span class="number">10</span>,<span class="number">7</span>, <span class="string">&#x27;python&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>函数返回值</strong></p><blockquote><p>没有<code>return</code>指定返回值，则返回的是一个<code>None</code>对象</p><p><code>return [&#39;taichi&#39;, 10]</code>，返回一个数组</p><p><code>return &#39;taichi&#39;,10</code>，返回的是一个 <code>tuple</code></p></blockquote><h4 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h4><p>函数的调用方法</p><p>要调用一个函数，需要知道**<u>函数的名称和参数</u>**。</p><p>函数分为**<u>自定义函数</u><strong>和</strong><u>内置函数</u>**。</p><p>自定义函数需要先定义再调用，内置函数直接调用，有的内置函数是在特定的模块下，这时需要用import命令导入模块后再调用</p><p>调用函数的时候，如果传入的**<u>参数数量不对</u><strong>，会报<code>TypeError</code>的错误，同时Python会明确地告诉你参数的个数。如果传入的</strong><u>参数数量是对的</u><strong>，但</strong><u>参数类型不能被函数所接受</u>**，也会报<code>TypeError</code>的错误，同时给出错误信息。</p><p>函数名其实就是指向一个函数对象的引用，可以把函数名赋给一个变量。</p><p><strong>嵌套调用</strong></p><p>**<u>允许在函数内部创建另一个函数</u><strong>，这种函数叫</strong><u>内嵌函数或者内部函数。</u>**内嵌函数的作用域在其内部，如果内嵌函数的作用域超出了这个范围就不起作用。如下所示代码:</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">outer_function</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这是外部函数&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">inner_function</span>():</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这是内部函数&quot;</span>)</span><br><span class="line"> </span><br><span class="line">    inner_function() <span class="comment"># 这是内部函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用外部函数</span></span><br><span class="line">outer_function()</span><br><span class="line"><span class="comment"># 调用内函数, 报错, 函数名未定义</span></span><br><span class="line">inner_function()</span><br></pre></td></tr></table></figure><p><strong>递归调用</strong></p><p>函数调用自身的行为是递归。</p><p>递归的2个条件：调用函数自身，设置了正确的返回条件。递归即是有进去必须有回来</p><p>Python默认递归深度100层(Python限制)。</p><p>设置递归的深度的系统函数是：<code>sys.setrecursionlimit(stepcoun)</code>。参数：<code>stepcount</code>设置递归的深度。</p><p>递归有危险性：消耗时间和空间，因为递归是基于弹栈和出栈操作。递归忘掉返回使程序崩溃，消耗掉所有内存。</p><p><img src="D:\笔记\Python比赛\pandas-image\image-20241202155304733.png" alt="image-20241202155304733"></p><h4 id="lambda-函数（匿名函数）"><a href="#lambda-函数（匿名函数）" class="headerlink" title="lambda 函数（匿名函数）"></a>lambda 函数（匿名函数）</h4><p>lambda函数是一个只用一行就能解决问题的函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">lambda</span> arg1,arg2,...ageN : experssion</span><br><span class="line"><span class="comment">#   参数列表,可以多个参数     表达式</span></span><br></pre></td></tr></table></figure><ul><li>arg1、arg2等参数是可选的，如果使用参数的话，参数通常也会在表达式之中出现。</li><li>匿名函数的参数规则、作用域关系与有名函数是一样的。</li><li>表达式该表达式必须要有一个返回值，该值直接返回，**<u>无需return</u>**语句</li><li>&#x3D;&#x3D;表达式不能包含循环、return，可以包含if… else …&#x3D;&#x3D;</li></ul><p>练习</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义函数1</span></span><br><span class="line"><span class="built_in">sum</span> = <span class="keyword">lambda</span> arg1,arg2 : arg1 + arg2</span><br><span class="line"><span class="comment"># 调用自定义函数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;相加的值: &#x27;</span>, <span class="built_in">sum</span>(<span class="number">10</span>,<span class="number">20</span>))  <span class="comment"># 30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义函数2</span></span><br><span class="line">power = <span class="keyword">lambda</span> x,y: x ** y</span><br><span class="line"><span class="built_in">print</span>(power(<span class="number">2</span>,<span class="number">10</span>))  <span class="comment"># 1024</span></span><br></pre></td></tr></table></figure><p><strong>lambda的特点</strong></p><ul><li><code>lambda</code>只是一个表达式，<u>函数体比def简单很多</u>。</li><li><code>lambda</code>的主体是一个表达式，**<u>而不是一个代码块</u><strong>，因而仅仅能在lambda表达式中封装</strong><u>有限的逻辑</u>**。</li><li><code>lambda</code>函数拥有自己的命名空间，且&#x3D;&#x3D;不能访问自有参数列表之外或全局命名空间里的参数&#x3D;&#x3D;。</li></ul><p><strong>map()函数</strong></p><p>map()函数是一个内置的高阶函数。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>(function, iterable,...)</span><br></pre></td></tr></table></figure><ul><li>参数1:传入**<u>一个函数</u>**，这个函数可以是内置的，也可 以是自己定义，也可以是匿名函数</li><li>参数2:是**<u>可迭代对象</u>**，如列表，字符串等等。</li><li>该函数返回一个map对象，是个迭代器。</li><li>注意：不是列表&#x3D;&#x3D;不能直接输出，可以通过for循环或者Iist()来显示&#x3D;&#x3D;。</li></ul><p>map函数&#x3D;&#x3D;将iterable中的每一个元素执行一遍 function&#x3D;&#x3D;，结果以map对象的形式返回。注意，<code>iterable</code>后面还有省略号，即可以传<u>多个</u>iterable ，如果有额外的iterable参数，并行的从这些参数中取元素，并调用fnction。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">square</span>(<span class="params">x</span>):</span><br><span class="line"><span class="keyword">return</span> x * x</span><br><span class="line">a = <span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="built_in">print</span>(a)<span class="comment"># &lt;map object at 0x0000025B49C1F8E0&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(a))  <span class="comment"># [1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用for循环来取出内容</span></span><br><span class="line">ls = []</span><br><span class="line">a = <span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">ls.append(i)</span><br><span class="line"><span class="built_in">print</span>(ls) <span class="comment"># [1, 4, 9, 16]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用推导式</span></span><br><span class="line">a = <span class="built_in">map</span>(square, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">ls = [item <span class="keyword">for</span> item <span class="keyword">in</span> a]</span><br><span class="line"><span class="built_in">print</span>(ls) <span class="comment"># [1, 4, 9, 16]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><p>模块与程序</p><p>我们写的代码保存的以.py结尾的Python文件就是一个独立的模块，模块包含了对象定义和语句。</p><p><strong>模块导入方法</strong></p><p>要导入系统模块或者已经定义好的模块，有三种方法：</p><ol><li><code>import 模块名</code></li><li><code>from 模块名 import 函数名</code> 导入模块中所有的函数 <code>from 模块名 import *</code></li><li><code>import 模块名 as 别名</code></li></ol><p>&#x3D;&#x3D;注意事项&#x3D;&#x3D;</p><ol><li>不管你执行了多少次 <code>import</code>，一个模块只会被导入一次</li><li>导入模块后，我们就可以用模块名称这个变量访问模块的函数所有功能</li></ol><h2 id="异常与文件操作"><a href="#异常与文件操作" class="headerlink" title="异常与文件操作"></a>异常与文件操作</h2><ul><li>Python的文件操作</li><li>Python异常处理机制</li></ul><h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><p>打开文件</p><p>Python使用内置函数open()打开文件，创建file对象。在系统中，只有存在file对象后，用户才能对文件进行相应的操作。</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">file <span class="built_in">object</span> = <span class="built_in">open</span>(file, mode=<span class="string">&#x27;r&#x27;</span>, buffering=-<span class="number">1</span>, encoding=<span class="literal">None</span>, errors=<span class="literal">None</span>, newline=<span class="literal">None</span>, closefd=<span class="literal">True</span>, opener=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure><ul><li><p>文件名(name)为必选参数，</p></li><li><p>模式(mode)和缓冲(buffering)参数是可选的。</p></li><li><p>该函数返回一个文件对象。</p></li><li><p><code>file</code>：要打开的文件的路径。</p></li><li><p><code>mode</code>：文件打开模式，默认为读模式（‘r’）。常见模式包括：</p><ul><li><code>&#39;r&#39;</code>：只读模式。文件必须存在。</li><li><code>&#39;w&#39;</code>：写入模式。如果文件不存在则创建文件，如果文件存在则**<u>清空文件内容</u>**。</li><li><code>&#39;a&#39;</code>：追加模式。如果文件不存在则创建文件，如果文件存在则在文件**<u>末尾追加内容</u>**。</li><li><code>&#39;b&#39;</code>：二进制模式。可以与其他模式结合使用（如 <code>&#39;rb&#39;</code> 表示二进制读）。</li><li><code>&#39;t&#39;</code>：文本模式。默认模式。</li><li><code>&#39;+&#39;</code>：读写模式。可以与其他模式结合使用（如 <code>&#39;r+&#39;</code> 表示读写模式）。</li></ul></li></ul><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>: </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file: </span><br><span class="line">        content = file.read() </span><br><span class="line">        <span class="built_in">print</span>(content) </span><br><span class="line"><span class="keyword">except</span> FileNotFoundError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件不存在！&#x27;</span>) </span><br><span class="line"><span class="keyword">except</span> PermissionError: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;无权限访问文件！&#x27;</span>) </span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e: </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;发生未知错误：<span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在文件读写过程中，可能会出现异常，例如文件不存在或权限错误。</p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串常用操作</title>
      <link href="/2024/11/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/"/>
      <url>/2024/11/28/Python%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Python字符串常用操作"><a href="#Python字符串常用操作" class="headerlink" title="Python字符串常用操作"></a>Python字符串常用操作</h1><h1 id="一、字符串的切片"><a href="#一、字符串的切片" class="headerlink" title="一、字符串的切片"></a>一、字符串的切片</h1><h3 id="1-1、通过下标及下标范围取值"><a href="#1-1、通过下标及下标范围取值" class="headerlink" title="1.1、通过下标及下标范围取值"></a>1.1、通过下标及下标范围取值</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">&#x27;myNameIsTaichi&#x27;</span></span><br><span class="line">value1 = my_str[<span class="number">2</span>]  <span class="comment"># 正向 N</span></span><br><span class="line">value2 = my_str[-<span class="number">5</span>]  <span class="comment"># 反向 从 -1 开始 a</span></span><br></pre></td></tr></table></figure><p>字符串分割，语法：string[end: step]</p><ul><li>start：头下标，以0开始</li><li>end：尾下表，以-1开始</li><li>step 步长</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;abc-123-如果我是DJ你会爱我吗.mp4&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:<span class="number">7</span>])           <span class="comment">#默认步长是1，可以不写</span></span><br><span class="line"><span class="comment"># 结果：abc-123</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">9</span>])           <span class="comment">#负数是从右往左截取</span></span><br><span class="line"><span class="comment"># 结果：abc-123-如果我是DJ</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">8</span>:])      <span class="comment">#不写右边就是一直到结尾</span></span><br><span class="line"><span class="comment"># 结果：如果我是DJ你会爱我吗.mp4</span></span><br></pre></td></tr></table></figure><h3 id="1-2、index方法：查找特定字符串的下标索引值"><a href="#1-2、index方法：查找特定字符串的下标索引值" class="headerlink" title="1.2、index方法：查找特定字符串的下标索引值"></a>1.2、index方法：查找特定字符串的下标索引值</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">&quot;%pokes$@163&amp;.com*&quot;</span></span><br><span class="line">value3 = my_str.index(<span class="string">&quot;pokes&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(value3)   <span class="comment">#1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果是“1”</span></span><br></pre></td></tr></table></figure><p>注意：1是”pokes”起始下标，即p所在的下标位置</p><h3 id="1-3、replace方法：字符串替换"><a href="#1-3、replace方法：字符串替换" class="headerlink" title="1.3、replace方法：字符串替换"></a>1.3、replace方法：字符串替换</h3><p>语法：<code>string.replace(“被替换的内容”，“替换后的内容”[，次数])</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str2= <span class="string">&quot;ithahahaaa and ithehehehe&quot;</span></span><br><span class="line">new_str2 = str2.replace(<span class="string">&quot;it&quot;</span>,<span class="string">&quot;pokes&quot;</span>)    <span class="comment">#将it替换成pokes</span></span><br><span class="line"><span class="built_in">print</span>(new_str2)        </span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：pokeshahahaaa and pokeshehehehe</span></span><br><span class="line"></span><br><span class="line">str1 = <span class="string">&quot;212、Python用replace()函数删除制定  符号&quot;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;、&#x27;</span>, <span class="string">&#x27;&#x27;</span>)      <span class="comment">#可以这样理解，把顿号替换为空</span></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="1-4、split方法：分割字符串"><a href="#1-4、split方法：分割字符串" class="headerlink" title="1.4、split方法：分割字符串"></a>1.4、split方法：分割字符串</h3><p>语法：<code>string.split(‘分隔符’,次数)</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;abc-123-如果我是DJ你会爱我吗.mp4&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.split(<span class="string">&#x27;-&#x27;</span>)          <span class="comment">#次数不写，则默认为最大次数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">结果：[<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;如果我是DJ你会爱我吗.mp4&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="1-5、strip方法：去除字符串两端的空格和回车符"><a href="#1-5、strip方法：去除字符串两端的空格和回车符" class="headerlink" title="1.5、strip方法：去除字符串两端的空格和回车符"></a>1.5、strip方法：去除字符串两端的空格和回车符</h3><p><code>strip</code> 两头 ，<code>lstrip</code>头（left）， <code>rstrip</code>尾（right）。</p><p>去掉两头的空格，注意不包含中间的空格</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str5= <span class="string">&quot;     heihei hehe haha    &quot;</span></span><br><span class="line">new_str5=str5.strip()   <span class="comment">#不传参数，默认去除两端的空格和回车符</span></span><br><span class="line"><span class="built_in">print</span>(new_str5)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连续的过滤字符</span></span><br><span class="line">s = <span class="string">&quot;   %pokes$@163&amp;.com*   &quot;</span></span><br><span class="line"><span class="comment"># 去除两边空格, 去除左边$ 去除右边 *</span></span><br><span class="line">ss = s.strip().strip(<span class="string">&quot;%&quot;</span>).lstrip(<span class="string">&#x27;$&#x27;</span>).rstrip().rstrip(<span class="string">&#x27;*&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ss)</span><br><span class="line"></span><br><span class="line">s = <span class="string">&#x27;  &lt;0.01%  &#x27;</span></span><br><span class="line">ss = s.strip().lstrip(<span class="string">&#x27;&lt;&#x27;</span>).rstrip(<span class="string">&#x27;%&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(ss)  <span class="comment"># 0.01</span></span><br></pre></td></tr></table></figure><h3 id="1-6、count方法，统计字符串中某字符出现的次数"><a href="#1-6、count方法，统计字符串中某字符出现的次数" class="headerlink" title="1.6、count方法，统计字符串中某字符出现的次数"></a>1.6、count方法，统计字符串中某字符出现的次数</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str6= <span class="string">&quot;heihei hehe haha&quot;</span></span><br><span class="line">cishu = str6.count(<span class="string">&quot;he&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cishu)</span><br><span class="line"></span><br><span class="line"><span class="comment">#运行结果：4</span></span><br></pre></td></tr></table></figure><h3 id="1-7、len统计字符串的长度"><a href="#1-7、len统计字符串的长度" class="headerlink" title="1.7、len统计字符串的长度"></a>1.7、len统计字符串的长度</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str6= <span class="string">&quot;heihei hehe haha&quot;</span></span><br><span class="line">num=<span class="built_in">len</span>(str6)</span><br><span class="line"><span class="built_in">print</span>(num)</span><br></pre></td></tr></table></figure><h3 id="1-8、find字符串查找"><a href="#1-8、find字符串查找" class="headerlink" title="1.8、find字符串查找"></a>1.8、find字符串查找</h3><p>语法：<code>string.find(&#39;要查找的字&#39;, [开始位置, 结束位置])</code></p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;abc-123-如果我是DJ你会爱我吗.mp4&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="built_in">str</span>.find(<span class="string">&#x27;DJ&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line">结果:<span class="number">12</span>         <span class="comment">#返回的是需要查找的字符串的下标,不包含则返回-1</span></span><br></pre></td></tr></table></figure><p>1.9、join() 列表转字符串</p><h2 id="二、字符串判断"><a href="#二、字符串判断" class="headerlink" title="二、字符串判断"></a>二、字符串判断</h2><h3 id="2-1、判断字符串是否出现过"><a href="#2-1、判断字符串是否出现过" class="headerlink" title="2.1、判断字符串是否出现过"></a>2.1、判断字符串是否出现过</h3><p>查询字母k是否出现，如果出现结果返回索引，没出现则返回-1</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.find(<span class="string">&quot;k&quot;</span>))  <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pooes&quot;</span>.find(<span class="string">&quot;k&quot;</span>))  <span class="comment"># -1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k&quot;</span> <span class="keyword">in</span> <span class="string">&quot;pooes&quot;</span>)  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;k&quot;</span> <span class="keyword">in</span> <span class="string">&quot;pokes&quot;</span>)  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-2-、判断是否以xxx开头"><a href="#2-2-、判断是否以xxx开头" class="headerlink" title="2.2 、判断是否以xxx开头"></a>2.2 、判断是否以xxx开头</h3><p>判断是否以xxx开头，返回布尔值</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否以k开头，返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.startswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;kpokes&quot;</span>.startswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-3、判断是否以xxx结尾"><a href="#2-3、判断是否以xxx结尾" class="headerlink" title="2.3、判断是否以xxx结尾"></a>2.3、判断是否以xxx结尾</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 判断是否以k结尾，返回布尔值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.endswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;kpokesk&quot;</span>.endswith(<span class="string">&quot;k&quot;</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="2-4、判断字符串是否只包含数字"><a href="#2-4、判断字符串是否只包含数字" class="headerlink" title="2.4、判断字符串是否只包含数字"></a>2.4、判断字符串是否只包含数字</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str_1 = <span class="string">&quot;123&quot;</span></span><br><span class="line">str_2 = <span class="string">&quot;Abc&quot;</span></span><br><span class="line">str_3 = <span class="string">&quot;123Abc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(str_1.isdigit())   <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(str_2.isdigit())   <span class="comment"># False</span></span><br><span class="line"><span class="built_in">print</span>(str_3.isdigit())   <span class="comment"># False</span></span><br></pre></td></tr></table></figure><h3 id="2-5、判断字符串中包含特殊符号"><a href="#2-5、判断字符串中包含特殊符号" class="headerlink" title="2.5、判断字符串中包含特殊符号"></a>2.5、判断字符串中包含特殊符号</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">input_psd = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串&quot;</span>)</span><br><span class="line"><span class="comment"># 判断是否有特殊字符</span></span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;~!@#$%^&amp;*()_+-*/&lt;&gt;,.[]\/&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> string:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> input_psd:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;您的输入包含特殊字符&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或者导入 python 内置模块 re</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">input_psd = <span class="built_in">input</span>(<span class="string">&quot;请输入字符串&quot;</span>)</span><br><span class="line">test_str = re.search(<span class="string">r&quot;\W&quot;</span>,input_psd)</span><br><span class="line"><span class="keyword">if</span> test_str==<span class="literal">None</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;没有没有真没有特殊字符&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;该文本包含特殊字符&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-6、连续判断过滤字符串"><a href="#2-6、连续判断过滤字符串" class="headerlink" title="2.6、连续判断过滤字符串"></a>2.6、连续判断过滤字符串</h3><p>有时候我们需要连续的判断</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;download_zh.png&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;actjpgs&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>他不能写成：</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;download_zh.png&quot;</span> <span class="keyword">and</span> <span class="string">&quot;actjpgs&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以写成这样</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">&quot;download_zh.png&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span> <span class="keyword">and</span> <span class="string">&quot;actjpgs&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>但是如果过滤的字符串有N多个，这样就很痛苦。那么你可以：</p><p>将需要过滤掉的字符串写进一个list</p><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">filter_strings = [<span class="string">&quot;download_zh.png&quot;</span>, <span class="string">&quot;actjpgs&quot;</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">any</span>(s <span class="keyword">in</span> item <span class="keyword">for</span> s <span class="keyword">in</span> filter_strings):</span><br><span class="line">    <span class="comment"># 如果item不包含列表中的任何一个字符串，‌则执行这里的代码</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;过滤条件满足&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-7字符串字母大小写转换和判断"><a href="#2-7字符串字母大小写转换和判断" class="headerlink" title="2.7字符串字母大小写转换和判断"></a>2.7字符串字母大小写转换和判断</h3><ul><li>capitalize，将字符串得第一个字符转换成大写</li><li>title，每个单词得首字母大写</li><li>istitle, 判断每个单词得首字母是否大写</li><li>upper 全部转换成大写</li><li>lower 全部转换成小写</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">message = <span class="string">&#x27;zhaorui is a beautiful girl!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># capitalize</span></span><br><span class="line"></span><br><span class="line">msg = message.capitalize()   <span class="comment">#将字符串得第一个字符转换成大写</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># title</span></span><br><span class="line">msg = message.title()      <span class="comment">#每个单词得首字母大写</span></span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># istitle</span></span><br><span class="line">cmd = msg.istitle()           <span class="comment">#判断每个单词得首字母是否大写</span></span><br><span class="line"><span class="built_in">print</span>(cmd)</span><br><span class="line"></span><br><span class="line">spokes = message.istitle()    <span class="comment">#判断每个单词得首字母是否大写</span></span><br><span class="line"><span class="built_in">print</span>(spokes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># upper 全部转换成大写</span></span><br><span class="line"></span><br><span class="line">msg = message.upper()</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line"><span class="comment"># lower 全部转换成小写</span></span><br><span class="line">msg = message.lower()</span><br><span class="line"><span class="built_in">print</span>(msg)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(msg))          <span class="comment">#计算字符串长度</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、字符串比较"><a href="#三、字符串比较" class="headerlink" title="三、字符串比较"></a>三、字符串比较</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">s1=<span class="string">&#x27;abc&#x27;</span></span><br><span class="line">s2=<span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># # 内容比较</span></span><br><span class="line"><span class="built_in">print</span>(s1 == s2)</span><br><span class="line"><span class="built_in">print</span>(s1 <span class="keyword">is</span> s2)</span><br><span class="line"></span><br><span class="line">pokes1 = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)</span><br><span class="line">pokes2 = <span class="built_in">input</span>(<span class="string">&#x27;请输入：&#x27;</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">print</span>(pokes1 == pokes2)</span><br></pre></td></tr></table></figure><h2 id="四、过滤掉某个字符"><a href="#四、过滤掉某个字符" class="headerlink" title="四、过滤掉某个字符"></a>四、过滤掉某个字符</h2><h3 id="过滤掉单个字符"><a href="#过滤掉单个字符" class="headerlink" title="过滤掉单个字符"></a>过滤掉单个字符</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;212、Python用replace()函数删除制定  符号&quot;</span></span><br><span class="line">str2 = str1.replace(<span class="string">&#x27;、&#x27;</span>,<span class="string">&#x27;&#x27;</span>)<span class="comment">#过滤掉顿号</span></span><br><span class="line"><span class="built_in">print</span>(str2)</span><br></pre></td></tr></table></figure><h3 id="过滤掉多个符号"><a href="#过滤掉多个符号" class="headerlink" title="过滤掉多个符号"></a>过滤掉多个符号</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zifu</span>(<span class="params"><span class="built_in">str</span>, x, y, z</span>):</span><br><span class="line">    strin = <span class="built_in">str</span>.replace(x, <span class="string">&#x27;&#x27;</span>) .replace(y, <span class="string">&#x27;&#x27;</span>).replace(z, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(strin)</span><br><span class="line"></span><br><span class="line">zifu(<span class="string">&quot;pokes，@163.com,kkkkk&quot;</span>, <span class="string">&quot;，&quot;</span>, <span class="string">&quot;,&quot;</span>, <span class="string">&quot;163&quot;</span>)</span><br><span class="line">```·</span><br><span class="line"><span class="comment"># 五、字母大小转换</span></span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;POKES&quot;</span>.lower())  <span class="comment">#pokes,转换成小写</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;pokes&quot;</span>.upper())  <span class="comment">#POKES,转换成小写</span></span><br></pre></td></tr></table></figure><h3 id="判断字符串"><a href="#判断字符串" class="headerlink" title="判断字符串"></a>判断字符串</h3><ul><li><code>isalpha()</code> 判断是否为 字母 <code>str.encode().isalpha()</code></li><li><code>str.isdigit()</code> 判断是否为数字</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;runoob&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.isalpha())  <span class="comment"># True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;runoob菜鸟教程&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.isalpha())  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;this is string example....wow!!!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>.isalpha()) <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line">s = <span class="string">&quot;中国&quot;</span></span><br><span class="line"><span class="built_in">print</span> s.encode( <span class="string">&#x27;UTF-8&#x27;</span> ).isalpha()  <span class="comment"># False</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字符串中字母、数字、其他字符的数量</span></span><br><span class="line">s = <span class="string">&#x27;中abCD123$%文&#x27;</span></span><br><span class="line">zm,sz,qt = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;a&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;z&#x27;</span> <span class="keyword">or</span> <span class="string">&#x27;A&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;Z&#x27;</span>:</span><br><span class="line">        zm += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;0&#x27;</span> &lt;= i &lt;= <span class="string">&#x27;9&#x27;</span>:</span><br><span class="line">        sz += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        qt += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;字母：%d，数字：%d，其他：%d&#x27;</span> % (zm,sz,qt))</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 统计字符串中字母、数字、其他字符的数量</span></span><br><span class="line">s = <span class="string">&#x27;中abCD123$%文&#x27;</span></span><br><span class="line">zm,sz,qt = <span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    <span class="keyword">if</span> i.encode().isalpha():</span><br><span class="line">        zm += <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> i.isdigit():</span><br><span class="line">        sz += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        qt += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(zm,sz,qt)</span><br></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><ul><li>性别：<ul><li><code>male =&gt; 男</code></li><li><code>female =&gt; 女</code></li></ul></li><li>午餐种类改为大写</li></ul><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fn</span>(<span class="params">self, path: <span class="built_in">str</span>, newpath</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:  <span class="comment"># r 读取</span></span><br><span class="line">            rows = f.read().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(newpath, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> w:  <span class="comment"># w 覆盖</span></span><br><span class="line">                w.write(rows[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> rows[<span class="number">1</span>:]:</span><br><span class="line">                <span class="comment"># 通过, 分解成列表</span></span><br><span class="line">                cols = i.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">                <span class="keyword">if</span> cols[<span class="number">1</span>] == <span class="string">&#x27;male&#x27;</span>:</span><br><span class="line">                    cols[<span class="number">1</span>] = <span class="string">&#x27;男&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    cols[<span class="number">1</span>] = <span class="string">&#x27;女&#x27;</span></span><br><span class="line">                cols[<span class="number">3</span>] = cols[<span class="number">3</span>].upper()</span><br><span class="line">                <span class="built_in">print</span>(cols)  <span class="comment"># 处理完成</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;newText.txt&#x27;</span>, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> n:  <span class="comment"># a 不覆盖</span></span><br><span class="line">                    n.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">                    n.write(<span class="string">&#x27;,&#x27;</span>.join(cols))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">solu = Solution()</span><br><span class="line">solu.fn(<span class="string">&#x27;oldText.txt&#x27;</span>, <span class="string">&#x27;newText.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>oldText</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,性别,年龄,午餐种类</span><br><span class="line">小龙,male,25,c</span><br><span class="line">小虎,male,27,a</span><br><span class="line">阿红,female,25,a</span><br><span class="line">阿岚,female,23,c</span><br><span class="line">阿月,female,25,a</span><br></pre></td></tr></table></figure><ul><li>newText</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">姓名,性别,年龄,午餐种类</span><br><span class="line">小龙,男,25,C</span><br><span class="line">小虎,男,27,A</span><br><span class="line">阿红,女,25,A</span><br><span class="line">阿岚,女,23,C</span><br><span class="line">阿月,女,25,A</span><br></pre></td></tr></table></figure><p>去除前后空格 <code>strip</code></p>]]></content>
      
      
      <categories>
          
          <category> Python编程赛项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo Blog Test</title>
      <link href="/2024/11/26/hexo-blog/"/>
      <url>/2024/11/26/hexo-blog/</url>
      
        <content type="html"><![CDATA[<h1 id="炸弹"><a href="#炸弹" class="headerlink" title="炸弹"></a>炸弹</h1><p><img src="/assets/image/bg1.jpg" alt="test"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 導航設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">nav:</span></span><br><span class="line">  <span class="comment"># 導航欄 Logo 圖片</span></span><br><span class="line">  <span class="attr">logo:</span> <span class="string">/assets/image/logo.png</span></span><br><span class="line">  <span class="comment"># 是否顯示標題</span></span><br><span class="line">  <span class="attr">display_title:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否固定導航欄</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="string">首页:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">时间轴:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="string">标签:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="string">分类:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-folder-open</span></span><br><span class="line">  <span class="string">列表||fa</span> <span class="attr">fa-heartbeat:</span></span><br><span class="line">    <span class="string">音乐:</span> <span class="string">/music/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">    <span class="string">照片:</span> <span class="string">/photo/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-images</span></span><br><span class="line">    <span class="string">电影:</span> <span class="string">/movies/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-video</span></span><br><span class="line">  <span class="string">友链:</span> <span class="string">/link/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-link</span></span><br><span class="line">  <span class="string">关于:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 代碼塊設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">code_blocks:</span></span><br><span class="line">  <span class="comment"># 代碼塊主題: darker / pale night / light / ocean / false</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">darker</span></span><br><span class="line">  <span class="comment"># 是否使用 Mac 風格</span></span><br><span class="line">  <span class="attr">macStyle:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 代碼塊高度限制（單位: px）</span></span><br><span class="line">  <span class="attr">height_limit:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否自動換行</span></span><br><span class="line">  <span class="attr">word_wrap:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 工具欄</span></span><br><span class="line">  <span class="comment"># 是否顯示複製按鈕</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否顯示語言標籤</span></span><br><span class="line">  <span class="attr">language:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># true: 收縮代碼塊 | false: 展開代碼塊 | none: 展開代碼塊並隱藏按鈕</span></span><br><span class="line">  <span class="attr">shrink:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否顯示全屏顯示代碼塊按鈕</span></span><br><span class="line">  <span class="attr">fullpage:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交媒體鏈接</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#   icon: 鏈接 || 描述 || 顏色</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 圖片設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網站的 favicon 圖標</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">assets/image/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頭像設置</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># 頭像圖片鏈接</span></span><br><span class="line">  <span class="attr">img:</span> <span class="string">assets/image/avatar.jpg</span></span><br><span class="line">  <span class="comment"># 是否啟用頭像效果</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁用所有橫幅圖片</span></span><br><span class="line"><span class="attr">disable_top_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果頁面未設置橫幅，則顯示默認的橫幅圖片</span></span><br><span class="line"><span class="attr">default_top_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主頁的橫幅圖片</span></span><br><span class="line"><span class="attr">index_img:</span> <span class="string">/assets/image/index-background.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 歸檔頁的橫幅圖片</span></span><br><span class="line"><span class="attr">archive_img:</span> <span class="string">/assets/image/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 是標籤頁（單個標籤），不是標籤頁面（所有標籤）</span></span><br><span class="line"><span class="attr">tag_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 標籤頁的橫幅圖片，可以為每個標籤設置橫幅圖片</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#  - 標籤名: 圖片鏈接</span></span><br><span class="line"><span class="attr">tag_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意: 是分類頁（單個分類），不是分類頁面（所有分類）</span></span><br><span class="line"><span class="attr">category_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分類頁的橫幅圖片，可以為每個分類設置橫幅圖片</span></span><br><span class="line"><span class="comment"># 格式:</span></span><br><span class="line"><span class="comment">#  - 分類名: 圖片鏈接</span></span><br><span class="line"><span class="attr">category_per_img:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頁腳的背景圖片</span></span><br><span class="line"><span class="attr">footer_img:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網站背景</span></span><br><span class="line"><span class="comment"># 可以設置為顏色或圖片</span></span><br><span class="line"><span class="comment"># 圖片格式: url(http://xxxxxx.com/xxx.jpg)</span></span><br><span class="line"><span class="attr">background:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封面設置</span></span><br><span class="line"><span class="attr">cover:</span></span><br><span class="line">  <span class="comment"># 是否禁用封面</span></span><br><span class="line">  <span class="attr">index_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">aside_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archives_enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 主頁封面的位置</span></span><br><span class="line">  <span class="comment"># 選擇: left/right/both</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">both</span></span><br><span class="line">  <span class="comment"># 當未設置封面時，顯示默認封面</span></span><br><span class="line">  <span class="attr">default_cover:</span></span><br><span class="line">    <span class="comment"># - https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替換損壞的圖片</span></span><br><span class="line"><span class="attr">error_img:</span></span><br><span class="line">  <span class="comment"># 友鏈頁面的錯誤圖片</span></span><br><span class="line">  <span class="attr">flink:</span> <span class="string">/img/friend_404.gif</span></span><br><span class="line">  <span class="comment"># 文章頁面的錯誤圖片</span></span><br><span class="line">  <span class="attr">post_page:</span> <span class="string">/img/404.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 簡單的 404 頁面</span></span><br><span class="line"><span class="attr">error_404:</span></span><br><span class="line">  <span class="comment"># 是否啟用 404 頁面</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 404 頁面的副標題</span></span><br><span class="line">  <span class="attr">subtitle:</span> <span class="string">&#x27;页面未找到&#x27;</span></span><br><span class="line">  <span class="comment"># 404 頁面的卡片背景圖片</span></span><br><span class="line">  <span class="attr">background:</span> <span class="string">https://i.loli.net/2020/05/19/aKOcLiyPl2JQdFD.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章元數據設置</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="comment"># 主頁頁面</span></span><br><span class="line">  <span class="attr">page:</span></span><br><span class="line">    <span class="comment"># 日期類型: created / updated / both</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">created</span></span><br><span class="line">    <span class="comment"># 日期格式: date / relative</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span></span><br><span class="line">    <span class="comment"># 是否顯示分類</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示標籤</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 是否顯示文字標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 文章頁面</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line">    <span class="comment"># 元數據位置: left / center</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="comment"># 日期類型: created / updated / both</span></span><br><span class="line">    <span class="attr">date_type:</span> <span class="string">both</span></span><br><span class="line">    <span class="comment"># 日期格式: date / relative</span></span><br><span class="line">    <span class="attr">date_format:</span> <span class="string">date</span></span><br><span class="line">    <span class="comment"># 是否顯示分類</span></span><br><span class="line">    <span class="attr">categories:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示標籤</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示文字標籤</span></span><br><span class="line">    <span class="attr">label:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 首頁設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首頁頭圖的設置</span></span><br><span class="line"><span class="comment"># 默認: 頭圖全屏，站點信息在中間</span></span><br><span class="line"><span class="comment"># 站點信息的位置，例如: 300px/300em/300rem/10%</span></span><br><span class="line"><span class="attr">index_site_info_top:</span></span><br><span class="line"><span class="comment"># 頭圖的高度，例如: 300px/300em/300rem</span></span><br><span class="line"><span class="attr">index_top_img_height:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># the subtitle on homepage (主頁subtitle)</span></span><br><span class="line"><span class="attr">subtitle:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Typewriter Effect (开启打字效果)</span></span><br><span class="line">  <span class="attr">effect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># loop (循環打字)</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># source調用第三方服務</span></span><br><span class="line">  <span class="comment"># source: false 關閉調用</span></span><br><span class="line">  <span class="comment"># source: 1  調用搏天api的隨機語錄（簡體）</span></span><br><span class="line">  <span class="comment"># source: 2  調用一言網的一句話（簡體）</span></span><br><span class="line">  <span class="comment"># source: 3  調用一句網（簡體）</span></span><br><span class="line">  <span class="comment"># source: 4  調用今日詩詞（簡體）</span></span><br><span class="line">  <span class="comment"># subtitle 會先顯示 source , 再顯示 sub 的內容</span></span><br><span class="line">  <span class="attr">source:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 如果有英文逗号&#x27; , &#x27;,请使用转义字元 &amp;#44;</span></span><br><span class="line">  <span class="comment"># 如果有英文双引号&#x27; &quot; &#x27;,请使用转义字元 &amp;quot;</span></span><br><span class="line">  <span class="comment"># 开头不允許转义字元，如需要，请把整個句子用双引号包住</span></span><br><span class="line">  <span class="comment"># 如果关闭打字效果，subtitle只会现示sub的第一行文字</span></span><br><span class="line">  <span class="attr">sub:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">你在抱怨什么呢</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">为明天到来的事，说人生像是没有意义</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">没有选择会是唯一的路</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">这不是你自己的问题，人终归要好好去生活</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首頁文章佈局</span></span><br><span class="line"><span class="comment"># 1: 行佈局</span></span><br><span class="line"><span class="comment"># 2: 列布局</span></span><br><span class="line"><span class="attr">index_layout:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在首頁顯示文章簡介</span></span><br><span class="line"><span class="comment"># 1: 描述</span></span><br><span class="line"><span class="comment"># 2: 兩者（如果存在描述，將顯示描述，否則顯示自動摘要）</span></span><br><span class="line"><span class="comment"># 3: 自動摘要（默認）</span></span><br><span class="line"><span class="comment"># false: 不顯示文章簡介</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 如果設置 method 為 2 或 3，需要配置長度</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 文章設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="comment"># 是否在文章中顯示目錄</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否在頁面中顯示目錄</span></span><br><span class="line">  <span class="attr">page:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否顯示目錄編號</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否默認展開目錄</span></span><br><span class="line">  <span class="attr">expand:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否使用簡潔風格（僅適用於文章）</span></span><br><span class="line">  <span class="attr">style_simple:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否顯示滾動百分比</span></span><br><span class="line">  <span class="attr">scroll_percent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">post_copyright:</span></span><br><span class="line">  <span class="comment"># 是否啟用版權聲明</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否進行文章 URL 解碼</span></span><br><span class="line">  <span class="attr">decode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 作者鏈接</span></span><br><span class="line">  <span class="attr">author_href:</span></span><br><span class="line">  <span class="comment"># 許可證類型</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">CC</span> <span class="string">BY-NC-SA</span> <span class="number">4.0</span></span><br><span class="line">  <span class="comment"># 許可證鏈接</span></span><br><span class="line">  <span class="attr">license_url:</span> <span class="string">https://creativecommons.org/licenses/by-nc-sa/4.0/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 贊助/打賞</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="comment"># 是否啟用打賞</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 打賞案例文本</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">  <span class="attr">QR_code:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/assets/image/reward-wechat.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">微信</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">img:</span> <span class="string">/assets/image/reward-alipay.jpg</span></span><br><span class="line">      <span class="attr">link:</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">支付宝</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章編輯</span></span><br><span class="line"><span class="comment"># 輕鬆在線瀏覽和編輯博客源代碼</span></span><br><span class="line"><span class="attr">post_edit:</span></span><br><span class="line">  <span class="comment"># 是否啟用在線編輯</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># url: https://github.com/用户名/倉庫名/edit/分支名/子目錄名/</span></span><br><span class="line">  <span class="comment"># 例如: https://github.com/jerryc127/butterfly.js.org/edit/main/source/</span></span><br><span class="line">  <span class="attr">url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 相關文章</span></span><br><span class="line"><span class="attr">related_post:</span></span><br><span class="line">  <span class="comment"># 是否顯示相關文章</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 顯示的文章數量</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">  <span class="comment"># 選擇: created / updated</span></span><br><span class="line">  <span class="attr">date_type:</span> <span class="string">created</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 選擇: 1 / 2 / false</span></span><br><span class="line"><span class="comment"># 1: “下一篇文章”將鏈接到舊文章</span></span><br><span class="line"><span class="comment"># 2: “下一篇文章”將鏈接到新文章</span></span><br><span class="line"><span class="comment"># false: 禁用分頁</span></span><br><span class="line"><span class="attr">post_pagination:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 顯示文章過期通知</span></span><br><span class="line"><span class="attr">noticeOutdate:</span></span><br><span class="line">  <span class="comment"># 是否啟用過期通知</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 樣式: simple / flat</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 多少天后顯示通知</span></span><br><span class="line">  <span class="attr">limit_day:</span> <span class="number">365</span></span><br><span class="line">  <span class="comment"># 位置: top / bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">message_prev:</span> <span class="string">已經過了</span></span><br><span class="line">  <span class="attr">message_next:</span> <span class="string">天自上次更新，文章內容可能已過時。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 頁腳設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">    <span class="comment"># 是否啟用所有者顯示</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 網站創建年份</span></span><br><span class="line">    <span class="attr">since:</span> <span class="number">2019</span></span><br><span class="line">  <span class="comment"># 自定義文本</span></span><br><span class="line">  <span class="attr">custom_text:</span></span><br><span class="line">  <span class="comment"># 主題和框架的版權聲明</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 側邊欄設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">aside:</span></span><br><span class="line">  <span class="comment"># 是否啟用側邊欄</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否默認隱藏側邊欄</span></span><br><span class="line">  <span class="attr">hide:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在右下角顯示隱藏側邊欄的按鈕</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 移動設備上是否啟用側邊欄</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 側邊欄位置：left / right</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="comment"># 歸檔頁面是否顯示側邊欄</span></span><br><span class="line">    <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 標籤頁面是否顯示側邊欄</span></span><br><span class="line">    <span class="attr">tag:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 分類頁面是否顯示側邊欄</span></span><br><span class="line">    <span class="attr">category:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_author:</span></span><br><span class="line">    <span class="comment"># 是否顯示作者信息卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 作者描述</span></span><br><span class="line">    <span class="attr">description:</span></span><br><span class="line">    <span class="attr">button:</span></span><br><span class="line">      <span class="comment"># 是否顯示按鈕</span></span><br><span class="line">      <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment"># 按鈕圖標</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">      <span class="comment"># 按鈕文本</span></span><br><span class="line">      <span class="attr">text:</span> <span class="string">Follow</span> <span class="string">Me</span></span><br><span class="line">      <span class="comment"># 按鈕鏈接</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://github.com/taichiyly</span></span><br><span class="line">  <span class="attr">card_announcement:</span></span><br><span class="line">    <span class="comment"># 是否顯示公告卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 公告內容</span></span><br><span class="line">    <span class="attr">content:</span> <span class="string">This</span> <span class="string">is</span> <span class="string">my</span> <span class="string">Blog</span></span><br><span class="line">  <span class="attr">card_recent_post:</span></span><br><span class="line">    <span class="comment"># 是否顯示最近文章卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 顯示文章數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">5</span></span><br><span class="line">    <span class="comment"># 排序方式：date / updated</span></span><br><span class="line">    <span class="attr">sort:</span> <span class="string">date</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_newest_comments:</span></span><br><span class="line">    <span class="comment"># 是否顯示最新評論卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">    <span class="comment"># 顯示評論數量</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">6</span></span><br><span class="line">    <span class="comment"># 單位：分鐘，保存數據到 localStorage</span></span><br><span class="line">    <span class="attr">storage:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># 是否顯示頭像</span></span><br><span class="line">    <span class="attr">avatar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">card_categories:</span></span><br><span class="line">    <span class="comment"># 是否顯示分類卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 顯示分類數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span></span><br><span class="line">    <span class="comment"># 選擇：none / true / false</span></span><br><span class="line">    <span class="attr">expand:</span> <span class="string">none</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_tags:</span></span><br><span class="line">    <span class="comment"># 是否顯示標籤卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 顯示標籤數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">40</span></span><br><span class="line">    <span class="comment"># 是否啟用顏色</span></span><br><span class="line">    <span class="attr">color:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 標籤排序方式：random/name/length</span></span><br><span class="line">    <span class="attr">orderby:</span> <span class="string">random</span></span><br><span class="line">    <span class="comment"># 排序順序：1 表示升序，-1 表示降序</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_archives:</span></span><br><span class="line">    <span class="comment"># 是否顯示歸檔卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 歸檔類型：monthly / yearly</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">monthly</span></span><br><span class="line">    <span class="comment"># 日期格式，例如：YYYY年MM月</span></span><br><span class="line">    <span class="attr">format:</span> <span class="string">MMMM</span> <span class="string">YYYY</span></span><br><span class="line">    <span class="comment"># 排序順序：1 表示升序，-1 表示降序</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">    <span class="comment"># 顯示歸檔數量，0 表示顯示所有</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">8</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">  <span class="attr">card_post_series:</span></span><br><span class="line">    <span class="comment"># 是否顯示系列文章卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 標題顯示系列名稱</span></span><br><span class="line">    <span class="attr">series_title:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 排序方式：title 或 date</span></span><br><span class="line">    <span class="attr">orderBy:</span> <span class="string">&#x27;date&#x27;</span></span><br><span class="line">    <span class="comment"># 排序順序：1 表示升序，-1 表示降序</span></span><br><span class="line">    <span class="attr">order:</span> <span class="number">-1</span></span><br><span class="line">  <span class="attr">card_webinfo:</span></span><br><span class="line">    <span class="comment"># 是否顯示網站信息卡片</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示文章數量</span></span><br><span class="line">    <span class="attr">post_count:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 是否顯示最後推送日期</span></span><br><span class="line">    <span class="attr">last_push_date:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sort_order:</span></span><br><span class="line">    <span class="comment"># 發佈日期與當前日期的時間差</span></span><br><span class="line">    <span class="comment"># 格式：Month/Day/Year Time 或 Year/Month/Day Time</span></span><br><span class="line">    <span class="comment"># 如果不啟用此功能，請留空</span></span><br><span class="line">    <span class="attr">runtime_date:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 右下角按鈕設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 右下角按鈕與底部的距離（默認單位：px）</span></span><br><span class="line"><span class="attr">rightside_bottom:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 閲讀模式</span></span><br><span class="line"><span class="attr">readmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暗黑模式設置</span></span><br><span class="line"><span class="attr">darkmode:</span></span><br><span class="line">  <span class="comment"># 是否啟用暗黑模式</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 切換暗黑/明亮模式的按鈕</span></span><br><span class="line">  <span class="attr">button:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否自動切換暗黑/明亮模式</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 1  跟隨系統設置，如果系統不支持暗黑模式，則在晚上 6 點到早上 6 點之間切換暗黑模式</span></span><br><span class="line">  <span class="comment"># autoChangeMode: 2  在晚上 6 點到早上 6 點之間切換暗黑模式</span></span><br><span class="line">  <span class="comment"># autoChangeMode: false  不自動切換</span></span><br><span class="line">  <span class="attr">autoChangeMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 設置明亮模式時間，值在 0 到 24 之間。如果未設置，默認值為 6 和 18</span></span><br><span class="line">  <span class="attr">start:</span></span><br><span class="line">  <span class="attr">end:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在返回頂部按鈕中顯示滾動百分比</span></span><br><span class="line"><span class="attr">rightside_scroll_percent:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要修改以下設置，除非你知道它們的工作原理</span></span><br><span class="line"><span class="comment"># 選擇：readmode,translate,darkmode,hideAside,toc,chat,comment</span></span><br><span class="line"><span class="comment"># 不要重複相同的值</span></span><br><span class="line"><span class="attr">rightside_item_order:</span></span><br><span class="line">  <span class="comment"># 是否啟用右側項目順序</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 隱藏的默認項目：readmode,translate,darkmode,hideAside</span></span><br><span class="line">  <span class="attr">hide:</span></span><br><span class="line">  <span class="comment"># 顯示的默認項目：toc,chat,comment</span></span><br><span class="line">  <span class="attr">show:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 全局設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 錨點設置</span></span><br><span class="line"><span class="attr">anchor:</span></span><br><span class="line">  <span class="comment"># 滾動時，URL 將根據標題 ID 更新</span></span><br><span class="line">  <span class="attr">auto_update:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 點擊標題滾動並更新錨點</span></span><br><span class="line">  <span class="attr">click_to_scroll:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 圖片標題</span></span><br><span class="line"><span class="attr">photofigcaption:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 複製設置</span></span><br><span class="line"><span class="attr">copy:</span></span><br><span class="line">  <span class="comment"># 是否啟用複製功能</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在複製的內容後添加版權信息</span></span><br><span class="line">  <span class="attr">copyright:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 當複製字符數超過 limit_count 時添加版權信息</span></span><br><span class="line">    <span class="attr">limit_count:</span> <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 需要安裝 hexo-wordcount 插件</span></span><br><span class="line"><span class="attr">wordcount:</span></span><br><span class="line">  <span class="comment"># 是否啟用字數統計</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在文章元信息中顯示字數統計</span></span><br><span class="line">  <span class="attr">post_wordcount:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在文章元信息中顯示閲讀時間</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 在側邊欄網站信息中顯示總字數</span></span><br><span class="line">  <span class="attr">total_wordcount:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不蒜子 PV / UV 統計</span></span><br><span class="line"><span class="attr">busuanzi:</span></span><br><span class="line">  <span class="comment"># 網站 UV 統計</span></span><br><span class="line">  <span class="attr">site_uv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 網站 PV 統計</span></span><br><span class="line">  <span class="attr">site_pv:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 頁面 PV 統計</span></span><br><span class="line">  <span class="attr">page_pv:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 數學公式設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 關於 per_page</span></span><br><span class="line"><span class="comment"># 如果設置為 true，將在每個頁面加載 mathjax/katex 腳本</span></span><br><span class="line"><span class="comment"># 如果設置為 false，將根據你的設置加載 mathjax/katex 腳本（在頁面的 front-matter 中添加 &#x27;mathjax: true&#x27; 或者 &#x27;katex: true&#x27;）</span></span><br><span class="line"><span class="attr">math:</span></span><br><span class="line">  <span class="comment"># 選擇：mathjax, katex</span></span><br><span class="line">  <span class="comment"># 如果不需要數學公式，保持為空</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hide_scrollbar:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mathjax:</span></span><br><span class="line">    <span class="comment"># 啟用上下文菜單</span></span><br><span class="line">    <span class="attr">enableMenu:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 選擇：all / ams / none，這控制是否對公式編號以及如何編號</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">none</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">katex:</span></span><br><span class="line">    <span class="comment"># 啟用複製 KaTeX 公式</span></span><br><span class="line">    <span class="attr">copy_tex:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 搜索設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="comment"># 選擇：algolia_search / local_search / docsearch</span></span><br><span class="line">  <span class="comment"># 如果不需要搜索功能，保持為空</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">local_search</span></span><br><span class="line">  <span class="attr">placeholder:</span> </span><br><span class="line">  <span class="comment"># 本地搜索</span></span><br><span class="line">  <span class="attr">local_search:</span></span><br><span class="line">    <span class="comment"># 頁面加載時預加載搜索數據</span></span><br><span class="line">    <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 每篇文章顯示的頂部 n 個搜索結果，設置為 -1 顯示所有結果</span></span><br><span class="line">    <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 分享系統</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">share:</span></span><br><span class="line">  <span class="comment"># 選擇：sharejs / addtoany</span></span><br><span class="line">  <span class="comment"># 如果不需要分享功能，保持為空</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">sharejs</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Share.js</span></span><br><span class="line">  <span class="comment"># https://github.com/overtrue/share.js</span></span><br><span class="line">  <span class="attr">sharejs:</span></span><br><span class="line">    <span class="attr">sites:</span> <span class="string">facebook,twitter,wechat,weibo,qq</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># AddToAny</span></span><br><span class="line">  <span class="comment"># https://www.addtoany.com/</span></span><br><span class="line">  <span class="attr">addtoany:</span></span><br><span class="line">    <span class="attr">item:</span> <span class="string">facebook,twitter,wechat,sina_weibo,facebook_messenger,email,copy_link</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 評論系統</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">comments:</span></span><br><span class="line">  <span class="comment"># 最多兩個評論系統，第一個將作為默認顯示</span></span><br><span class="line">  <span class="comment"># 如果不需要評論功能，保持為空</span></span><br><span class="line">  <span class="comment"># 選擇：Disqus/Disqusjs/Livere/Gitalk/Valine/Waline/Utterances/Facebook Comments/Twikoo/Giscus/Remark42/Artalk</span></span><br><span class="line">  <span class="comment"># 兩個評論系統的格式：Disqus,Waline</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">  <span class="comment"># 按鈕旁邊顯示評論系統名稱</span></span><br><span class="line">  <span class="attr">text:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 懶加載：評論系統將在評論元素進入瀏覽器視口時加載</span></span><br><span class="line">  <span class="comment"># 如果設置為 true，評論計數將無效</span></span><br><span class="line">  <span class="attr">lazyload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在文章頂部圖片中顯示評論計數</span></span><br><span class="line">  <span class="attr">count:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 在主頁顯示評論計數</span></span><br><span class="line">  <span class="attr">card_post_count:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disqus 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://disqus.com/</span></span><br><span class="line"><span class="attr">disqus:</span></span><br><span class="line">  <span class="comment"># Disqus 的 shortname</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="comment"># 最新評論小部件的 API 密鑰</span></span><br><span class="line">  <span class="attr">apikey:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Disqus API 渲染評論的替代方案</span></span><br><span class="line"><span class="comment"># 官方文檔：https://github.com/SukkaW/DisqusJS</span></span><br><span class="line"><span class="attr">disqusjs:</span></span><br><span class="line">  <span class="comment"># Disqus 的 shortname</span></span><br><span class="line">  <span class="attr">shortname:</span></span><br><span class="line">  <span class="comment"># API 密鑰</span></span><br><span class="line">  <span class="attr">apikey:</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Livere 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://www.livere.com/</span></span><br><span class="line"><span class="attr">livere:</span></span><br><span class="line">  <span class="comment"># Livere 的用户 ID</span></span><br><span class="line">  <span class="attr">uid:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://github.com/gitalk/gitalk</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="comment"># GitHub 應用的客户端 ID</span></span><br><span class="line">  <span class="attr">client_id:</span></span><br><span class="line">  <span class="comment"># GitHub 應用的客户端密鑰</span></span><br><span class="line">  <span class="attr">client_secret:</span></span><br><span class="line">  <span class="comment"># 存儲評論的倉庫名稱</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="comment"># 倉庫擁有者的用户名</span></span><br><span class="line">  <span class="attr">owner:</span></span><br><span class="line">  <span class="comment"># 管理員用户名列表</span></span><br><span class="line">  <span class="attr">admin:</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://valine.js.org</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="comment"># LeanCloud 應用的 appId</span></span><br><span class="line">  <span class="attr">appId:</span></span><br><span class="line">  <span class="comment"># LeanCloud 應用的 appKey</span></span><br><span class="line">  <span class="attr">appKey:</span></span><br><span class="line">  <span class="comment"># 評論者頭像樣式</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">monsterid</span></span><br><span class="line">  <span class="comment"># 該配置適用於國內自定義域名用户，海外版本將自動檢測（無需手動填寫）</span></span><br><span class="line">  <span class="attr">serverURLs:</span></span><br><span class="line">  <span class="comment"># 評論框背景圖片</span></span><br><span class="line">  <span class="attr">bg:</span></span><br><span class="line">  <span class="comment"># 使用 Valine 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Waline 評論插件配置，一個簡單的評論系統，基於 Valine 開發，支持後端</span></span><br><span class="line"><span class="comment"># 官方文檔：https://waline.js.org/</span></span><br><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="comment"># 服務器 URL</span></span><br><span class="line">  <span class="attr">serverURL:</span></span><br><span class="line">  <span class="comment"># 評論框背景圖片</span></span><br><span class="line">  <span class="attr">bg:</span></span><br><span class="line">  <span class="comment"># 使用 Waline 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">pageview:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Utterances 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://utteranc.es/</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line">  <span class="comment"># 存儲評論的 GitHub 倉庫</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="comment"># 問題映射方式，可選值：pathname/url/title/og:title</span></span><br><span class="line">  <span class="attr">issue_term:</span> <span class="string">pathname</span></span><br><span class="line">  <span class="comment"># 淺色主題，可選值：github-light</span></span><br><span class="line">  <span class="attr">light_theme:</span> <span class="string">github-light</span></span><br><span class="line">  <span class="comment"># 深色主題，可選值：photon-dark</span></span><br><span class="line">  <span class="attr">dark_theme:</span> <span class="string">photon-dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Facebook 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://developers.facebook.com/docs/plugins/comments/</span></span><br><span class="line"><span class="attr">facebook_comments:</span></span><br><span class="line">  <span class="comment"># 應用 ID</span></span><br><span class="line">  <span class="attr">app_id:</span></span><br><span class="line">  <span class="comment"># 用户 ID，可選</span></span><br><span class="line">  <span class="attr">user_id:</span></span><br><span class="line">  <span class="comment"># 每頁顯示評論數</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br><span class="line">  <span class="comment"># 評論排序方式，可選值：social / time / reverse_time</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">social</span></span><br><span class="line">  <span class="comment"># 語言設置</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh_TW</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Twikoo 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://github.com/imaegoo/twikoo</span></span><br><span class="line"><span class="attr">twikoo:</span></span><br><span class="line">  <span class="comment"># 環境 ID</span></span><br><span class="line">  <span class="attr">envId:</span></span><br><span class="line">  <span class="comment"># 區域</span></span><br><span class="line">  <span class="attr">region:</span></span><br><span class="line">  <span class="comment"># 使用 Twikoo 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Giscus 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://giscus.app/</span></span><br><span class="line"><span class="attr">giscus:</span></span><br><span class="line">  <span class="comment"># 倉庫地址</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">  <span class="comment"># 倉庫 ID</span></span><br><span class="line">  <span class="attr">repo_id:</span></span><br><span class="line">  <span class="comment"># 分類 ID</span></span><br><span class="line">  <span class="attr">category_id:</span></span><br><span class="line">  <span class="comment"># 主題配置，light 為淺色主題，dark 為深色主題</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">light</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remark42 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://remark42.com/docs/configuration/frontend/</span></span><br><span class="line"><span class="attr">remark42:</span></span><br><span class="line">  <span class="comment"># 服務器地址</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">  <span class="comment"># 站點 ID</span></span><br><span class="line">  <span class="attr">siteId:</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Artalk 評論插件配置</span></span><br><span class="line"><span class="comment"># 官方文檔：https://artalk.js.org/guide/frontend/config.html</span></span><br><span class="line"><span class="attr">artalk:</span></span><br><span class="line">  <span class="comment"># 服務器地址</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">  <span class="comment"># 站點名</span></span><br><span class="line">  <span class="attr">site:</span></span><br><span class="line">  <span class="comment"># 使用 Artalk 的訪客計數作為頁面的訪客量</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 其他可選配置</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 聊天服務配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">chat:</span></span><br><span class="line">  <span class="comment"># 聊天服務類型，可選值：chatra/tidio/crisp，如果不需要聊天功能則留空</span></span><br><span class="line">  <span class="attr">use:</span></span><br><span class="line">  <span class="comment"># 推薦使用聊天按鈕，會在網站右下角創建一個按鈕，並隱藏原始按鈕</span></span><br><span class="line">  <span class="attr">rightside_button:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 原始聊天按鈕在向上滾動時顯示，向下滾動時隱藏</span></span><br><span class="line">  <span class="attr">button_hide_show:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Chatra 聊天服務配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://chatra.io/</span></span><br><span class="line"><span class="attr">chatra:</span></span><br><span class="line">  <span class="comment"># Chatra 服務 ID</span></span><br><span class="line">  <span class="attr">id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tidio 聊天服務配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://www.tidio.com/</span></span><br><span class="line"><span class="attr">tidio:</span></span><br><span class="line">  <span class="comment"># Tidio 公鑰</span></span><br><span class="line">  <span class="attr">public_key:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Crisp 聊天服務配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://crisp.chat/en/</span></span><br><span class="line"><span class="attr">crisp:</span></span><br><span class="line">  <span class="comment"># Crisp 網站 ID</span></span><br><span class="line">  <span class="attr">website_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 分析服務配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度統計配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://tongji.baidu.com/web/welcome/login</span></span><br><span class="line"><span class="attr">baidu_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 谷歌分析配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://analytics.google.com/analytics/web/</span></span><br><span class="line"><span class="attr">google_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cloudflare 分析配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://www.cloudflare.com/zh-tw/web-analytics/</span></span><br><span class="line"><span class="attr">cloudflare_analytics:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Microsoft Clarity 分析配置</span></span><br><span class="line"><span class="comment"># 官方網站：https://clarity.microsoft.com/</span></span><br><span class="line"><span class="attr">microsoft_clarity:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 廣告配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Adsense 廣告配置</span></span><br><span class="line"><span class="attr">google_adsense:</span></span><br><span class="line">  <span class="comment"># 是否啟用</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否自動投放廣告</span></span><br><span class="line">  <span class="attr">auto_ads:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 廣告腳本 URL</span></span><br><span class="line">  <span class="attr">js:</span> <span class="string">https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js</span></span><br><span class="line">  <span class="comment"># 客户 ID</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">  <span class="comment"># 是否啟用頁面級廣告</span></span><br><span class="line">  <span class="attr">enable_page_level_ads:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 手動插入廣告配置，如果不需要廣告則留空</span></span><br><span class="line"><span class="attr">ad:</span></span><br><span class="line">  <span class="comment"># 在首頁每三個帖子後插入廣告</span></span><br><span class="line">  <span class="attr">index:</span></span><br><span class="line">  <span class="comment"># 在側邊欄插入廣告</span></span><br><span class="line">  <span class="attr">aside:</span></span><br><span class="line">  <span class="comment"># 在文章分頁前插入廣告</span></span><br><span class="line">  <span class="attr">post:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 站點驗證配置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="attr">site_verification:</span></span><br><span class="line">  <span class="comment"># 示例：</span></span><br><span class="line">  <span class="comment"># - name: google-site-verification</span></span><br><span class="line">  <span class="comment">#   content: xxxxxx</span></span><br><span class="line">  <span class="comment"># - name: baidu-site-verification</span></span><br><span class="line">  <span class="comment">#   content: xxxxxxx</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 美化 / 效果</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主題顏色自定義</span></span><br><span class="line"><span class="comment"># 注意：顏色值必須用雙引號，如 &quot;#000&quot;，否則可能會導致錯誤！</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主題顏色配置</span></span><br><span class="line"><span class="comment"># theme_color:</span></span><br><span class="line"><span class="comment">#   是否啟用主題顏色</span></span><br><span class="line"><span class="comment">#   enable: true</span></span><br><span class="line"><span class="comment">#   主顏色</span></span><br><span class="line"><span class="comment">#   main: &quot;#49B1F5&quot;</span></span><br><span class="line"><span class="comment">#   分頁器顏色</span></span><br><span class="line"><span class="comment">#   paginator: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   按鈕懸停顏色</span></span><br><span class="line"><span class="comment">#   button_hover: &quot;#FF7242&quot;</span></span><br><span class="line"><span class="comment">#   文本選擇顏色</span></span><br><span class="line"><span class="comment">#   text_selection: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   鏈接顏色</span></span><br><span class="line"><span class="comment">#   link_color: &quot;#99a9bf&quot;</span></span><br><span class="line"><span class="comment">#   元數據顏色</span></span><br><span class="line"><span class="comment">#   meta_color: &quot;#858585&quot;</span></span><br><span class="line"><span class="comment">#   水平線顏色</span></span><br><span class="line"><span class="comment">#   hr_color: &quot;#A4D8FA&quot;</span></span><br><span class="line"><span class="comment">#   代碼前景色</span></span><br><span class="line"><span class="comment">#   code_foreground: &quot;#F47466&quot;</span></span><br><span class="line"><span class="comment">#   代碼背景色</span></span><br><span class="line"><span class="comment">#   code_background: &quot;rgba(27, 31, 35, .05)&quot;</span></span><br><span class="line"><span class="comment">#   目錄顏色</span></span><br><span class="line"><span class="comment">#   toc_color: &quot;#00c4b6&quot;</span></span><br><span class="line"><span class="comment">#   引用塊填充顏色</span></span><br><span class="line"><span class="comment">#   blockquote_padding_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   引用塊背景顏色</span></span><br><span class="line"><span class="comment">#   blockquote_background_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   滾動條顏色</span></span><br><span class="line"><span class="comment">#   scrollbar_color: &quot;#49b1f5&quot;</span></span><br><span class="line"><span class="comment">#   淺色模式下的主題顏色</span></span><br><span class="line"><span class="comment">#   meta_theme_color_light: &quot;ffffff&quot;</span></span><br><span class="line"><span class="comment">#   深色模式下的主題顏色</span></span><br><span class="line"><span class="comment">#   meta_theme_color_dark: &quot;#0d0d0d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分類和標籤頁面的用户界面設置</span></span><br><span class="line"><span class="comment"># 選擇：index - 與主頁 UI 相同 / default - 與歸檔 UI 相同</span></span><br><span class="line"><span class="comment"># 留空或設置為 index</span></span><br><span class="line"><span class="attr">category_ui:</span></span><br><span class="line"><span class="attr">tag_ui:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉伸行使每行寬度相等</span></span><br><span class="line"><span class="attr">text_align_justify:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 為頁眉和頁腳添加遮罩</span></span><br><span class="line"><span class="attr">mask:</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加載動畫</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="comment"># 是否啟用加載動畫</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 資源</span></span><br><span class="line">  <span class="comment"># 1. 全屏加載</span></span><br><span class="line">  <span class="comment"># 2. 進度條</span></span><br><span class="line">  <span class="attr">source:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># pace 主題 (參見 https://codebyzach.github.io/pace/)</span></span><br><span class="line">  <span class="attr">pace_css_url:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 頁面過渡效果</span></span><br><span class="line"><span class="attr">enter_transitions:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默認顯示模式 - light (默認) / dark</span></span><br><span class="line"><span class="attr">display_mode:</span> <span class="string">light</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 美化文章內容的配置</span></span><br><span class="line"><span class="attr">beautify:</span></span><br><span class="line">  <span class="comment"># 是否啟用美化</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 指定美化的範圍 (site 或 post)</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="comment"># 指定標題前綴圖標，如 &#x27;\f0c1&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon:</span></span><br><span class="line">  <span class="comment"># 指定標題前綴圖標的顏色，如 &#x27;#F47466&#x27;</span></span><br><span class="line">  <span class="attr">title-prefix-icon-color:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局字體設置</span></span><br><span class="line"><span class="comment"># 除非您知道它們的工作原理，否則不要修改以下設置</span></span><br><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">global-font-size:</span></span><br><span class="line">  <span class="attr">code-font-size:</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br><span class="line">  <span class="attr">code-font-family:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 網站標題和副標題的字體設置</span></span><br><span class="line"><span class="attr">blog_title_font:</span></span><br><span class="line">  <span class="attr">font_link:</span></span><br><span class="line">  <span class="attr">font-family:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分隔符圖標的設置</span></span><br><span class="line"><span class="attr">hr_icon:</span></span><br><span class="line">  <span class="comment"># 是否啟用分隔符圖標</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Font Awesome 圖標的 unicode 值，如 &#x27;\3423&#x27;</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">  <span class="attr">icon-top:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打字機效果</span></span><br><span class="line"><span class="comment"># https://github.com/disjukr/activate-power-mode</span></span><br><span class="line"><span class="attr">activate_power_mode:</span></span><br><span class="line">  <span class="comment"># 是否啟用打字機效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否啟用彩色效果</span></span><br><span class="line">  <span class="attr">colorful:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否啟用震動效果</span></span><br><span class="line">  <span class="attr">shake:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背景效果</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_ribbon</span></span><br><span class="line"><span class="comment"># 參見: https://github.com/hustcc/ribbon.js</span></span><br><span class="line"><span class="attr">canvas_ribbon:</span></span><br><span class="line">  <span class="comment"># 是否啟用 canvas_ribbon</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># ribbon 的大小</span></span><br><span class="line">  <span class="attr">size:</span> <span class="number">150</span></span><br><span class="line">  <span class="comment"># ribbon 的不透明度 (0 ~ 1)</span></span><br><span class="line">  <span class="attr">alpha:</span> <span class="number">0.6</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 是否點擊更改顏色</span></span><br><span class="line">  <span class="attr">click_to_change:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Fluttering Ribbon</span></span><br><span class="line"><span class="attr">canvas_fluttering_ribbon:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Fluttering Ribbon</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># canvas_nest</span></span><br><span class="line"><span class="comment"># https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="comment"># 是否啟用 canvas_nest</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 線條顏色，默認: &#x27;0,0,0&#x27;; RGB 值: (R,G,B).(注意: 使用 &#x27;,&#x27; 分隔.)</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;0,0,255&#x27;</span></span><br><span class="line">  <span class="comment"># 線條的不透明度 (0~1)</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line">  <span class="comment"># 背景的 z-index 屬性</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span></span><br><span class="line">  <span class="comment"># 線條數量</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠標點擊效果: 煙花</span></span><br><span class="line"><span class="attr">fireworks:</span></span><br><span class="line">  <span class="comment"># 是否啟用煙花效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">9999</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠標點擊效果: 心形符號</span></span><br><span class="line"><span class="attr">click_heart:</span></span><br><span class="line">  <span class="comment"># 是否啟用心形符號效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠標點擊效果: 文字</span></span><br><span class="line"><span class="attr">clickShowText:</span></span><br><span class="line">  <span class="comment"># 是否啟用文字效果</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">text:</span></span><br><span class="line">    <span class="comment"># - I</span></span><br><span class="line">    <span class="comment"># - LOVE</span></span><br><span class="line">    <span class="comment"># - YOU</span></span><br><span class="line">  <span class="attr">fontSize:</span> <span class="string">15px</span></span><br><span class="line">  <span class="comment"># 是否隨機顯示文字</span></span><br><span class="line">  <span class="attr">random:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否在移動設備上啟用</span></span><br><span class="line">  <span class="attr">mobile:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 燈箱設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 選擇: fancybox / medium_zoom  图片大图查看</span></span><br><span class="line"><span class="comment"># https://github.com/francoischalifour/medium-zoom</span></span><br><span class="line"><span class="comment"># https://fancyapps.com/fancybox/</span></span><br><span class="line"><span class="comment"># 如果不需要燈箱效果，請留空  </span></span><br><span class="line"><span class="attr">lightbox:</span> <span class="string">fancybox</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 標籤外掛設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 系列</span></span><br><span class="line"><span class="attr">series:</span></span><br><span class="line">  <span class="comment"># 是否啟用系列</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 按標題或日期排序</span></span><br><span class="line">  <span class="attr">orderBy:</span> <span class="string">&#x27;title&#x27;</span></span><br><span class="line">  <span class="comment"># 排序方式。1, asc 為升序; -1, desc 為降序</span></span><br><span class="line">  <span class="attr">order:</span> <span class="number">1</span></span><br><span class="line">  <span class="comment"># 是否顯示編號</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ABCJS - ABC 音樂符號插件</span></span><br><span class="line"><span class="comment"># https://github.com/paulrosen/abcjs</span></span><br><span class="line"><span class="attr">abcjs:</span></span><br><span class="line">  <span class="comment"># 是否啟用 ABCJS</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否每頁啟用</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Mermaid</span></span><br><span class="line"><span class="comment"># https://github.com/mermaid-js/mermaid</span></span><br><span class="line"><span class="attr">mermaid:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Mermaid</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 使用代碼塊編寫 Mermaid 圖表</span></span><br><span class="line">  <span class="attr">code_write:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 內置主題: default / forest / dark / neutral</span></span><br><span class="line">  <span class="attr">theme:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">default</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">dark</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># chartjs</span></span><br><span class="line"><span class="comment"># 參見 https://www.chartjs.org/docs/latest/</span></span><br><span class="line"><span class="attr">chartjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 除非你了解它們的工作原理，否則不要修改。</span></span><br><span class="line">  <span class="comment"># 默認設置僅在未指定 MD 語法時使用。</span></span><br><span class="line">  <span class="comment"># 圖表的字體顏色</span></span><br><span class="line">  <span class="attr">fontColor:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">&quot;rgba(0, 0, 0, 0.8)&quot;</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">&quot;rgba(255, 255, 255, 0.8)&quot;</span></span><br><span class="line">  <span class="comment"># 圖表的邊框顏色</span></span><br><span class="line">  <span class="attr">borderColor:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">&quot;rgba(0, 0, 0, 0.1)&quot;</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">&quot;rgba(255, 255, 255, 0.2)&quot;</span></span><br><span class="line">  <span class="comment"># 雷達圖和極區圖的刻度標籤背景顏色</span></span><br><span class="line">  <span class="attr">scale_ticks_backdropColor:</span></span><br><span class="line">    <span class="attr">light:</span> <span class="string">&quot;transparent&quot;</span></span><br><span class="line">    <span class="attr">dark:</span> <span class="string">&quot;transparent&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note - Bootstrap 提示框</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="comment"># Note 標籤樣式值:</span></span><br><span class="line">  <span class="comment">#  - simple    bs-callout 舊警告樣式。默認。</span></span><br><span class="line">  <span class="comment">#  - modern    bs-callout 新 (v2-v3) 警告樣式。</span></span><br><span class="line">  <span class="comment">#  - flat      扁平提示框樣式，帶背景，如 Mozilla 或 StackOverflow。</span></span><br><span class="line">  <span class="comment">#  - disabled  禁用所有 Note 標籤的 CSS 樣式。</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="comment"># 是否顯示圖標</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 邊框半徑</span></span><br><span class="line">  <span class="attr">border_radius:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment"># 背景顏色偏移百分比 (modern: -12 | 12; flat: -18 | 6)。</span></span><br><span class="line">  <span class="comment"># 也應用於標籤變量。此選項可與禁用的 Note 標籤一起使用。</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"><span class="comment"># 其他設置</span></span><br><span class="line"><span class="comment"># --------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># https://github.com/MoOx/pjax</span></span><br><span class="line"><span class="attr">pjax:</span></span><br><span class="line">  <span class="comment"># 是否啟用 pjax</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 排除指定頁面不使用 pjax，如 &#x27;/music/&#x27;</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="comment"># - /xxxxxx/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注入 CSS 和腳本 (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="comment"># 是否啟用注入</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 是否每頁啟用</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Snackbar - Toast 通知</span></span><br><span class="line"><span class="comment"># https://github.com/polonel/SnackBar</span></span><br><span class="line"><span class="comment"># 位置: top-left / top-center / top-right / bottom-left / bottom-center / bottom-right</span></span><br><span class="line"><span class="attr">snackbar:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Snackbar</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 通知位置</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">bottom-left</span></span><br><span class="line">  <span class="comment"># 淺色模式和深色模式下的通知背景顏色</span></span><br><span class="line">  <span class="attr">bg_light:</span> <span class="string">&#x27;#49b1f5&#x27;</span></span><br><span class="line">  <span class="attr">bg_dark:</span> <span class="string">&#x27;#1f1f1f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Instant.page</span></span><br><span class="line"><span class="comment"># https://instant.page/</span></span><br><span class="line"><span class="attr">instantpage:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pangu - 在中文字符和英文字符之間插入空格</span></span><br><span class="line"><span class="comment"># https://github.com/vinta/pangu.js</span></span><br><span class="line"><span class="attr">pangu:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Pangu</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 指定使用 Pangu 的範圍(site 或 post)</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lazyload</span></span><br><span class="line"><span class="comment"># https://github.com/verlok/vanilla-lazyload</span></span><br><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Lazyload</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># 指定使用 Lazyload 的範圍 (site 或 post)</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">placeholder:</span></span><br><span class="line">  <span class="attr">blur:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PWA</span></span><br><span class="line"><span class="comment"># 參見 https://github.com/JLHwung/hexo-offline</span></span><br><span class="line"><span class="comment"># ---------------</span></span><br><span class="line"><span class="attr">pwa:</span></span><br><span class="line">  <span class="comment"># 是否啟用 PWA</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># PWA manifest 文件路徑</span></span><br><span class="line">  <span class="attr">manifest:</span></span><br><span class="line">  <span class="comment"># Apple Touch 圖標路徑</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span></span><br><span class="line">  <span class="comment"># 32x32 像素的 favicon 圖標路徑</span></span><br><span class="line">  <span class="attr">favicon_32_32:</span></span><br><span class="line">  <span class="comment"># 16x16 像素的 favicon 圖標路徑</span></span><br><span class="line">  <span class="attr">favicon_16_16:</span></span><br><span class="line">  <span class="comment"># mask 圖標路徑</span></span><br><span class="line">  <span class="attr">mask_icon:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Open graph meta tags</span></span><br><span class="line"><span class="comment"># 參見 https://hexo.io/docs/helpers#open-graph</span></span><br><span class="line"><span class="attr">Open_Graph_meta:</span></span><br><span class="line">  <span class="comment"># 是否啟用 Open Graph meta 標籤</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">option:</span></span><br><span class="line">    <span class="comment"># twitter_card:</span></span><br><span class="line">    <span class="comment"># twitter_image:</span></span><br><span class="line">    <span class="comment"># twitter_id:</span></span><br><span class="line">    <span class="comment"># twitter_site:</span></span><br><span class="line">    <span class="comment"># google_plus:</span></span><br><span class="line">    <span class="comment"># fb_admins:</span></span><br><span class="line">    <span class="comment"># fb_app_id:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加供應商前綴以確保兼容性</span></span><br><span class="line"><span class="comment"># 是否啟用 CSS 前綴</span></span><br><span class="line"><span class="attr">css_prefix:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inject</span></span><br><span class="line"><span class="comment"># 插入代碼到 head（在 &#x27;&lt;/head&gt;&#x27; 標籤之前）和底部（在 &#x27;&lt;/body&gt;&#x27; 標籤之前）</span></span><br><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="comment"># - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="comment"># - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CDN 設置</span></span><br><span class="line"><span class="comment"># 除非你知道它們的工作原理，否則不要修改以下設置</span></span><br><span class="line"><span class="attr">CDN:</span></span><br><span class="line">  <span class="comment"># 內部和第三方腳本的 CDN 提供商</span></span><br><span class="line">  <span class="comment"># 兩者的選項：local/jsdelivr/unpkg/cdnjs/custom</span></span><br><span class="line">  <span class="comment"># 注意： Dev 版本只能使用 &#x27;local&#x27; 作為內部腳本</span></span><br><span class="line">  <span class="comment"># 注意：將第三方腳本設置為 &#x27;local&#x27; 時，需要安裝 hexo-butterfly-extjs</span></span><br><span class="line">  <span class="attr">internal_provider:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">third_party_provider:</span> <span class="string">jsdelivr</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 是否在 URL 中添加版本號，true 或 false</span></span><br><span class="line">  <span class="attr">version:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 自定義格式</span></span><br><span class="line">  <span class="comment"># 例如：https://cdn.staticfile.org/$&#123;cdnjs_name&#125;/$&#123;version&#125;/$&#123;min_cdnjs_file&#125;</span></span><br><span class="line">  <span class="attr">custom_format:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">option:</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 主题 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/11/26/hello-world/"/>
      <url>/2024/11/26/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据通信基础</title>
      <link href="/2024/10/13/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/13/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="数据通信基础"><a href="#数据通信基础" class="headerlink" title="数据通信基础"></a>数据通信基础</h1><h3 id="信道特性"><a href="#信道特性" class="headerlink" title="信道特性"></a>信道特性</h3><p>通信术语</p><blockquote><ul><li><u><strong>消息</strong></u>：人类能感知的描述，如人能看到文字图形，听到声音等</li><li><u><strong>信息</strong></u>：对事物状态或存在方式的不确定性表述，消息是信息的载体。通过听到消息来获取信息。</li><li><u><strong>信号</strong></u>：在通信系统中，传统信息需要合适的载体在传输通道中传播，这样的载体称为信号，通常以电磁波的形式存在。</li><li><u><strong>数据</strong></u>：通常是文字、数字、图像或符号。数据集合中包含信息和规律</li></ul></blockquote><p>- </p><h5 id="数据通信系统的模型"><a href="#数据通信系统的模型" class="headerlink" title="数据通信系统的模型"></a>数据通信系统的模型</h5><p><img src="/%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%A8%A1%E5%9E%8B.jpg" alt="数据通信系统的模型"></p><p>码元：相同的时间间隔里面的符号来表示二进制</p><ul><li>源系统也可以作为目标系统，目标系统也可以作为源系统</li><li>发送器：调制器</li><li>接收器：解调器</li><li>so 调制解调器 猫</li></ul><h5 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h5><p>2. </p><p><img src="/%E4%BF%A1%E9%81%93%E7%9A%84%E6%9E%81%E9%99%90%E5%AE%B9%E9%87%8F.jpg" alt="信道的极限容量"></p><p>关于失真 分为两种情况</p><ol><li>信号失真 可以识别</li><li>信号失真太大 不可以识别</li></ol><h5 id="信道特征"><a href="#信道特征" class="headerlink" title="信道特征"></a>信道特征</h5><p><img src="/%E4%BF%A1%E9%81%93%E7%89%B9%E5%BE%81.jpg" alt="信道特征"></p><blockquote><p> 码元速度 也就是 波特率，单位时间内可以发送多少个码元（波特 Baud）</p><p>数据速率是在单位时间内可以发送多少个bit比特（单位 bps 相等于 b&#x2F;s）</p><p><u><strong>注意</strong></u>：只要题目给出了噪声 或 信噪比 使用香浓理论</p><p>没有给噪音关键词，就是用下面的公式 </p></blockquote><h4 id="信道特征-奈奎斯特定理和香农理论"><a href="#信道特征-奈奎斯特定理和香农理论" class="headerlink" title="信道特征-奈奎斯特定理和香农理论"></a>信道特征-奈奎斯特定理和香农理论</h4><p><u><strong>奈式定理</strong></u>：</p><ul><li>在奈式定理中，N表示码元种类数，也可理解为不同离散值的个数。</li><li>计算数据速率公式：<code>R=Blog,N</code>，即表示传输的一个码元对应传输了多少比特位。</li><li>其中B表示码元速率又称为波特率，单位是baud，R是数据速率，单位是bps。</li></ul><p><u><strong>香农理论</strong></u>：</p><ul><li>使用香农理论时，由于S&#x2F;N（信噪比）的比值通常太大，因此通常使用分贝数(dB)来表示：<code>dB=10l0g10(S/N)</code></li><li>例如，S&#x2F;N&#x3D;1000时，用分贝表示是30dB。如果带宽是3kHz，此时的极限数据速率就是：<code>C=Wlog2(1+S/N)=3000*9.97=30kbps</code></li><li>当分贝数是30dB时，公式可以简化为C&#x3D;10W</li></ul><h5 id="调制技术-模拟信道传送数字数据"><a href="#调制技术-模拟信道传送数字数据" class="headerlink" title="调制技术-模拟信道传送数字数据"></a>调制技术-模拟信道传送数字数据</h5><blockquote><p><u><strong>数据</strong></u>：数字数据和模拟数据 </p><p><u><strong>信道</strong></u>：数字信道和模拟信道</p><p>把数据转换成模拟：<u><strong>调制技术</strong></u></p><p>把数据转换成数字：<u><strong>编码技术</strong></u></p></blockquote><table><thead><tr><th>调制技术</th><th>说明</th><th>码元种类</th><th>比特位</th><th>特点</th></tr></thead><tbody><tr><td><u><strong>ASK</strong></u></td><td>用恒定的载波振幅值表示一个数(通常是，无载波表示另1)个数。</td><td>2</td><td>1</td><td>实现简单、但抗干扰性差、效率低(典型数据率仅为1200bps)</td></tr><tr><td><u><strong>FSK</strong></u></td><td>由载波频率(f<del>c</del>)附近的两个频率(f<del>1</del>、f<del>2</del>)表示两个不同值f<del>c</del>恰好为中值。</td><td>2</td><td>1</td><td>抗干扰性较ASK更强，但占用带宽较大，典型速度也是1200bps</td></tr><tr><td><u><strong>PSK</strong></u></td><td>用载波的相位偏移来表示数据值。</td><td>2</td><td>1</td><td>抗于扰性最好，而且相位的变化可以作为定时信息来同步时钟</td></tr><tr><td>4DPSK</td><td>四差分相移键控</td><td>4</td><td>2</td><td>每90°表示一种状态</td></tr><tr><td>QPSK</td><td>正交相移键控</td><td>4</td><td>2</td><td>每90°表示一种状态</td></tr></tbody></table><p><img src="/%E8%B0%83%E5%88%B6%E6%8A%80%E6%9C%AF.jpg" alt="调制技术"></p><h5 id="数字信道传送模拟数据"><a href="#数字信道传送模拟数据" class="headerlink" title="数字信道传送模拟数据"></a>数字信道传送模拟数据</h5><blockquote><p><u><strong>PCM脉冲码调制技术</strong></u></p><ul><li>采样（奈奎斯特采样定律）</li><li>量化</li><li>编码：把量化后的值转成计算机可以识别的二进制</li></ul><p>把模拟数据通过编码转换成数字信号</p></blockquote><p>习题：</p><p><img src="/%E4%BF%A1%E9%81%93%E4%B9%A0%E9%A2%98.jpg" alt="信道习题"></p><p><img src="/%E4%BF%A1%E9%81%93%E4%B9%A0%E9%A2%981.jpg" alt="信道习题1"></p><h3 id="数字编码与编码效率"><a href="#数字编码与编码效率" class="headerlink" title="数字编码与编码效率"></a>数字编码与编码效率</h3><p><img src="/%E6%9B%BC%E5%BD%BB%E6%96%AF%E7%89%B9.jpg" alt="曼彻斯特"></p><p>编码效率</p><table><thead><tr><th>编码方案</th><th>说明</th><th>效率</th><th>典型应用</th></tr></thead><tbody><tr><td>4B&#x2F;5B</td><td>每次对4位数据进行编码，将其转换为5位符号</td><td>1.25波特&#x2F;位即80%</td><td>100Base-FX、100Base-TX、FDD</td></tr><tr><td>8B&#x2F;10B</td><td>每次对8位数据位进行编码，将其转为10位符号</td><td>1.25波特&#x2F;位即80%</td><td>千兆以太网</td></tr><tr><td>8B&#x2F;6T</td><td>8bit映射为6个三进制位</td><td>0.75波特&#x2F;位</td><td>100Base-T4</td></tr></tbody></table><p><img src="/%E7%BC%96%E7%A0%81%E4%B9%A0%E9%A2%98.jpg" alt="编码习题"></p><p><img src="/%E7%BC%96%E7%A0%81%E4%B9%A0%E9%A2%981.jpg" alt="编码习题1"></p><h3 id="复用技术"><a href="#复用技术" class="headerlink" title="复用技术"></a>复用技术</h3><p><img src="/%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF.jpg" alt="复用技术"></p><blockquote><ul><li>频分复用（FDM）<ul><li>在频域内将信道带宽划分为多个子信道，并利用载波调制技术，将原始信号调制到对应某个子信道的载波信号上，使得同时传输的多路信号在整个物理信道带宽运行的范围内频谱不重叠，从而共用一个信道。</li></ul></li><li>时分复用（TDM）<ul><li>将通信信道的传输信号在**<u>时域</u><strong>内划分为</strong><u>多个等长的时隙</u>**，每路信号占用不同的<br>时隙，在时域上互不重叠，使得多路信号合用单一的通信信道，实现信道共享</li><li>按照时间去分，每个用户占用一段时间，在宏观上开 时间间隔非常短（同步时分复用）</li></ul></li><li>空分复用（WDM）<ul><li>让同一个频段在不同的空间内得到重复利用，称之为空分复用</li><li>比如5类线就是4对双绞线共用1条缆</li><li>将多根光纤组合成束实现空分复用，或者在同一根光纤中实现空分复用</li></ul></li><li>波分复用（WDM）<ul><li>光的频分复用，用光波来代替频率</li><li>应用于光纤通道中</li></ul></li><li>码分复用（CDM）<ul><li>每个用户可在同一时间使用同样的频带进行通信，但使用的是基于码型的分割信道的方法，即每个用户分配一个地址码，各个码型互不重叠，通信各方之间不会相互干扰，且抗干扰能力强。</li><li>主要用于**<u>无线通信系统</u><strong>，特别是</strong><u>移动通信系统</u>**。</li></ul></li></ul></blockquote><p><img src="/%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF%E4%B9%A0%E9%A2%98.jpg" alt="复用技术习题"></p><p><img src="/%E5%A4%8D%E7%94%A8%E8%BD%BD%E6%B3%A2.jpg" alt="复用载波"></p><h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><blockquote><ul><li>单工：单向</li><li>半双工：每次只能一个方向（对讲机）</li><li>全双工：双向（打电话）</li></ul></blockquote><p>按收发双方对数据保持步调一致</p><ul><li>异步通信<ul><li>以**<u>字符</u>**为单位独立进行传输，每次发送一个字符：“起始位”+“数据位”+“停止位”</li></ul></li><li>同步通信<ul><li>以**<u>数据块</u>**为单位进行传输，数据块包含多个字符：“起始标志”+“数据块位”+“停止标志”</li></ul></li></ul><p><img src="/%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E4%B9%A0%E9%A2%98.jpg" alt="通信方式习题"></p><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><ul><li><p><u><strong>什么是检错和纠错</strong></u>?</p></li><li><p><u><strong>什么是码距</strong></u>?</p><p>任何编码都由一组码字组成，两个码字间变化的二进制位数称为<u><strong>码距</strong></u>。</p><p>而在一种编码中任意两个码字之间最少变化的二进制位数称为该数据编码的最小码距。</p></li><li><p><u><strong>码距与检错、纠错有何关系</strong></u>?</p><ol><li>在一个码组内为了检测e个误码，要求最小码距d应该满足：<code>d&gt;=e+1</code></li><li>在一个码组内为了纠正t个误码，要求最小码距d应该满足：<code>d&gt;=2t+1</code></li></ol></li></ul><p>码距与检错、纠错的关系：</p><ul><li>若用1位长度的二进制编码。若A&#x3D;1，B&#x3D;0。这样A，B之间的最小码距为1。</li><li>若用2位长度的二进制编码，若以A&#x3D;11，B&#x3D;00为例，A、B之间的最小码距为2。</li><li>若用3位长度的二进制编码，可选用111，000作为合法编码。A，B之间的最小码距为3。</li></ul><p>校验技术：</p><blockquote><ul><li>奇偶校验（检错码）<ul><li>检错码的构造：检错码 &#x3D; 信息字段 + 校验字段</li></ul></li><li>海明校验（**<u>即检错又纠错</u>**）</li><li>CRC循环冗余校验（检错码）</li></ul></blockquote><p>奇偶校验</p><p><img src="/%E5%A5%87%E5%81%B6%E6%A0%A1%E9%AA%8C.jpg" alt="奇偶校验"></p><p>海明校验</p><p>m表示数据位的位数，k校验位的位数</p><p><img src="/%E6%B5%B7%E6%98%8E%E6%A0%A1%E9%AA%8C.jpg" alt="海明校验"></p><p>海明校验的存放位置跟2^x^有关系，图中1、2、4、8 都是空的</p>]]></content>
      
      
      <categories>
          
          <category> 网络管理员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通信方式 </tag>
            
            <tag> 数据校验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络体系结构</title>
      <link href="/2024/10/13/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>/2024/10/13/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="网络体系结构"><a href="#网络体系结构" class="headerlink" title="网络体系结构"></a>网络体系结构</h1><blockquote><p>计算机网络的概念</p><p>OSI参考模型</p><p>TCP&#x2F;IP体系</p></blockquote><h3 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h3><blockquote><p>计算机网络的概念</p><ul><li>20世纪50年代以前：计算机技术与通信技术结合</li><li>20世纪50年代至70年代中期：APPANET</li><li>20世纪70年代开始：0SI七层模型和TCP&#x2F;IP体系</li><li>20世纪90年代开始：因特网 &#x3D; Internet &#x3D; 互联网</li></ul><p>计算机网络的定义</p><ul><li>计算机网络定义为“以能够相互共享资源的方式互连起来的自治计算机系统的集合”，主要表现在如下几点：<br><u><strong>★目的是实现计算机资源的共享</strong></u><br><u><strong>★分布在不同地理位置的多台独立的“自治计算机”</strong></u><br><u><strong>★ 通信必须遵循共同的</strong><u>网络协议</u>****</u></li></ul></blockquote><h5 id="计算机网络的-性能-。"><a href="#计算机网络的-性能-。" class="headerlink" title="计算机网络的**性能**。"></a>计算机网络的**<u>性能</u>**。</h5><p>![计算机网络的性能]计算机网络的性能.jpg)</p><blockquote><ol><li>速率：表示我单位时间内能够发送数据的量（bps，b&#x2F;s）表示的就是每秒发送多少bit</li><li>带宽：指的是信号所占用的频带的宽度（单位：HZ）信号所占用频率的范围，最大的数据速率</li><li>吞吐量：单位时间内能够传递接收的数据量</li><li><u><strong>时延</strong></u>：<ul><li><u><strong>发送时延&#x3D;</strong></u>数据帧长度&#x2F;信道带宽（信道带宽也称**<u>数据速率</u>**）（发送时从数据帧的头部到尾部所占用的时间，火车身）</li><li><u><strong>传播时延&#x3D;</strong></u>信道长度&#x2F;**<u>电磁波在信道上的传输速率（如果没有给，默认是光速的2&#x2F;3等于 2×10^8^m&#x2F;s，光速是3×10^8^m&#x2F;s）</u>**（两个站点中间所用的时间 ）</li><li>处理时延：计算机对数据帧进行处理的时间</li><li>排队时延：计算机任务比较多的时候，在后面排队的时间</li></ul></li><li>往返时间：发送方发送一个数据，接收方接收到数据后再给出回应，这个回应到发送方</li><li>利用率：信道的利用率，不是达到100%就是最好的</li></ol><p>**<u>卫星通信时延为270ms</u>**。</p><p>时间关系</p><ul><li><code>1s=1000ms(毫秒)</code></li><li><code>1ms=1000μs(微秒)</code></li><li><code>1μs=1000ns(纳秒)</code></li></ul></blockquote><p>时延习题：</p><p>![时延习题]时延习题.jpg)</p><h5 id="网络协议"><a href="#网络协议" class="headerlink" title="网络协议"></a>网络协议</h5><ul><li>计算机网络**<u>各节点之间</u>** 必须遵守事先约定好的规则**<u>交换数据和控制信息</u>**；</li><li>这些**<u>规则</u><strong>精确地定义了所交换数据的</strong><u>格式和时序</u>**；</li><li>为网络数据交换而制定的**<u>规则</u>**、约定与标准称为网络协议。</li></ul><blockquote><p>网络协议三要素：</p><ul><li>语法：约定好交换信息所需要的格式</li><li>时序：对于事件的发生顺序做一个详细的说明</li><li>语义</li></ul></blockquote><h5 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h5><table><thead><tr><th>层次名称</th><th>功能</th><th>数据名称</th></tr></thead><tbody><tr><td>应用层</td><td>为应用程序提供服务并规定应用程序中通信的相关细节</td><td>数据</td></tr><tr><td>表示层</td><td>将上层传下来的信息<u><strong>格式转换</strong></u>成合适在网络中传输的格式</td><td>数据</td></tr><tr><td>会话层</td><td>负责建立和断开<u><strong>通信连接</strong></u></td><td>数据</td></tr><tr><td><u><strong>传输层</strong></u></td><td>管理两个节点间的数据传输</td><td>段</td></tr><tr><td><u>**网络层&#x3D;&#x3D;</td><td>将数据传输到&#x3D;&#x3D;目标地址&#x3D;&#x3D;IP （关键字 &#x3D;&#x3D;路由**</u>）</td><td>包</td></tr><tr><td><u>**数据链路层&#x3D;&#x3D;</td><td>负责物理层面互连的两个节点通信，同时保证收到的帧是没有错误的MAC</td><td>&#x3D;&#x3D;帧**</u></td></tr><tr><td>物理层</td><td>负责0，1比特流于电压高低，光的闪灭之间的互换</td><td>比特流</td></tr></tbody></table><h4 id="OSI-服务访问点"><a href="#OSI-服务访问点" class="headerlink" title="OSI-服务访问点"></a>OSI-服务访问点</h4><p>他是一个逻辑接口，</p><p>![比特流]服务访问点.jpg)</p><h5 id="TCP-IP体系结构"><a href="#TCP-IP体系结构" class="headerlink" title="TCP&#x2F;IP体系结构"></a>TCP&#x2F;IP体系结构</h5><p>![TCPIP体系结构]TCPIP体系结构.jpg)</p><p>常见的协议端口问题</p><blockquote><ul><li>POP3：110</li><li>FTP：20、21</li><li>HTTP：80</li><li>Telnet：23</li><li>SMTP：25</li><li>DHCP：67、68</li><li>TFTP：69</li><li>DNS：53</li></ul></blockquote><h4 id="OSI数据解封装"><a href="#OSI数据解封装" class="headerlink" title="OSI数据解封装"></a>OSI数据解封装</h4><p>![OSI数据解封装]OSI数据解封装.jpg)</p><p>OSI习题</p><p>![OSI习题]OSI习题.jpg)</p><p>网络层次与设备关系</p><ul><li>集线器：物理层设备</li><li>网桥、交换机：数据链路层</li><li>路由器：网络层</li><li>防火墙：应用层（不一定）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 网络管理员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络的概念 </tag>
            
            <tag> OSI参考模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机硬件基础</title>
      <link href="/2024/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
      <url>/2024/10/11/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机硬件基础"><a href="#计算机硬件基础" class="headerlink" title="计算机硬件基础"></a>计算机硬件基础</h1><p>上午考试</p><blockquote><p>数据的表示 （<u><strong>重要</strong></u>）</p><p>计算机系统的组成与体系结构（了解）</p><p>指令流水技术（计算少，观念多）</p><p>存储系统（）</p></blockquote><h3 id="一、数据的表示"><a href="#一、数据的表示" class="headerlink" title="一、数据的表示"></a>一、数据的表示</h3><h4 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h4><blockquote><ul><li><u><strong>R进制的表示</strong></u>（R进制分为二、八、十、十六）<ul><li>原则：逢R进一</li><li>十六进制：10<del>15 是 a</del>f</li></ul></li><li><u><strong>R进制转十进制</strong></u>（按权展开）<ul><li>二进制的1101转十进制</li></ul></li><li><u><strong>十进制转R进制</strong></u>（短除法）<ul><li>十进制236转二进制：11101100</li><li>计算方法 236 除以 2 余数 0 or 1</li></ul></li></ul></blockquote><p>进制转换</p><blockquote><ul><li><u><strong>二进制、八进制、十六进制互转</strong></u></li><li><u><strong>整数二进制转八进制（421）</strong></u>，从右到左起每三位二进制转1位八进制，不足三位的在左边添0补齐。</li><li><u><strong>整数二进制转十六进制（8421）</strong></u>，从右到左起每四位二进制转1位八进制，不足四位的在左边添0补齐。</li><li>反之十六进制转二进制，则每一位十六进制转换为四位二进制表示</li></ul></blockquote><p>计算机中的原反补码</p><table><thead><tr><th></th><th>数值1</th><th>数值-1</th><th>1+(-1)</th></tr></thead><tbody><tr><td>原码</td><td>0 0000001</td><td>1 0000001</td><td>1 0000010</td></tr><tr><td>反码</td><td>0 0000001</td><td>1 1111110</td><td>1 1111111</td></tr><tr><td>补码</td><td>0 0000001</td><td>1 1111111</td><td>0 0000000</td></tr></tbody></table><p>考点：</p><blockquote><ol><li>给原码 求 补码，或者给 补码 求 原码 （负数）</li><li>在计算机里面用补码来表示一个数字和存储一个数字</li><li>用8个bit位的二进制数能够表示 -128的是哪一个？</li></ol></blockquote><p>取值范围：</p><table><thead><tr><th align="center"></th><th align="center">定点整数</th><th align="center">定点小数</th></tr></thead><tbody><tr><td align="center">原码</td><td align="center">-(2^n-1^-1)~2^n-1^-1</td><td align="center">-1＜X＜1</td></tr><tr><td align="center">反码</td><td align="center">-(2^n-1^-1)~2^n-1^-1</td><td align="center">-1＜X＜1</td></tr><tr><td align="center">补码</td><td align="center">-2^n-1^~2^n-1^-1</td><td align="center">-1≤X＜1</td></tr></tbody></table><p>考点：</p><blockquote><p>n表示：我有几个bit的二进制数，就是多少位二进制数 一直讲的都是用8个二进制来表示一位，那么这里的n就等于8，如果把n&#x3D;8代入补码中，取值范围是 <code>-128~127</code>，如果是原码或反码：<code>-127~127</code></p></blockquote><p><img src="/%E8%BF%9B%E5%88%B6%E4%B9%A0%E9%A2%98.jpg"></p><p>答案是B和D</p><h3 id="二、逻辑运算"><a href="#二、逻辑运算" class="headerlink" title="二、逻辑运算"></a>二、逻辑运算</h3><blockquote><p>逻辑“或”运算</p><ul><li><code>0+0=0,0v0=0</code></li><li><code>0+1=1,0v1=1</code></li><li><code>1+0=1,1v0=1</code></li><li><code>1+1=1,1v1=1</code></li></ul><p>逻辑“与”运算</p><ul><li><code>0x0=0,0∧0=0,0.0=0</code></li><li><code>0x1=0,0∧1=0,0.1=0</code></li><li><code>1x0=0,1∧0=0,1.0=0</code></li><li><code>1x1=1,1∧1=1,1.1=1</code></li></ul><p>逻辑“非”运算(<u><strong>取反&#x3D;&#x3D;,上面一条&#x3D;&#x3D;斜线</strong></u>)</p><p>逻辑“异或”运算(相同为0,不同为1)</p><ul><li><code>0⊕0=0</code></li><li><code>0⊕1=1</code></li><li><code>1⊕0=1</code></li><li><code>1⊕1=0</code></li></ul></blockquote><p><img src="/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E4%B9%A0%E9%A2%98.jpg" alt="逻辑运算习题"></p><blockquote><p>结题思路：第一题，直接代入，第二题看到 -128的编码 直接选补码（在这里ASCII码没有任何关系，是干扰）</p></blockquote><h3 id="三、计算机结构"><a href="#三、计算机结构" class="headerlink" title="三、计算机结构"></a>三、计算机结构</h3><p>我们通过输入设备，把数据输入到主机。主机处理完后再讲结构传输到输出设备。</p><p>主机有**<u>CPU和内存</u><strong>。CPU的工作在于<u><strong>管理与运算</strong></u>。管理与运算的数据从哪里来呢？从内存里来的。而</strong><u>内存里面的数据则是从输入设备传来的</u>**。</p><p><u><strong>冯诺依曼体系结构</strong></u>：</p><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="计算机结构图"></p><blockquote><p><u><strong>CPU</strong></u>内又有2个主要单元：运算器和控制器。（中央处理器）</p><p><u><strong>运算器</strong></u>**<u>负责程序运算与逻辑判断等操作</u>**。</p><p><u><strong>控制器</strong></u>**<u>负责协调各周边组件与各单元间的工作</u>**。</p></blockquote><p><img src="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E4%B8%BB%E6%9C%BA%E7%BB%93%E6%9E%84%E5%9B%BE.jpg" alt="计算机主机结构图"></p><blockquote><p>控制器</p><ul><li><u><strong>程序计数器PC</strong></u>（也称为指令计数器，里面存放的是**<u>指令的地址</u>**，每取出一个地址 计算器就+1）</li><li><u><strong>指令寄存器IR</strong></u></li><li><u><strong>指令译码器</strong></u></li><li>时序部分</li></ul><p>运算器</p><ul><li><u><strong>算术逻辑单元ALU</strong></u>（重要，通过算术单元来进行算术运算和逻辑运算）</li><li><u><strong>累加寄存器</strong></u>（重要，也称为累加器，**<u>暂时存放中间的结构</u>**）</li><li>数据缓冲寄存器（CPU与主存交互时暂时存放的地方）</li><li>状态条件寄存器（存储状态信息，比方说溢出）</li></ul></blockquote><p>考试：</p><ul><li>控制器或运算器里包含了那些部件，这些部件所表示的含义（比如：以下哪一个不是运算器中的组件？）</li><li>运算器与控制器是什么   </li><li></li></ul><h3 id="四、寻址方式"><a href="#四、寻址方式" class="headerlink" title="四、寻址方式"></a>四、寻址方式</h3><p><img src="/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F.jpg" alt="寻址方式"></p><ul><li><u><strong>操作码</strong></u>是 要进行什么操作</li><li><u><strong>地址码</strong></u>是 存储的操作对象</li></ul><blockquote><ul><li>立即寻址：**<u>操作数直接在指令中，速度快，灵活性差</u>**</li><li>直接寻址：**<u>指令中存放的是操作数的地址</u>**</li><li>间接寻址：**<u>指令中存放了一个地址，这个地址对应的内容是操作数的地址</u>**。</li><li>寄存器寻址方式：**<u>寄存器存放操作数</u>**。</li><li>寄存器间接寻址方式：**<u>寄存器内 存放的是操作数的地址</u>**。操作地址在寄存器（内存），操作数存放在主存里面</li></ul></blockquote><p><img src="/%E5%AF%BB%E5%9D%80%E6%96%B9%E5%BC%8F%E4%B9%A0%E9%A2%98.jpg" alt="寻址方式习题"></p><h3 id="五、Flynn弗林分类"><a href="#五、Flynn弗林分类" class="headerlink" title="五、Flynn弗林分类"></a>五、Flynn弗林分类</h3><blockquote><p>在计算机体系结构中分类方式有很多种，最著名的一种就是弗林分类，在Flynn中分成了四中体系结构</p></blockquote><table><thead><tr><th align="center">体系结构类型</th><th align="center">结构</th><th>关键特性</th><th>代表</th></tr></thead><tbody><tr><td align="center">单指令流单数据流<br />SISD</td><td align="center">控制部分：一个<br />处理器：一个<br />主存模板：一个</td><td></td><td>单处理器系统</td></tr><tr><td align="center">单指令流多数据流<br />MISD</td><td align="center">控制部分：一个<br />处理器：多个<br />主存模板：多个</td><td>各处理器以异步的形式执行同一条指令</td><td>并行处理机<br />阵列处理机<br />超级向量处理机</td></tr><tr><td align="center"><u>**多指令流单数据流&#x3D;&#x3D;<br />MISD</td><td align="center">控制部分：多个<br />处理器：一个<br />主存模板：多个</td><td>&#x3D;&#x3D;被证明不可能，至少是不实际**</u></td><td>目前没有，有文献称流水线计算机为此类</td></tr><tr><td align="center">多指令流多数据流<br />MIMD</td><td align="center">控制部分：多个<br />处理器：多个<br />主存模板：多个</td><td>能够实现作业、任务、指令等各级全面并行</td><td>多处理机系统<br />多计算机，目前主流</td></tr></tbody></table><p>考法：以下分类中，被证明是不可能的，不实践的是哪一个？（写的不是汉语，是英语MISD）</p><h3 id="六、流水线"><a href="#六、流水线" class="headerlink" title="六、流水线"></a>六、流水线</h3><p><img src="/%E6%B5%81%E6%B0%B4%E7%BA%BF1.jpg" alt="流水线1"></p><p><img src="/%E6%B5%81%E6%B0%B4%E7%BA%BF2.jpg" alt="流水线2"></p><blockquote><p>流水线执行时间是全部的时间，t1是取值时间，t2是分析时间，t3是执行时间，<u><strong>流水线周期</strong></u>是**<u>执行最长的单个时间</u>**（t）</p></blockquote><p><img src="/%E6%B5%81%E6%B0%B4%E7%BA%BF%E4%BE%8B%E9%A2%98.jpg" alt="流水线例题"></p><h3 id="七、多级存储器结构"><a href="#七、多级存储器结构" class="headerlink" title="七、多级存储器结构"></a>七、多级存储器结构</h3><blockquote><p>三个性能指标参数：</p><ol><li>容量：能不能支持应用的一些操作</li><li>速度：速度能不能匹配的上CPU，以及输入输出</li><li>价格：比较合理</li></ol></blockquote><p><img src="/%E5%A4%9A%E7%BA%A7%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.jpg" alt="多级存储结构"></p><blockquote><p>高速缓冲Cache中存放的是CPU要经常读取的主存中的数据</p><p>RAM</p><ul><li>动态随机存储器 DRAM，动态需要时刻的刷新电路才能保持数据，PC机待机中，大部分电都是在这个上面损耗掉了，在<u><strong>主存</strong></u>里面</li><li>静态随机存储器 SRAM，静态不需要刷新电路就能保存数据，在<u><strong>高速缓存</strong></u>里面</li></ul></blockquote><p><img src="/%E5%A4%9A%E7%BA%A7%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%841.jpg" alt="多级存储结构1.jpg"></p><blockquote><ul><li>顺序存储是以时间顺序来进行存储，按照时间来进行读取</li><li>直接存储：外存，</li><li>随机存储：内存，当前正在工作的一些数据，断电后地址会刷新</li></ul></blockquote><p>例题：以下那种设备使用到了 相联存储，相联存储器 or Cache</p><p><img src="/%E5%A4%9A%E7%BA%A7%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%98.jpg" alt="多级存储结构习题"></p><p><img src="/%E5%A4%9A%E7%BA%A7%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84%E4%B9%A0%E9%A2%981.jpg" alt="多级存储结构习题"></p><h3 id="八、主存"><a href="#八、主存" class="headerlink" title="八、主存"></a>八、主存</h3><p>一个字等于一个以上的字节，一个字可以表示一个或多个字节</p><blockquote><p>汉字两个字节表示</p><p>英文的ABCD用一个字节表示</p><p>内存地址一般使用16进制来表示，H结尾是十六进制</p><p>多少个地址块：&#x3D;通过大数-小数 + 1</p></blockquote><p><img src="/%E4%B8%BB%E5%AD%98.jpg" alt="主存"></p><p>习题每做</p><h3 id="九、磁盘存储（了解）"><a href="#九、磁盘存储（了解）" class="headerlink" title="九、磁盘存储（了解）"></a>九、磁盘存储（了解）</h3><p>硬盘</p><p><img src="D:\笔记\网络管理员\通信技术\磁盘存储.jpg" alt="磁盘存储"></p><p>性能指标</p><ul><li><p>时间</p></li><li><p>容量</p></li><li><p>速率</p><p><img src="D:\笔记\网络管理员\通信技术\磁盘存储习题.jpg" alt="磁盘存储习题"></p></li></ul><p>C、D</p>]]></content>
      
      
      <categories>
          
          <category> 网络管理员 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语词性</title>
      <link href="/2024/09/17/%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7/"/>
      <url>/2024/09/17/%E8%8B%B1%E8%AF%AD%E8%AF%8D%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="英语词性"><a href="#英语词性" class="headerlink" title="英语词性"></a>英语词性</h1><p>10种英语词性说明</p><blockquote><ol><li>名词(.n)</li><li>代词(pron.)</li><li>冠词(art.)</li><li>数词(num.)</li><li>形容词(adj.)</li><li>副词(adv.)</li><li>动词(v.)</li><li>连词(conj.)</li><li>介词(prep.)</li><li>感叹词(int.)</li></ol></blockquote><p>特殊词性</p><blockquote><ul><li>及物动词(vt.)</li><li>不及物动词(vi.)</li></ul></blockquote><h2 id="10种英语词性说明"><a href="#10种英语词性说明" class="headerlink" title="10种英语词性说明"></a>10种英语词性说明</h2><ul><li>英语词性有10种,另外2种是特殊词性 分别是及物、不及物</li></ul><ol><li><code>名词(.n)</code>：Nouns 表示人或事物的名称 box，pen，tree，apple</li><li><code>代词(pron.)</code>：Pronoun 代替名词、数词、形容词We，this，them，myself</li><li><code>形容词(adj.)</code>：Adjective 用来修饰名词，表示人或事物的特征 Good，sad，high，short</li><li><code>数词(num.)</code>：Numeral 表示数目或顺序 one，two，first</li><li><code>动词(v.)</code>：Verb 表示动作或状态Jump，sing，visit</li><li><code>副词(adv.)</code>：Adverb 修饰动、形、副等词，表示动作特征 there，widely，subbenly</li><li><code>冠词(art.)</code>：Article 用在名词前面，帮助说明名词所指的范围 a，an，the</li><li><code>介词(prep.)</code>：Preposition 用在名词或代词前，说明它们与别的词的关系 in，on，down，up</li><li><code>连词(conj.)</code>：Conjunction 表示人或事物的名称 if，because，but</li><li><code>感叹词(int.)</code>：Interjection 代替名词、数词、形容词等 Oh，hello，hi，yeah</li></ol><ul><li>特殊词性<ul><li><code>及物动词(vt.)</code>：vt. 后必须跟宾语 sing a song</li><li><code>不及物动词(vi.)</code>：vi. 后不直接带宾语或不带宾语</li></ul></li></ul><h2 id="10种词性详细讲解"><a href="#10种词性详细讲解" class="headerlink" title="10种词性详细讲解"></a>10种词性详细讲解</h2><h4 id="1、名词-n"><a href="#1、名词-n" class="headerlink" title="1、名词(n.)"></a>1、名词(n.)</h4><p><code>名词(Nouns)</code>是词性的一种，也是实词的一种，是指待人、物、事、时、地、情感、概念等实体或抽象事物的词。名词可以独立成句。在短语或句子中通常可以用代词来替代。名词可以分为专有名词(Proper Nouns)和普通名词 (Common Nouns)，专有名词是某个(些)人，地方，机构等专有的名称，如Beijing，China等。普通名词是一类人或东西或是一个抽象概念的名词，如：book，sadness等。</p><blockquote><ul><li>专有名词：某个(些)人，地方，机构等专有的名称，如<code>Beijing，China</code>等。</li><li>普通名词：一类人或东西或是一个抽象概念的名词，如：<code>book，sadness</code>等。</li><li>个体名词：表示单个的人和事物。<code>horse 、car、room、apple、fan、picture</code>。</li><li>集体名词：表示一群人或一些事物的名称。<code>People、family、army、government、group</code>。</li><li>物质名词：表示物质或不具备确定形状和大小的个体的物质。<code>Fire、steel、air、water、milk</code>。</li><li>抽象名词：表示动作,状态,品质或其他抽象概念。<code>Labour、health、life、friendship、patience</code>。</li><li>可数名词：可数名词有单,复数之分,表示一个或多个。<code>a book、two books</code>。</li><li>不可数名词：不分单,复数;抽象名词, 物质名词和专有名词一般是不可数名词。<code>Sand、 sugar</code>。</li></ul></blockquote><p>**<u>名词所有格</u>**：</p><blockquote><ol><li><p>表示有生命的东西的名词及某些表示时间、距离、星球、世界、国家等无生命的东西的名词后加’s来表示所有关系，叫做名词所有格。<code>men’s room</code>。</p><p>但如果该名词是以-s或-es接尾，则只在该名词后加“’”来构成所有格。<code>five minutes’ walk</code>。</p></li><li><p>用名词所有格表示处所。<code>a doctor’s、my sister’s</code>。</p></li></ol></blockquote><p>**<u>名词所有格用来表示所有关系</u>**，一般用<code>’s和of</code>来表示名词的所有格。与所有格相对，不带’s词尾的是名词普通格。在学习名词所有格时，要掌握以下内容。</p><blockquote><ol><li><p>‘s 所有格的用法：</p><p>单数名词和不以-s结尾的复数名词在词尾加’s(以s结尾的只需加“’”)构成所有格，主要用于有生命的东西。但也可用于表示时间、城市、地域、团体、机构等非生命的事物。在某些习惯用语中，尽管是表示无生命的名词，也需要’s的所有格。</p><p><code>Have you read Robert Browning&#39;s poems?</code></p><p>你读过罗伯特·勃朗宁的诗吗？</p></li><li><p>of 所有格的用法</p><p>凡不能加’s的名词，都可以与of构成短语，来表示所有关系。如果名词后面有一个较长定语，尽管名词表示有生命的东西，也可以用这种所有格形式。<br><code>Does anyone know the title of the novel?</code></p><p>有谁知道小说的标题</p></li></ol></blockquote><p>双重所有格：</p><p>指名词所有格或名词性物主代词同of构成的所有格，即“of+名词所有格”。</p><blockquote><ul><li><p>“of+名词所有格”中的名词必须表示人，不能表示事物。<br><code>a friend of my wife’s</code></p></li><li><p>除了修饰的原因外，用双重所有格主要是由于被修饰词有排他性的限定词(determiner)，如冠词、某些不定代词、指示代词、疑问代词、数词等。<br><code>many books of theirs</code></p></li><li><p>注意区别下列四种表达方式含义的差别：<br><code>one of my brother’s friends</code>(明确表示我兄弟有一个以上的朋友)</p><p><code>a friend of my brother’s</code>(暗示我兄弟有一个以上的朋友)<br><code>a friend of my brother</code>(对我兄弟有好感的人)<br><code>my brother’s friend</code>(我兄弟唯一的一个朋友或刚谈及的那一个朋友)</p></li><li><p>特殊所有格：若一样东西为两人共有，则后一个人名用所有格;如果不是两人共有，而是各有各的，则两个名词都用所有格，且其后名词应为复数。<br><code>The woman dressed in blue is Mary and Alice’s mother.</code>那个穿蓝衣服的妇女是玛丽和爱丽丝的母亲。<br><code>You should find what the difference between Mr.Smith’s and Mr.Black’s cars is.</code>你应当发现史密斯先生与布莱克先生的汽车的不同之处。</p></li></ul></blockquote><h4 id="2、代词-pron"><a href="#2、代词-pron" class="headerlink" title="2、代词(pron.)"></a>2、代词(pron.)</h4><ul><li><p>代词pronoun简称pron是代替名词的一种词类。大多数代词具有名词和形容词的功能。英语中的代词，按其意义、特征及在句中的作用分为一下九种：</p><blockquote><ol><li>人称代词</li><li>物主代词</li><li>指示代词</li><li>反身代词</li><li>相互代词</li><li>疑问代词</li><li>关系代词</li><li>连接代词</li><li>不定代词</li></ol></blockquote></li></ul><p>人称代词的用法</p><p><code>I saw her with them, at least, I thought it was her.</code></p><p>我看到她和他们在一起，至少我认为是她。（her做宾语，them做介词宾语，her作主补）</p><ul><li>a. – <code>Who broke the vase？</code>–谁打碎了花瓶？</li><li>b. – <code>Me.</code>–我。（me作主语补语&#x3D; It’s me.）</li></ul><p>并列人称代词的排列顺序</p><ul><li><ol><li><p>单数人称代词并列作主语时，其顺序为：<br><code>第二人称 －&gt; 第三人称 －&gt; 第一人称</code></p><p><code>you －&gt; he/she； it -&gt; I</code></p></li><li><p>复数人称代词作主语时，其顺序为：</p><p><code>第一人称 －&gt; 第二人称 －&gt; 第三人称</code></p><p><code>we－&gt;you －&gt;They</code></p></li></ol></li></ul><p>反身代词</p><table><thead><tr><th>I</th><th>you</th><th>you</th><th>she</th><th>he</th></tr></thead><tbody><tr><td>myself</td><td>yourself</td><td>yourselves</td><td>herself</td><td>himself</td></tr></tbody></table><table><thead><tr><th>we</th><th>they</th><th>it</th><th>one</th></tr></thead><tbody><tr><td>ourselves</td><td>themselves</td><td>itself</td><td>oneself</td></tr></tbody></table><ul><li><p>指示代词</p><p>指示代词分单数（this &#x2F; that）和复数（these &#x2F; those）两种形式，既可作限定词又可做代词，</p></li><li><p>疑问代词</p><p>指人： who， whom， whose指物： what既可指人又可指物： which</p></li><li><p>代词比较辩异one， that和it</p><p>one表示泛指，that和it 表示特指。that与所指名词为同类，但不是同一个，而it 与所指名词为同一个。</p><p><code>I can‘t find my hat. I think I must buy one</code>.(不定)</p><p><code>The hat you bought is bigger than that I bought.</code>(同类但不同个)</p><p><code>I can’t find my hat. I don‘ t know where I put it.</code>( 同一物)</p></li></ul><h4 id="3、冠词-art"><a href="#3、冠词-art" class="headerlink" title="3、冠词(art.)"></a>3、冠词(art.)</h4><ul><li><p>冠词是印欧语系和闪含语系的诸语中，位于名词或名词词组之前或之后，在句子里主要是对名词起限定作用的词。冠词是一种虚词。</p></li><li><p>不定冠词a (an)与数词one 同源，是“一个”的意思。</p></li><li><p>定冠词的用法</p><blockquote><p>定冠词the 与指示代词this，that同源，有“那（这）个”的意思</p><ol><li><p>特质双方都明白的人或物：<code>Take the medicine.</code> 把药吃了</p></li><li><p>上文提到过的人或事：<code>He bought a house. I&#39;ve been to the house.</code></p></li><li><p>指世上第一无二的事物：<code>the sun,the sky,the moon,the earth</code></p></li><li><p>单数名词连用表示一类事物，比如：<code>the dollar</code> 美元；<code>the fox</code> 狐狸；或与形容词或分词连用，表示一类人：<code>the rich</code> 富人，<code>the living</code> 生者</p></li><li><p>用在序数词和形容词最高级，及形容词only，very，same等前面：</p><p><code>Where do you live? I live on the second floor</code> 你住在哪？我住在二层。</p></li><li><p>与复数名词连用，指整个群体：</p><p><code>They are the teachers of this school.</code>(指全体教师)</p><p><code>They are teachers of this school</code> (指部分教师)</p></li><li><p>表示所有，相当于物主代词，用在表示身体部位的名词前：</p><p><code>She caught me by the arm.</code>她抓住了我的手臂。</p></li><li><p>用在某些由普通名词构成的国际名称、机关团体、阶级、等专有名词前：</p><p><code>The People&#39;s Republic of China</code> 中华人民共和国</p></li><li><p>用在表示乐器的名词之前：<code>She plays the piano.</code> 她会弹钢琴。</p></li><li><p>用在姓氏的复数名词之前，表示一家人：<code>The Greens</code> 格林一家人（或格林夫妇）</p></li><li><p>用在惯用语中：</p><p><code>in the day, in the morning (afternoon, evening), the day after tomorrow, the day before yesterday, the next morning, in the sky(water,field,country) in the dark, in the rain, in the distance, in the middle (of), in the end, on the whole, by the way, go to the theatre</code></p></li></ol></blockquote></li><li><p>零冠词的用法</p><p>冠词与形容词+名词结构</p><ul><li><p>两个形容词都有冠词，表示两个不同的东西</p><p><code>He raises a black and a white cat</code> </p><p>他养了一只黑猫和一只白猫。</p></li><li><p>如果后面没有冠词，则指一物</p><p><code>He raises a black and white cat</code> </p><p>他养了一只花猫。</p></li></ul></li><li><p>冠词位置</p></li></ul><blockquote><ol><li><p>不定冠词位置（a，an），不定冠词常位于名词或名词修饰语前。注意：</p><ul><li>位于下列形容词之后：<code>such, what, many, half, such an animal; May a man</code></li><li>当名词前的形容词被副词 <code>as, so, too, how, however, enough</code> 修饰时，不定冠词应放在形容词之后： <code>It is as pleasant a day as I have ever spent.</code></li><li>quite，rather与单数名词连用，冠词放在其后。<br>但当rather，quite 前仍有形容词，不定冠词放其前后均可。如：quite a lot</li><li>在as，though 引导的让步状语从句中，当标语为形容词修饰的名词时，不定冠词放形容词后： <code>Brave a man though he is，he trembles at the sight of snakes.</code><br>当名词被比较级形容词修饰时，不定冠词通常置于比较级形容词之后。</li></ul></li><li><p>定冠词位置（the），通常位于名词或名词修饰语前，但放在 <code>all, both, double, half, twice, three times</code> 等词之后，名词之前。</p><p><code>All the students in the class went out.</code></p><p>班里的所有学生都出去了</p></li></ol></blockquote><h4 id="4、数词-num"><a href="#4、数词-num" class="headerlink" title="4、数词(num.)"></a>4、数词(num.)</h4><ul><li>表示数目多少的数词交基数词；表示顺序的数词叫序数词。</li></ul><p>数词的用法</p><blockquote><ol><li><p>倍数表示法</p><ul><li><p>主语+谓语+倍数（或分数）+ as + adj. + as</p><p><code>I have three times as many as you.</code> 我有你三倍那么多。</p></li><li><p>主语+谓语+倍数（分数）+ the size (amount , length …) of …</p><p><code>The earth is 49 time the size of the moon.</code> 地球是月球的49倍。</p></li><li><p>主语+谓语+倍数（分数）+ 形容词（副词）比较级+ than…<br><code>The grain output is 8 percent higher this year than that of last year.</code> 今年粮食产量比去年高出 8%。</p></li><li><p>还可以用by+倍数，表示增加多少倍<br><code>The production of grain has been increased by four times this year.</code> 今年粮食产量增加了四倍。</p></li></ul></li><li><p>分数表示法</p><p>构成：基数词代表分子，序数词代表分母。分子大于1时，分子的序数词用单数，分母序数词用复数：<code>1/3 one-third ； 3/37 three and three-sevenths</code></p></li></ol></blockquote><h4 id="5、形容词-adj"><a href="#5、形容词-adj" class="headerlink" title="5、形容词(adj.)"></a>5、形容词(adj.)</h4><ul><li><p>形容词(adjective)，简称adj.或a.，很多语言中均有的主要词类中的一种。主要用来修饰名词的词，表示事物的特征。形容词用来修饰名词或代词，表示人或事物的性质、状态，和特征的程度好坏，与否。</p></li><li><p>形容词作定语修饰名词时，要放在名词的前边。但是如果形容词修饰以-thing为字尾的词语时，要放在这些词之后，例如：<code>something nice</code><br>以<code>-ly</code>结尾的形容词</p><blockquote><ol><li><p><code>friendly, deadly, lovely, lonely, likely, lively, ugly brotherly</code>,仍为形容词</p></li><li><p>有些以 -ly 结尾即为形容词，也为副词。</p><p><code>daily, weekly, monthly, yearly, early The Times is a daily paper. The Times is published daily.</code></p></li></ol></blockquote></li><li><p>用形容词表示类别和整体</p><blockquote><ul><li><p>某些形容词加上定冠词可以泛指一类人，与谓语动词的复数连接。</p><p>如：<code>the dead，the living，the rich，the poor，the blind，the hungry</code></p></li><li><p>多个形容词修饰名词的顺序<br>限定词–数词–描绘词–(大小，长短，形状，新旧，颜色) –出处–材料性质，类别–名词</p><p><code>a small round table；a tall gray building；a dirty old brown shirt；a famous German medical school</code></p></li></ul></blockquote></li></ul><h4 id="6、副词-adv"><a href="#6、副词-adv" class="headerlink" title="6、副词(adv.)"></a>6、副词(adv.)</h4><p><code>副词</code>（adverb，简写为adv）是**<u>一种用来修饰动词、形容词、全句的词，说明时间、地点、程度、方式等概念的词</u>**。副词是一种半虚半实的词。副词可分为：地点副词、方式副词、程度副词、疑问副词和连接副词。</p><blockquote><ul><li><p>副词的排列顺序：</p><p>时间、地点副词、小单位的在前面，大单位在后面。</p></li><li><p>注意：副词enough要放在形容词的后面，形容词enough放在名词前后都可。</p><p><code>I don&#39;t know him well enough. </code></p><p><code>There is enough food for everyone to eat. </code></p><p><code>There is food enough for everyone to eat.</code></p></li><li><p>兼有两种形式的副词</p><ol><li><p>close 与 closely</p><p>close 意思是“近”； closely 意思是“仔细地”</p><p><code>He is sitting close to me.</code> 他坐在我旁边</p><p><code>Watch him closely.</code> 密切关注他</p></li><li><p>late 与 lately </p><p>late 意思是“晚”， lately 意思是“最近”</p><p><code>You have come too late.</code> 你来得太晚了。</p><p><code>What have you been doing lately? </code>你最近在做什么</p></li></ol></li></ul></blockquote><h4 id="7、动词-v"><a href="#7、动词-v" class="headerlink" title="7、动词(v.)"></a>7、动词(v.)</h4><ul><li><p>动词根据其后是否带有宾语，可分为两类，分别是：及<code>物动词（Transitive Verb）</code>、<code>不及物动词（Intransitive Verb）</code>，缩写形式分别为<code>vt.</code> 和<code>vi.</code>。</p></li><li><p>在英语中按动词后可否直接跟宾语，可以把动词分成两种：及物动词与不及物动词。 及物动词 vt. 字典里词后标有vi. 的就是不及物动词。**<u>不及物动词后不能直接跟有动作的对象（即宾语）</u><strong>。若要跟宾语，必须先在其后添加上某个介词，如to，of ，at后方可跟上宾语。 及物动词： 又称“他动词”。又称“外动词”。动词的一种。它所表示的动作常涉及动作者以外的事物，如“吃”、“穿”、“读”、“写”等。字典里词后标有vt. 的就是及物动词。</strong><u>及物动词后必须跟有动作的对象（即宾语）</u>**，并且可直接跟宾语。</p></li><li><p>不及物动词：字典里词后标有vi. 的就是不及物动词。不及物动词后不能直接跟有动作的对象（即宾语）。若要跟宾语，必须先在其后添加上某个介词，如to，of ，at后方可跟上宾语。具体每个动词后究竟加什么介词就得联系动词短语了</p></li><li><p>系动词</p><blockquote><ol><li>状态系统词：用来表示主语状态，只有be一词，例如： <code>He is a teacher.</code></li><li>维持系动词：用来表示主语继续或保持一种状态，主要有 <code>keep， rest， remain，stay，lie，stand</code>，例如：<code>He always kept silent at meeting.</code> 他开会时总是保持沉默。</li><li>表像系动词：用来表示“看起来像”这一概念，主要有<code>seem， appear， look</code>， 例如：<br><code>He looks tired.</code>他看起来很累。</li><li>感官系动词：感官系动词主要有<code>feel， smell， sound， taste</code>， 例如：<br><code>This kind of cloth feels very soft. This flower smells very sweet.</code></li><li>变化系动词：这些系动词表示主语变成什么样，变化系动词有<code>become， grow， turn， fall， get， go， come， run. </code>例如：<code>He became mad after that.</code>自那之后，他疯了。</li><li>终止系动词：表示主语已终止动作，主要有prove， turn out， 表达“证实”，“变成”之意，例如：<code>The search proved difficult.</code>搜查证实很难。</li></ol></blockquote></li></ul><h4 id="8、连词-conj"><a href="#8、连词-conj" class="headerlink" title="8、连词(conj.)"></a>8、连词(conj.)</h4><ul><li><p>连词是一种虚词， 它不能独立担任句子成分而只起连接词与词，短语与短语以及句与句的作用。连词主要可分为两类：并列连词和从属连词。并列连词用来连接平行的词、词组和分句。如：<code>and， but， or， nor， so， therefore， yet， however， for， hence， as well as， both…and， not only…but also， either…or， neither…nor， (and)then</code>等等。</p></li><li><p><code>not...but...</code>意思是“不是….而是….” not 和 but 后面的用词要遵循一致原则。</p><p><code>They were not the bones of an animal, but （the bones） of a human being.</code></p></li><li><p>比较so和such</p></li><li><p>其规律有so与such的不同词性决定。such是形容词，修饰名词或名词词组，so是副词，只能修饰形容词或副词。 so 还可与表示数量的形容词many，few，much，little连用，形成固定搭配。</p><ul><li><p><code>so + adj. such + a(n) + n.</code></p></li><li><p><code>so + adj. + a(n) + n. such + n. (pl.)</code></p></li><li><p><code>so + adj. + n. (pl.) such +n. (pl.)</code></p></li><li><p><code>so + adj. + n. [不可数] such +n. [不可数]</code></p><p><code>so foolish ；such a fool so nice a flower；such a nice flower so many/ few flowers；such nice flowers so much/little money；such rapid progress so many people ；such a lot of people</code></p></li></ul></li></ul><h4 id="9、介词-prep"><a href="#9、介词-prep" class="headerlink" title="9、介词(prep.)"></a>9、介词(prep.)</h4><ul><li><p>介词是一种用来表示词与词、词与句之间的关系的虚词，在句中不能单独作句子成分。介词后面一般有名词代词或相当于名词的其他词类，短语或从句作它的宾语。介词和它的宾语构成介词词组，在句中作状语，表语，补语或介词宾语。介词可以分为时间介词、地点介词、方式介词、原因介词和其他介词，</p></li><li><p>概念：</p><ul><li>1）介词（是prepositions，简称prep)，又称前置词，是英语中最活跃的词类之一，**<u>连接主语和表语</u>**。特别是一些常用介词的搭配力特别强，可以用来表示各种不同的意思。英语里大部分习语都是由介词和其他词构成的。介词在句中一般不重读。在定语从句“<code>介词+who/which</code>”的结构中，不能用<code>that</code> 代替<code>who/which</code>。<code>She is a good student from who we should learn.</code></li><li>2）介词的种类 介词分简单介词和短语介词两种，简单介词及单个介词，如 <code>in ，under ，on ，for ，after</code> ，等，短语介词指多个单词构成的介词，如<code>in front of ，out of ，instead of ，far from ，apart from</code> 等。</li></ul></li></ul><h4 id="10、感叹词-int"><a href="#10、感叹词-int" class="headerlink" title="10、感叹词(int.)"></a>10、感叹词(int.)</h4><blockquote><p>感叹句一般是用来表示说话时的喜悦、惊讶等情感。英语感叹句常用”what”和”how”导，”what”和”how”与所修饰的词置于句首，其它部分用陈述句语序。</p></blockquote><p>一、 由”what”引导的感叹句：”what”意为”多么”用作定语，修饰名词（被强调部分），单数可数名词前要加不定冠词a&#x2F;an,复数可数名词或不可数名词前不用冠词。这类句子的结构形式是：<code>what+(a/an)+adj.+n.+主语+谓语+(it is).</code></p><blockquote><ol><li><p><code>What a clever girl she is!</code></p><p>多么聪明的姑娘呀！</p></li><li><p><code>What an interesting story it is!</code></p><p>多么有趣的故事呀！</p></li><li><p><code>What good children they are!</code></p><p>他们是多么好的孩子呀！</p></li><li><p><code>What beautiful flowers they are!</code></p><p>多么漂亮的花呀！</p></li><li><p><code>What delivious food it is!</code></p><p>多么有味道的食物呀！</p></li><li><p><code>What heavy snow it is!</code></p><p>多么大的雪呀！</p></li></ol></blockquote><p>二、由“how”引导的感叹句：“how”意思为“多么”，用于状语，修饰形容词或副词（被强调部分）。如果修饰形容词，则句子中的谓语动词用系动词；如果how修饰的副词，则句子中的谓语动词用行为动词，这类句子的结构形式似乎：<code>How adj.(adv.) + 主语 + 谓语 + (it is).</code></p><blockquote><ol><li><p><code>How cold it is today!</code></p><p>今天多么冷呀！</p></li><li><p><code>How nice the pictures are!</code></p><p>多么漂亮的图画呀！</p></li><li><p><code>How happy they look!</code></p><p>他们显得多么开心呀！</p></li><li><p><code>How well she sings!</code></p><p>她唱的多好呀！</p></li><li><p><code>How hard they are working now!</code></p><p>他们干得多么起劲呀！</p></li></ol></blockquote><p>三、在表示同一意义时，英语感叹既可用”what”引导，也可用”how”引导。如：</p><blockquote><ol><li><p><code>What a hot day it is!</code> \ <code>How hot the day is!</code></p><p>多么热的天气呀！</p></li><li><p><code>What tall buildings they are!</code> \ <code>How tall the buildings are!</code></p><p>多么高的楼房呀！</p></li><li><p><code>What bad weather it is!</code> \ <code>How bad the weather is!</code></p><p>多么糟糕的天气呀！</p></li><li><p><code>What bright sunshine it is!</code>\ <code>How bright the sunshine is!</code></p><p>多么明亮的阳光呀！</p></li></ol></blockquote><p>四、感叹句在表示激动强烈的感情时，口语中常常采用省略句，其后面的主语和谓语往往略去不讲。</p><blockquote><ol><li><code>What a fine day!</code><br>多么晴朗的天呀！</li><li><code>What an honest boy!</code><br>多么诚实的孩子呀！</li><li><code>What red apples!</code><br>多么红的苹果呀！</li><li><code> How cool!</code><br>好凉快呀！</li><li><code>How wonderful!</code><br>精彩极了！</li></ol></blockquote><h3 id="特殊词性"><a href="#特殊词性" class="headerlink" title="特殊词性"></a>特殊词性</h3><h4 id="及物动词-vt"><a href="#及物动词-vt" class="headerlink" title="及物动词(vt.)"></a>及物动词(vt.)</h4><ul><li><p>及物动词(用<code>vt.</code>表示)，就是必须加宾语意思才完整的动词。</p></li><li><p>及物动词是动词的一种，它所表示的动作常涉及动作者以外的事物，如“吃”、“穿”、“读”、“写”等。字典里词后标有vt. 的就是及物动词。及物动词后必须跟有动作的对象（即宾语），并且可直接跟宾语。</p></li><li><p>及物动词<code>verb transitive（vt.）</code>所谓“及物”，就是后面可直接加宾语的动词，有被动形式；而不及物动词是没有被动式的，不可直接加宾语，需加上介词,</p><p>如<code>see 看见 (vt.) +宾语I can see a boy</code>。</p></li><li><p>及物动词后面可直接加宾语，而不及物动词后面不可直接加宾语，一般要先加介词后再接宾语。</p></li><li><p>实际上很多动词既是及物动词，又是不及物动词。举一个例子，就说write：如<code>I am writing</code>。和<code>I am writing a letter.</code>前一个句子中write是不及物动词，后一个句子中write是及物动词。</p></li></ul><h4 id="不及物动词-vi"><a href="#不及物动词-vi" class="headerlink" title="不及物动词(vi.)"></a>不及物动词(vi.)</h4><ul><li>不及物动词（用vi.表示），就是不必加宾语意思就完整的动词。</li><li>及物动词指可以接名词·代词·动名词做宾语的动词。如∶<code>buy,catch,invent,like,offer,reach,show,suppose,see</code>等等。</li><li>举两个例子：“give”，I will give…，give的是什么呢，这不完整，就说明give是及物动词，必须加宾语，可以说<code>I will give you a book</code>。</li><li>这个give就是及物动词。再举一例，“listen”——I am listening，意思完整，不用加宾语意思就完整，这个词就是不及物动词，但不是说不及物动词后面不能加宾语，而是加的时候一定要先加一个介词，如<code>listen to me</code>。</li></ul><p>原文链接：<a href="https://blog.csdn.net/cuichongxin/article/details/101695030">https://blog.csdn.net/cuichongxin/article/details/101695030</a></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-theme-diaspora</title>
      <link href="/2024/08/20/Hexo%E4%B8%BB%E9%A2%98/"/>
      <url>/2024/08/20/Hexo%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-theme-diaspora"><a href="#Hexo-theme-diaspora" class="headerlink" title="Hexo-theme-diaspora"></a>Hexo-theme-diaspora</h1><p><strong><a href="https://bestflyteng.github.io/">在线预览 | PREVIEW </a></strong></p><p>一款基于WP移植的Hexo主题，适合喜欢摄影，影评，乐评和玩弄文字的你，干净，清新； 响应式，Ajax，更多好玩的等你来发现。 </p><blockquote><p>再次感谢原作者创作出这么精美的主题 <a href="https://github.com/LoeiFy/Diaspora">@Loeify</a> 。如果你喜欢，请捐助原作者。</p></blockquote><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@gitee.com:Ljj1392036546_admin/hexo-theme-diaspora.git</span><br></pre></td></tr></table></figure><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改Hexo配置文件 <code>_config.yml</code> 主题项设置为diaspora</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">diaspora</span></span><br><span class="line"><span class="string">...</span></span><br></pre></td></tr></table></figure><h3 id="更新主题"><a href="#更新主题" class="headerlink" title="更新主题"></a>更新主题</h3><p>注意：请在更时主题时备份<code>_config.yml</code>配置文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> themes/diaspora</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><h3 id="新建文章模板"><a href="#新建文章模板" class="headerlink" title="新建文章模板"></a>新建文章模板</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My awesome title</span><br><span class="line">date: 2016-10-12 18:38:45</span><br><span class="line">tags: </span><br><span class="line"><span class="bullet">-</span> 标签</span><br><span class="line"><span class="bullet">-</span> 标签</span><br><span class="line">mp3: http://domain.com/awesome.mp3</span><br><span class="line"><span class="section">cover: http://domain.com/awesome.jpg</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 头部菜单，title: link</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Whoami:</span> <span class="string">/whoami</span></span><br><span class="line">  <span class="attr">Github:</span> <span class="string">https://github.com/Fechin</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/FechinLi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示目录</span></span><br><span class="line"><span class="attr">TOC:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否自动播放音乐</span></span><br><span class="line"><span class="attr">autoplay:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认音乐（随机播放）</span></span><br><span class="line"><span class="attr">mp3:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">http://link.hhtjim.com/163/425570952.mp3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首页封面图, 为空时取文章的cover作为封面</span></span><br><span class="line"><span class="attr">welcome_cover:</span> <span class="comment"># /img/welcome-cover.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认文章封面图</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">/img/cover.jpg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Gitalk 评论插件（https://github.com/gitalk/gitalk）</span></span><br><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">    <span class="comment"># 是否自动展开评论框</span></span><br><span class="line">    <span class="attr">autoExpand:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 应用编号</span></span><br><span class="line">    <span class="attr">clientID:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 应用秘钥</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># issue仓库名</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># Github名</span></span><br><span class="line">    <span class="attr">admin:</span> [<span class="string">&#x27;&#x27;</span>]</span><br><span class="line">    <span class="comment"># Ensure uniqueness and length less than 50</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">location.pathname</span></span><br><span class="line">    <span class="comment"># Facebook-like distraction free mode</span></span><br><span class="line">    <span class="attr">distractionFreeMode:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站关键字</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">Fechin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要使用google_analytics进行统计的话，这里需要配置ID</span></span><br><span class="line"><span class="attr">google_analytics:</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 网站ico</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/img/favicon.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># rss文件</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">atom.xml</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>启程：我的博客之旅</title>
      <link href="/2024/08/18/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/"/>
      <url>/2024/08/18/%E6%88%91%E7%9A%84%E5%8D%9A%E5%AE%A2%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<hr><p>在这个信息爆炸的时代，每个人都是自己故事的书写者，也是知识的传播者。今天，我终于鼓起勇气，踏出了这重要的一步——写下我的第一篇博客。这不仅仅是一个简单的文字堆砌，它是我心灵的一片小天地，是我学习、思考、成长的见证者。</p><p><strong>为何开始？</strong></p><p>在无数个日夜的探索与学习中，我遇到了无数的难题与挑战，也收获了无数的喜悦与启发。我渴望将这些宝贵的经历与感悟分享给同样在路上的你。或许我的文字还不够成熟，但每一句都是我用心敲打的印记，希望能成为你前行路上的一盏小灯，哪怕只能照亮一小段路程。</p><p><strong>内容预告</strong></p><p>在这篇博客中，我将从几个方面展开我的分享：</p><ol><li><strong>学习心得</strong>：回顾过去一段时间里，我在某个技术领域（比如编程、设计、市场营销等）的学习历程，包括遇到的困难、解决的方法以及获得的成长。</li><li><strong>项目实践</strong>：分享一个我最近完成的项目或实验，从策划到实施，再到成果展示的全过程。这里不仅有成功的经验，也会有失败的教训，希望能为你提供一些实践上的参考。</li><li><strong>思考感悟</strong>：记录一些生活中的小确幸或是对某个话题的深入思考，比如科技如何改变我们的生活、个人成长的重要性等。这些思考虽然琐碎，但却是我成长的足迹。</li><li><strong>未来展望</strong>：展望我的博客之路，以及我在技术、学习、生活等各方面的规划与期待。我相信，只要坚持不懈，未来总有无限可能。</li></ol><p><strong>结语</strong></p><p>写下这篇博客，对我而言，既是一种自我挑战，也是一种新的开始。我深知，博客之路漫长且不易，但我愿意用热情和坚持去浇灌这片土地，让它生根发芽，茁壮成长。感谢你的阅读，如果你喜欢我的分享，或者有任何建议与反馈，都欢迎在评论区留言。让我们一起在知识的海洋中遨游，共同成长！</p><hr><p>这就是我的第一篇博客，期待与你在未来的日子里，有更多美好的相遇与交流。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>py网络编程</title>
      <link href="/2024/06/14/py%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/06/14/py%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><blockquote><p>用Python进行网络编程，就是在Python程序本身这个进程内，连接别的服务器进程的通信端口进行通信。Python 网络编程和其它语言类似，通常通过”Socket（套接字）”向网络发出请求或者应答网络请求，使主机间或者一台计算机上的进程间可以通讯。</p></blockquote><h3 id="TCPClient"><a href="#TCPClient" class="headerlink" title="TCPClient"></a>TCPClient</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(gethostname())  # 使用 gethostname方法来获取</span></span><br><span class="line">host_name = <span class="string">&#x27;LAPTOP-E02HTJB6&#x27;</span>  <span class="comment"># ip 192.168.80.1</span></span><br><span class="line">port_num = <span class="number">1200</span>  <span class="comment"># 端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建socket</span></span><br><span class="line">clientSocket = socket(AF_INET, SOCK_STREAM)  <span class="comment"># AF_INET意思是ipv4，SOCK_STREAM意思是TCP的连接</span></span><br><span class="line"><span class="comment"># 建立连接</span></span><br><span class="line">clientSocket.connect((host_name,port_num))  <span class="comment"># ip地址 + 端口，放到一个元组里面</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 让用户输入内容</span></span><br><span class="line">message = <span class="built_in">input</span>(<span class="string">&quot;enter something: &quot;</span>)</span><br><span class="line">clientSocket.send(message.encode())  <span class="comment"># send发送,注意因为message是一个字符串，需要encode转换成Byte</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受信息</span></span><br><span class="line">upperMessage = clientSocket.recv(<span class="number">1024</span>).decode()  <span class="comment"># 把Byte转换成字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the message from the server: &#x27;</span> + upperMessage)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 释放资源</span></span><br><span class="line">clientSocket.close()</span><br></pre></td></tr></table></figure><h3 id="TCPServer"><a href="#TCPServer" class="headerlink" title="TCPServer"></a>TCPServer</h3><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">serverSocket = socket(AF_INET, SOCK_STREAM)</span><br><span class="line"></span><br><span class="line">serverSocket.bind((gethostname(), <span class="number">1200</span>)) <span class="comment"># 元组，服务器的地址, 注意端口号需要保持一致</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 监听请求</span></span><br><span class="line">serverSocket.listen(<span class="number">2</span>)  <span class="comment"># 这个队列的数量，最大为2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;the server is ready to accept information......&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接受东西</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 循环监听</span></span><br><span class="line">    <span class="comment"># serverSocket用来倾听连接的请求，connectionSockte用来传递数据</span></span><br><span class="line">    connectionSockte, address = serverSocket.accept()</span><br><span class="line"></span><br><span class="line">    message = connectionSockte.recv(<span class="number">1024</span>).decode()  <span class="comment"># 转成字符串</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;got the message from the client : &#x27;</span> + message)</span><br><span class="line"></span><br><span class="line">    modifedMessage = message.upper().encode()  <span class="comment"># 转换成大写，再转成Byte</span></span><br><span class="line">    connectionSockte.send(modifedMessage)  <span class="comment"># 发送</span></span><br><span class="line"></span><br><span class="line">    connectionSockte.close()  <span class="comment"># 释放资源</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用模块大全</title>
      <link href="/2024/05/20/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%A4%A7%E5%85%A8/"/>
      <url>/2024/05/20/Python%E5%B8%B8%E7%94%A8%E6%A8%A1%E5%9D%97%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Python常用模块大全（总结）"><a href="#Python常用模块大全（总结）" class="headerlink" title="Python常用模块大全（总结）"></a>Python常用模块大全（总结）</h1><p><img src="https://wallpaperbat.com/img/283081-python-run-the-trap-8k-ultra-hd-wallpaper-background-image.png" alt="python"></p><blockquote><p>Python拥有丰富的标准库和第三方库，这些模块极大地扩展了Python的功能，使其在各种应用场景中都能发挥重要作用。下面我将列出一些常用的Python模块及其简单代码案例，帮助你更好地理解和使用它们。</p></blockquote><h2 id="os模块："><a href="#os模块：" class="headerlink" title="os模块："></a>os模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">os.remove() 删除文件 </span><br><span class="line">os.unlink() 删除文件 </span><br><span class="line">os.rename() 重命名文件 </span><br><span class="line">os.listdir() 列出指定目录下所有文件 </span><br><span class="line">os.chdir() 改变当前工作目录</span><br><span class="line">os.getcwd() 获取当前文件路径</span><br><span class="line">os.mkdir() 新建目录</span><br><span class="line">os.rmdir() 删除空目录(删除非空目录, 使用shutil.rmtree())</span><br><span class="line">os.makedirs() 创建多级目录</span><br><span class="line">os.removedirs() 删除多级目录</span><br><span class="line">os.stat(file) 获取文件属性</span><br><span class="line">os.chmod(file) 修改文件权限</span><br><span class="line">os.utime(file) 修改文件时间戳</span><br><span class="line">os.name(file) 获取操作系统标识</span><br><span class="line">os.system() 执行操作系统命令</span><br><span class="line">os.execvp() 启动一个新进程</span><br><span class="line">os.fork() 获取父进程ID，在子进程返回中返回0</span><br><span class="line">os.execvp() 执行外部程序脚本（Uinx）</span><br><span class="line">os.spawn() 执行外部程序脚本（Windows）</span><br><span class="line">os.access(path, mode) 判断文件权限(详细参考cnblogs)</span><br><span class="line">os.wait() 暂时未知</span><br><span class="line">os.path模块：</span><br><span class="line">os.path.split(filename) 将文件路径和文件名分割(会将最后一个目录作为文件名而分离)</span><br><span class="line">os.path.splitext(filename) 将文件路径和文件扩展名分割成一个元组</span><br><span class="line">os.path.dirname(filename) 返回文件路径的目录部分</span><br><span class="line">os.path.basename(filename) 返回文件路径的文件名部分</span><br><span class="line">os.path.join(dirname,basename) 将文件路径和文件名凑成完整文件路径</span><br><span class="line">os.path.abspath(name) 获得绝对路径</span><br><span class="line">os.path.splitunc(path) 把路径分割为挂载点和文件名</span><br><span class="line">os.path.normpath(path) 规范path字符串形式</span><br><span class="line">os.path.exists() 判断文件或目录是否存在</span><br><span class="line">os.path.isabs() 如果path是绝对路径，返回True</span><br><span class="line">os.path.realpath(path) #返回path的真实路径</span><br><span class="line">os.path.relpath(path[, start]) #从start开始计算相对路径 </span><br><span class="line">os.path.normcase(path) #转换path的大小写和斜杠</span><br><span class="line">os.path.isdir() 判断name是不是一个目录，name不是目录就返回false</span><br><span class="line">os.path.isfile() 判断name是不是一个文件，不存在返回false</span><br><span class="line">os.path.islink() 判断文件是否连接文件,返回boolean</span><br><span class="line">os.path.ismount() 指定路径是否存在且为一个挂载点，返回boolean</span><br><span class="line">os.path.samefile() 是否相同路径的文件，返回boolean</span><br><span class="line">os.path.getatime() 返回最近访问时间 浮点型</span><br><span class="line">os.path.getmtime() 返回上一次修改时间 浮点型</span><br><span class="line">os.path.getctime() 返回文件创建时间 浮点型</span><br><span class="line">os.path.getsize() 返回文件大小 字节单位</span><br><span class="line">os.path.commonprefix(list) #返回list(多个路径)中，所有path共有的最长的路径</span><br><span class="line">os.path.lexists #路径存在则返回True,路径损坏也返回True</span><br><span class="line">os.path.expanduser(path) #把path中包含的”~”和”~user”转换成用户目录</span><br><span class="line">os.path.expandvars(path) #根据环境变量的值替换path中包含的”$name”和”$&#123;name&#125;”</span><br><span class="line">os.path.sameopenfile(fp1, fp2) #判断fp1和fp2是否指向同一文件</span><br><span class="line">os.path.samestat(stat1, stat2) #判断stat tuple stat1和stat2是否指向同一个文件</span><br><span class="line">os.path.splitdrive(path) #一般用在windows下，返回驱动器名和路径组成的元组</span><br><span class="line">os.path.walk(path, visit, arg) #遍历path，给每个path执行一个函数详细见手册</span><br><span class="line">os.path.supports_unicode_filenames() 设置是否支持unicode路径名</span><br></pre></td></tr></table></figure><h2 id="stat模块："><a href="#stat模块：" class="headerlink" title="stat模块："></a>stat模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">描述os.stat()返回的文件属性列表中各值的意义</span><br><span class="line">fileStats = os.stat(path) 获取到的文件属性列表</span><br><span class="line">fileStats[stat.ST_MODE] 获取文件的模式</span><br><span class="line">fileStats[stat.ST_SIZE] 文件大小</span><br><span class="line">fileStats[stat.ST_MTIME] 文件最后修改时间</span><br><span class="line">fileStats[stat.ST_ATIME] 文件最后访问时间</span><br><span class="line">fileStats[stat.ST_CTIME] 文件创建时间</span><br><span class="line">stat.S_ISDIR(fileStats[stat.ST_MODE]) 是否目录</span><br><span class="line">stat.S_ISREG(fileStats[stat.ST_MODE]) 是否一般文件</span><br><span class="line">stat.S_ISLNK(fileStats[stat.ST_MODE]) 是否连接文件</span><br><span class="line">stat.S_ISSOCK(fileStats[stat.ST_MODE]) 是否COCK文件</span><br><span class="line">stat.S_ISFIFO(fileStats[stat.ST_MODE]) 是否命名管道</span><br><span class="line">stat.S_ISBLK(fileStats[stat.ST_MODE]) 是否块设备</span><br><span class="line">stat.S_ISCHR(fileStats[stat.ST_MODE]) 是否字符设置</span><br></pre></td></tr></table></figure><h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块:"></a>sys模块:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sys.argv 命令行参数List，第一个元素是程序本身路径 </span><br><span class="line">sys.path 返回模块的搜索路径，初始化时使用PYTHONPATH环境变量的值 </span><br><span class="line">sys.modules.keys() 返回所有已经导入的模块列表</span><br><span class="line">sys.modules 返回系统导入的模块字段，key是模块名，value是模块 </span><br><span class="line">sys.exc_info() 获取当前正在处理的异常类,exc_type、exc_value、exc_traceback当前处理的异常详细信息</span><br><span class="line">sys.exit(n) 退出程序，正常退出时exit(0)</span><br><span class="line">sys.hexversion 获取Python解释程序的版本值，16进制格式如：0x020403F0</span><br><span class="line">sys.version 获取Python解释程序的版本信息</span><br><span class="line">sys.platform 返回操作系统平台名称</span><br><span class="line">sys.stdout 标准输出</span><br><span class="line">sys.stdout.write(‘aaa‘) 标准输出内容</span><br><span class="line">sys.stdout.writelines() 无换行输出</span><br><span class="line">sys.stdin 标准输入</span><br><span class="line">sys.stdin.read() 输入一行</span><br><span class="line">sys.stderr 错误输出</span><br><span class="line">sys.exc_clear() 用来清除当前线程所出现的当前的或最近的错误信息 </span><br><span class="line">sys.exec_prefix 返回平台独立的python文件安装的位置 </span><br><span class="line">sys.byteorder 本地字节规则的指示器，big-endian平台的值是‘big‘,little-endian平台的值是‘little‘ </span><br><span class="line">sys.copyright 记录python版权相关的东西 </span><br><span class="line">sys.api_version 解释器的C的API版本 </span><br><span class="line">sys.version_info ‘final‘表示最终,也有‘candidate‘表示候选，表示版本级别，是否有后继的发行 </span><br><span class="line">sys.getdefaultencoding() 返回当前你所用的默认的字符编码格式 </span><br><span class="line">sys.getfilesystemencoding() 返回将Unicode文件名转换成系统文件名的编码的名字 </span><br><span class="line">sys.builtin_module_names Python解释器导入的内建模块列表 </span><br><span class="line">sys.executable Python解释程序路径 </span><br><span class="line">sys.getwindowsversion() 获取Windows的版本 </span><br><span class="line">sys.stdin.readline() 从标准输入读一行，sys.stdout.write(“a”) 屏幕输出a</span><br><span class="line">sys.setdefaultencoding(name) 用来设置当前默认的字符编码(详细使用参考文档) </span><br><span class="line">sys.displayhook(value) 如果value非空，这个函数会把他输出到sys.stdout(详细使用参考文档)</span><br></pre></td></tr></table></figure><h2 id="datetime-date-time模块："><a href="#datetime-date-time模块：" class="headerlink" title="datetime,date,time模块："></a>datetime,date,time模块：</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">datetime.date.today() 本地日期对象,(用<span class="built_in">str</span>函数可得到它的字面表示(<span class="number">2014</span>-03-<span class="number">24</span>))</span><br><span class="line">datetime.date.isoformat(obj) 当前[年-月-日]字符串表示(<span class="number">2014</span>-03-<span class="number">24</span>)</span><br><span class="line">datetime.date.fromtimestamp() 返回一个日期对象，参数是时间戳,返回 [年-月-日]</span><br><span class="line">datetime.date.weekday(obj) 返回一个日期对象的星期数,周一是<span class="number">0</span></span><br><span class="line">datetime.date.isoweekday(obj) 返回一个日期对象的星期数,周一是<span class="number">1</span></span><br><span class="line">datetime.date.isocalendar(obj) 把日期对象返回一个带有年月日的元组</span><br><span class="line">datetime对象：</span><br><span class="line">datetime.datetime.today() 返回一个包含本地时间(含微秒数)的datetime对象 <span class="number">2014</span>-03-<span class="number">24</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">50.419000</span></span><br><span class="line">datetime.datetime.now([tz]) 返回指定时区的datetime对象 <span class="number">2014</span>-03-<span class="number">24</span> <span class="number">23</span>:<span class="number">31</span>:<span class="number">50.419000</span></span><br><span class="line">datetime.datetime.utcnow() 返回一个零时区的datetime对象</span><br><span class="line">datetime.fromtimestamp(timestamp[,tz]) 按时间戳返回一个datetime对象，可指定时区,可用于strftime转换为日期表示 </span><br><span class="line">datetime.utcfromtimestamp(timestamp) 按时间戳返回一个UTC-datetime对象</span><br><span class="line">datetime.datetime.strptime(‘<span class="number">2014</span>-03-<span class="number">16</span> <span class="number">12</span>:<span class="number">21</span>:<span class="number">21</span>‘,”%Y-%m-%d %H:%M:%S”) 将字符串转为datetime对象</span><br><span class="line">datetime.datetime.strftime(datetime.datetime.now(), ‘%Y%m%d %H%M%S‘) 将datetime对象转换为<span class="built_in">str</span>表示形式</span><br><span class="line">datetime.date.today().timetuple() 转换为时间戳datetime元组对象，可用于转换时间戳</span><br><span class="line">datetime.datetime.now().timetuple()</span><br><span class="line">time.mktime(timetupleobj) 将datetime元组对象转为时间戳</span><br><span class="line">time.time() 当前时间戳</span><br><span class="line">time.localtime</span><br><span class="line">time.gmtime</span><br></pre></td></tr></table></figure><h2 id="hashlib-md5模块："><a href="#hashlib-md5模块：" class="headerlink" title="hashlib,md5模块："></a>hashlib,md5模块：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hashlib.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</span><br><span class="line">md5.md5(‘md5_str‘).hexdigest() 对指定字符串md5加密</span><br></pre></td></tr></table></figure><h2 id="random模块："><a href="#random模块：" class="headerlink" title="random模块："></a>random模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">random.random() 产生0-1的随机浮点数</span><br><span class="line">random.uniform(a, b) 产生指定范围内的随机浮点数</span><br><span class="line">random.randint(a, b) 产生指定范围内的随机整数</span><br><span class="line">random.randrange([start], stop[, step]) 从一个指定步长的集合中产生随机数</span><br><span class="line">random.choice(sequence) 从序列中产生一个随机数</span><br><span class="line">random.shuffle(x[, random]) 将一个列表中的元素打乱</span><br><span class="line">random.sample(sequence, k) 从序列中随机获取指定长度的片断</span><br></pre></td></tr></table></figure><h2 id="types模块："><a href="#types模块：" class="headerlink" title="types模块："></a>types模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">保存了所有数据类型名称。</span><br><span class="line">if type(‘1111‘) == types.StringType:</span><br><span class="line">MySQLdb模块：</span><br><span class="line">MySQLdb.get_client_info() 获取API版本</span><br><span class="line">MySQLdb.Binary(‘string‘) 转为二进制数据形式</span><br><span class="line">MySQLdb.escape_string(‘str‘) 针对mysql的字符转义函数</span><br><span class="line">MySQLdb.DateFromTicks(1395842548) 把时间戳转为datetime.date对象实例</span><br><span class="line">MySQLdb.TimestampFromTicks(1395842548) 把时间戳转为datetime.datetime对象实例</span><br><span class="line">MySQLdb.string_literal(‘str‘) 字符转义</span><br><span class="line">MySQLdb.cursor()游标对象上的方法：《python核心编程》P624</span><br></pre></td></tr></table></figure><h2 id="atexit模块："><a href="#atexit模块：" class="headerlink" title="atexit模块："></a>atexit模块：</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">atexit.register(fun,args,args2..) 注册函数func，在解析器退出前调用该函数</span><br></pre></td></tr></table></figure><h2 id="string模块"><a href="#string模块" class="headerlink" title="string模块"></a>string模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">str.capitalize() 把字符串的第一个字符大写</span><br><span class="line">str.center(width) 返回一个原字符串居中，并使用空格填充到width长度的新字符串</span><br><span class="line">str.ljust(width) 返回一个原字符串左对齐，用空格填充到指定长度的新字符串</span><br><span class="line">str.rjust(width) 返回一个原字符串右对齐，用空格填充到指定长度的新字符串</span><br><span class="line">str.zfill(width) 返回字符串右对齐，前面用0填充到指定长度的新字符串</span><br><span class="line">str.count(str,[beg,len]) 返回子字符串在原字符串出现次数，beg,len是范围</span><br><span class="line">str.decode(encodeing[,replace]) 解码string,出错引发ValueError异常</span><br><span class="line">str.encode(encodeing[,replace]) 解码string</span><br><span class="line">str.endswith(substr[,beg,end]) 字符串是否以substr结束，beg,end是范围</span><br><span class="line">str.startswith(substr[,beg,end]) 字符串是否以substr开头，beg,end是范围</span><br><span class="line">str.expandtabs(tabsize = 8) 把字符串的tab转为空格，默认为8个</span><br><span class="line">str.find(str,[stat,end]) 查找子字符串在字符串第一次出现的位置，否则返回-1</span><br><span class="line">str.index(str,[beg,end]) 查找子字符串在指定字符中的位置，不存在报异常</span><br><span class="line">str.isalnum() 检查字符串是否以字母和数字组成，是返回true否则False</span><br><span class="line">str.isalpha() 检查字符串是否以纯字母组成，是返回true,否则false</span><br><span class="line">str.isdecimal() 检查字符串是否以纯十进制数字组成，返回布尔值</span><br><span class="line">str.isdigit() 检查字符串是否以纯数字组成，返回布尔值</span><br><span class="line">str.islower() 检查字符串是否全是小写，返回布尔值</span><br><span class="line">str.isupper() 检查字符串是否全是大写，返回布尔值</span><br><span class="line">str.isnumeric() 检查字符串是否只包含数字字符，返回布尔值</span><br><span class="line">str.isspace() 如果str中只包含空格，则返回true,否则FALSE</span><br><span class="line">str.title() 返回标题化的字符串（所有单词首字母大写，其余小写）</span><br><span class="line">str.istitle() 如果字符串是标题化的(参见title())则返回true,否则false</span><br><span class="line">str.join(seq) 以str作为连接符，将一个序列中的元素连接成字符串</span><br><span class="line">str.split(str=‘‘,num) 以str作为分隔符，将一个字符串分隔成一个序列，num是被分隔的字符串</span><br><span class="line">str.splitlines(num) 以行分隔，返回各行内容作为元素的列表</span><br><span class="line">str.lower() 将大写转为小写</span><br><span class="line">str.upper() 转换字符串的小写为大写</span><br><span class="line">str.swapcase() 翻换字符串的大小写</span><br><span class="line">str.lstrip() 去掉字符左边的空格和回车换行符</span><br><span class="line">str.rstrip() 去掉字符右边的空格和回车换行符</span><br><span class="line">str.strip() 去掉字符两边的空格和回车换行符</span><br><span class="line">str.partition(substr) 从substr出现的第一个位置起，将str分割成一个3元组。</span><br><span class="line">str.replace(str1,str2,num) 查找str1替换成str2，num是替换次数</span><br><span class="line">str.rfind(str[,beg,end]) 从右边开始查询子字符串</span><br><span class="line">str.rindex(str,[beg,end]) 从右边开始查找子字符串位置 </span><br><span class="line">str.rpartition(str) 类似partition函数，不过从右边开始查找</span><br><span class="line">str.translate(str,del=‘‘) 按str给出的表转换string的字符，del是要过虑的字符</span><br></pre></td></tr></table></figure><h2 id="urllib模块："><a href="#urllib模块：" class="headerlink" title="urllib模块："></a>urllib模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">urllib.quote(string[,safe]) 对字符串进行编码。参数safe指定了不需要编码的字符</span><br><span class="line">urllib.unquote(string) 对字符串进行解码</span><br><span class="line">urllib.quote_plus(string[,safe]) 与urllib.quote类似，但这个方法用‘+‘来替换‘ ‘，而quote用‘%20‘来代替‘ ‘</span><br><span class="line">urllib.unquote_plus(string ) 对字符串进行解码</span><br><span class="line">urllib.urlencode(query[,doseq]) 将dict或者包含两个元素的元组列表转换成url参数。</span><br><span class="line">例如 字典&#123;‘name‘:‘wklken‘,‘pwd‘:‘123‘&#125;将被转换为”name=wklken&amp;pwd=123″</span><br><span class="line">urllib.pathname2url(path) 将本地路径转换成url路径</span><br><span class="line">urllib.url2pathname(path) 将url路径转换成本地路径</span><br><span class="line">urllib.urlretrieve(url[,filename[,reporthook[,data]]]) 下载远程数据到本地</span><br><span class="line">filename：指定保存到本地的路径（若未指定该，urllib生成一个临时文件保存数据）</span><br><span class="line">reporthook：回调函数，当连接上服务器、以及相应的数据块传输完毕的时候会触发该回调</span><br><span class="line">data：指post到服务器的数据</span><br><span class="line">rulrs = urllib.urlopen(url[,data[,proxies]]) 抓取网页信息，[data]post数据到Url,proxies设置的代理</span><br><span class="line">urlrs.readline() 跟文件对象使用一样</span><br><span class="line">urlrs.readlines() 跟文件对象使用一样</span><br><span class="line">urlrs.fileno() 跟文件对象使用一样</span><br><span class="line">urlrs.close() 跟文件对象使用一样</span><br><span class="line">urlrs.info() 返回一个httplib.HTTPMessage对象，表示远程服务器返回的头信息</span><br><span class="line">urlrs.getcode() 获取请求返回状态HTTP状态码</span><br><span class="line">urlrs.geturl() 返回请求的URL</span><br></pre></td></tr></table></figure><h2 id="re模块："><a href="#re模块：" class="headerlink" title="re模块："></a>re模块：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一.常用正则表达式符号和语法：</span><br><span class="line">&#x27;.&#x27; 匹配所有字符串，除\n以外</span><br><span class="line">‘-’ 表示范围[0-9]</span><br><span class="line">&#x27;*&#x27; 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。</span><br><span class="line">&#x27;+&#x27; 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+</span><br><span class="line">&#x27;^&#x27; 匹配字符串开头</span><br><span class="line">‘$’ 匹配字符串结尾 re</span><br><span class="line">&#x27;\&#x27; 转义字符， 使后一个字符改变原来的意思，如果字符串中有字符*需要匹配，可以\*或者字符集[*] re.findall(r&#x27;3\*&#x27;,&#x27;3*ds&#x27;)结[&#x27;3*&#x27;]</span><br><span class="line">&#x27;*&#x27; 匹配前面的字符0次或多次 re.findall(&quot;ab*&quot;,&quot;cabc3abcbbac&quot;)结果：[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;a&#x27;]</span><br><span class="line">‘?’ 匹配前一个字符串0次或1次 re.findall(&#x27;ab?&#x27;,&#x27;abcabcabcadf&#x27;)结果[&#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;ab&#x27;, &#x27;a&#x27;]</span><br><span class="line">&#x27;&#123;m&#125;&#x27; 匹配前一个字符m次 re.findall(&#x27;cb&#123;1&#125;&#x27;,&#x27;bchbchcbfbcbb&#x27;)结果[&#x27;cb&#x27;, &#x27;cb&#x27;]</span><br><span class="line">&#x27;&#123;n,m&#125;&#x27; 匹配前一个字符n到m次 re.findall(&#x27;cb&#123;2,3&#125;&#x27;,&#x27;bchbchcbfbcbb&#x27;)结果[&#x27;cbb&#x27;]</span><br><span class="line">&#x27;\d&#x27; 匹配数字，等于[0-9] re.findall(&#x27;\d&#x27;,&#x27;电话:10086&#x27;)结果[&#x27;1&#x27;, &#x27;0&#x27;, &#x27;0&#x27;, &#x27;8&#x27;, &#x27;6&#x27;]</span><br><span class="line">&#x27;\D&#x27; 匹配非数字，等于[^0-9] re.findall(&#x27;\D&#x27;,&#x27;电话:10086&#x27;)结果[&#x27;电&#x27;, &#x27;话&#x27;, &#x27;:&#x27;]</span><br><span class="line">&#x27;\w&#x27; 匹配字母和数字，等于[A-Za-z0-9] re.findall(&#x27;\w&#x27;,&#x27;alex123,./;;;&#x27;)结果[&#x27;a&#x27;, &#x27;l&#x27;, &#x27;e&#x27;, &#x27;x&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span><br><span class="line">&#x27;\W&#x27; 匹配非英文字母和数字,等于[^A-Za-z0-9] re.findall(&#x27;\W&#x27;,&#x27;alex123,./;;;&#x27;)结果[&#x27;,&#x27;, &#x27;.&#x27;, &#x27;/&#x27;, &#x27;;&#x27;, &#x27;;&#x27;, &#x27;;&#x27;]</span><br><span class="line">&#x27;\s&#x27; 匹配空白字符 re.findall(&#x27;\s&#x27;,&#x27;3*ds \t\n&#x27;)结果[&#x27; &#x27;, &#x27;\t&#x27;, &#x27;\n&#x27;]</span><br><span class="line">&#x27;\S&#x27; 匹配非空白字符 re.findall(&#x27;\s&#x27;,&#x27;3*ds \t\n&#x27;)结果[&#x27;3&#x27;, &#x27;*&#x27;, &#x27;d&#x27;, &#x27;s&#x27;]</span><br><span class="line">&#x27;\A&#x27; 匹配字符串开头</span><br><span class="line">&#x27;\Z&#x27; 匹配字符串结尾</span><br><span class="line">&#x27;\b&#x27; 匹配单词的词首和词尾，单词被定义为一个字母数字序列，因此词尾是用空白符或非字母数字符来表示的</span><br><span class="line">&#x27;\B&#x27; 与\b相反，只在当前位置不在单词边界时匹配</span><br><span class="line">&#x27;(?P&lt;name&gt;...)&#x27; 分组，除了原有编号外在指定一个额外的别名 re.search(&quot;(?P&lt;province&gt;[0-9]&#123;4&#125;)(?P&lt;city&gt;[0-9]&#123;2&#125;)(?P&lt;birthday&gt;[0-9]&#123;8&#125;)&quot;,&quot;371481199306143242&quot;).groupdict(&quot;city&quot;) 结果&#123;&#x27;province&#x27;: &#x27;3714&#x27;, &#x27;city&#x27;: &#x27;81&#x27;, &#x27;birthday&#x27;: &#x27;19930614&#x27;&#125;</span><br><span class="line">[] 是定义匹配的字符范围。比如 [a-zA-Z0-9] 表示相应位置的字符要匹配英文字符和数字。[\s*]表示空格或者*号。</span><br><span class="line">二.常用的re函数：</span><br><span class="line">方法/属性 作用</span><br><span class="line">re.match(pattern, string, flags=0) 从字符串的起始位置匹配，如果起始位置匹配不成功的话，match()就返回none</span><br><span class="line">re.search(pattern, string, flags=0) 扫描整个字符串并返回第一个成功的匹配</span><br><span class="line">re.findall(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个列表返回</span><br><span class="line">re.finditer(pattern, string, flags=0) 找到RE匹配的所有字符串，并把他们作为一个迭代器返回</span><br><span class="line">re.sub(pattern, repl, string, count=0, flags=0) 替换匹配到的字符串</span><br></pre></td></tr></table></figure><h2 id="math模块"><a href="#math模块" class="headerlink" title="math模块"></a>math模块</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ceil:取大于等于x的最小的整数值，如果x是一个整数，则返回x</span><br><span class="line">copysign:把y的正负号加到x前面，可以使用0</span><br><span class="line">cos:求x的余弦，x必须是弧度</span><br><span class="line">degrees:把x从弧度转换成角度</span><br><span class="line">e:表示一个常量</span><br><span class="line">exp:返回math.e,也就是2.71828的x次方</span><br><span class="line">expm1:返回math.e的x(其值为2.71828)次方的值减１</span><br><span class="line">fabs:返回x的绝对值</span><br><span class="line">factorial:取x的阶乘的值</span><br><span class="line">floor:取小于等于x的最大的整数值，如果x是一个整数，则返回自身</span><br><span class="line">fmod:得到x/y的余数，其值是一个浮点数</span><br><span class="line">frexp:返回一个元组(m,e),其计算方式为：x分别除0.5和1,得到一个值的范围</span><br><span class="line">fsum:对迭代器里的每个元素进行求和操作</span><br><span class="line">gcd:返回x和y的最大公约数</span><br><span class="line">hypot:如果x是不是无穷大的数字,则返回True,否则返回False</span><br><span class="line">isfinite:如果x是正无穷大或负无穷大，则返回True,否则返回False</span><br><span class="line">isinf:如果x是正无穷大或负无穷大，则返回True,否则返回False</span><br><span class="line">isnan:如果x不是数字True,否则返回False</span><br><span class="line">ldexp:返回x*(2**i)的值</span><br><span class="line">log:返回x的自然对数，默认以e为基数，base参数给定时，将x的对数返回给定的base,计算式为：log(x)/log(base)</span><br><span class="line">log10:返回x的以10为底的对数</span><br><span class="line">log1p:返回x+1的自然对数(基数为e)的值</span><br><span class="line">log2:返回x的基2对数</span><br><span class="line">modf:返回由x的小数部分和整数部分组成的元组</span><br><span class="line">pi:数字常量，圆周率</span><br><span class="line">pow:返回x的y次方，即x**y</span><br><span class="line">radians:把角度x转换成弧度</span><br><span class="line">sin:求x(x为弧度)的正弦值</span><br><span class="line">sqrt:求x的平方根</span><br><span class="line">tan:返回x(x为弧度)的正切值</span><br><span class="line">trunc:返回x的整数部分</span><br></pre></td></tr></table></figure><h4 id="说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！"><a href="#说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！" class="headerlink" title="说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！"></a>说明：这些方法都是在各博客总结而来，并非自己所写，这是方便以后自己使用！！！</h4>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7常用指令</title>
      <link href="/2024/05/10/CentOS7%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>/2024/05/10/CentOS7%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="一、常用命令"><a href="#一、常用命令" class="headerlink" title="一、常用命令"></a>一、常用命令</h1><h3 id="1-文件与目录操作"><a href="#1-文件与目录操作" class="headerlink" title="1.文件与目录操作"></a>1.文件与目录操作</h3><table><thead><tr><th align="center">命令</th><th align="left">解析</th></tr></thead><tbody><tr><td align="center">cd &#x2F;home</td><td align="left">进入 ‘&#x2F;home’ 目录</td></tr><tr><td align="center">cd ..</td><td align="left">返回上一级目录</td></tr><tr><td align="center">cd ..&#x2F;..</td><td align="left">返回上两级目录</td></tr><tr><td align="center">cd -</td><td align="left">返回上次所在目录</td></tr><tr><td align="center">cp file1 file2</td><td align="left">将file1&#x3D;&#x3D;复制&#x3D;&#x3D;为file2</td></tr><tr><td align="center">cp -a dir1 dir2</td><td align="left">复制一个目录</td></tr><tr><td align="center">cp -a &#x2F;tmp&#x2F;dir1 .</td><td align="left">复制一个目录到当前工作目录（.代表当前目录）</td></tr><tr><td align="center">ls</td><td align="left">查看目录中的文件</td></tr><tr><td align="center">ls -a</td><td align="left">显示隐藏文件</td></tr><tr><td align="center">ls -l</td><td align="left">显示详细信息（&#x3D;&#x3D;ll&#x3D;&#x3D;）</td></tr><tr><td align="center">ls -lrt</td><td align="left">按时间显示文件（l表示详细列表，r表示反向排序，t表示按时间排序）</td></tr><tr><td align="center">pwd</td><td align="left">显示工作路径</td></tr><tr><td align="center">mkdir dir1</td><td align="left">创建 ‘dir1’ 目录</td></tr><tr><td align="center">mkdir dir1 dir2</td><td align="left">同时创建两个目录</td></tr><tr><td align="center">mkdir -p &#x2F;tmp&#x2F;dir1&#x2F;dir2</td><td align="left">&#x3D;&#x3D;创建一个目录树&#x3D;&#x3D;</td></tr><tr><td align="center">mv dir1 dir2</td><td align="left">移动&#x2F;重命名一个目录</td></tr><tr><td align="center">rm -f file1</td><td align="left">删除 ‘file1’</td></tr><tr><td align="center">rm -rf dir1</td><td align="left">删除 ‘dir1’ 目录及其子目录内容</td></tr></tbody></table><h3 id="2-查看文件内容"><a href="#2-查看文件内容" class="headerlink" title="2.查看文件内容"></a>2.查看文件内容</h3><table><thead><tr><th align="center">命令</th><th>解析</th></tr></thead><tbody><tr><td align="center">cat file1</td><td>从第一个字节开始正向查看文件的内容</td></tr><tr><td align="center">head -2 file1</td><td>查看一个文件的前两行</td></tr><tr><td align="center">more file1</td><td>查看一个长文件的内容</td></tr><tr><td align="center">tac file1</td><td>从最后一行开始反向查看一个文件的内容</td></tr><tr><td align="center">tail -3 file1</td><td>查看一个文件的最后三行</td></tr><tr><td align="center">vi file</td><td>打开并浏览文件</td></tr></tbody></table><h3 id="3-文本内容处理"><a href="#3-文本内容处理" class="headerlink" title="3.文本内容处理"></a>3.文本内容处理</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>grep str &#x2F;tmp&#x2F;test</td><td>在文件 ‘&#x2F;tmp&#x2F;test’ 中查找 “str”</td></tr><tr><td>grep ^str &#x2F;tmp&#x2F;test</td><td>在文件 ‘&#x2F;tmp&#x2F;test’ 中查找以 “str” 开始的行</td></tr><tr><td>grep [0-9] &#x2F;tmp&#x2F;test</td><td>查找 ‘&#x2F;tmp&#x2F;test’ 文件中所有包含数字的行</td></tr><tr><td>grep str -r &#x2F;tmp&#x2F;*</td><td>在目录 ‘&#x2F;tmp’ 及其子目录中查找 “str”</td></tr><tr><td>diff file1 file2</td><td>找出两个文件的不同处</td></tr><tr><td>sdiff file1 file2</td><td>以对比的方式显示两个文件的不同</td></tr></tbody></table><blockquote><p>vi file</p></blockquote><table><thead><tr><th>操作</th><th>解析</th></tr></thead><tbody><tr><td>i</td><td>进入编辑文本模式</td></tr><tr><td>Esc</td><td>退出编辑文本模式</td></tr><tr><td>:w</td><td>保存当前修改</td></tr><tr><td>:q</td><td>不保存退出vi</td></tr><tr><td>:wq</td><td>保存当前修改并退出vi</td></tr></tbody></table><blockquote><p>vim file</p></blockquote><table><thead><tr><th>操作</th><th>解析</th></tr></thead><tbody><tr><td>p</td><td>粘贴</td></tr><tr><td>y</td><td>复制</td></tr><tr><td>shift+g</td><td>跳转到最后一行</td></tr><tr><td>命令模式下 u</td><td>撤回</td></tr><tr><td>&#x2F;</td><td>查找模式</td></tr><tr><td>查找模式中</td><td>n下一个,N上一个</td></tr></tbody></table><h3 id="4-查询操作"><a href="#4-查询操作" class="headerlink" title="4.查询操作"></a>4.查询操作</h3><table><thead><tr><th align="center">命令</th><th>解析</th></tr></thead><tbody><tr><td align="center">find &#x2F; -name file1</td><td>从 ‘&#x2F;’ 开始进入根文件系统查找文件和目录</td></tr><tr><td align="center">find &#x2F; -user user1</td><td>查找属于用户 ‘user1’ 的文件和目录</td></tr><tr><td align="center">find &#x2F;home&#x2F;user1 -name *.bin</td><td>在目录 ‘&#x2F; home&#x2F;user1’ 中查找以 ‘.bin’ 结尾的文件</td></tr><tr><td align="center">find &#x2F;usr&#x2F;bin -type f -atime +100</td><td>查找在过去100天内未被使用过的执行文件</td></tr><tr><td align="center">find &#x2F;usr&#x2F;bin -type f -mtime -10</td><td>查找在10天内被创建或者修改过的文件</td></tr><tr><td align="center">locate *.ps</td><td>寻找以 ‘.ps’ 结尾的文件，先运行 ‘updatedb’ 命令</td></tr><tr><td align="center">find -name ‘*.[ch]’ | xargs grep -E ‘expr’</td><td>在当前目录及其子目录所有.c和.h文件中查找 ‘expr’</td></tr><tr><td align="center">find -type f -print0 | xargs -r0 grep -F ‘expr’</td><td>在当前目录及其子目录的常规文件中查找 ‘expr’</td></tr><tr><td align="center">find -maxdepth 1 -type f | xargs grep -F ‘expr’</td><td>在当前目录中查找 ‘expr’</td></tr></tbody></table><h3 id="5-压缩、解压"><a href="#5-压缩、解压" class="headerlink" title="5.压缩、解压"></a>5.压缩、解压</h3><table><thead><tr><th align="center">命令</th><th>解析</th></tr></thead><tbody><tr><td align="center">bzip2 file1</td><td>压缩 file1</td></tr><tr><td align="center">bunzip2 file1.bz2</td><td>解压 file1.bz2</td></tr><tr><td align="center">gzip file1</td><td>压缩 file1</td></tr><tr><td align="center">gzip -9 file1</td><td>最大程度压缩 file1</td></tr><tr><td align="center">gunzip file1.gz</td><td>解压 file1.gz</td></tr><tr><td align="center">tar -cvf archive.tar file1</td><td>把file1打包成 archive.tar（-c: 建立压缩档案；-v: 显示所有过程；-f: 使用档案名字，是必须的，是最后一个参数）</td></tr><tr><td align="center">tar -cvf archive.tar file1 dir1</td><td>把 file1，dir1 打包成 archive.tar</td></tr><tr><td align="center">tar -tf archive.tar</td><td>显示一个包中的内容</td></tr><tr><td align="center">tar -xvf archive.tar</td><td>释放一个包</td></tr><tr><td align="center">tar -xvf archive.tar -C &#x2F;tmp</td><td>把压缩包释放到 &#x2F;tmp目录下</td></tr><tr><td align="center">zip file1.zip file1</td><td>创建一个zip格式的压缩包</td></tr><tr><td align="center">zip -r file1.zip file1 dir1</td><td>把文件和目录压缩成一个zip格式的压缩包</td></tr><tr><td align="center">unzip file1.zip</td><td>解压一个zip格式的压缩包到当前目录</td></tr><tr><td align="center">unzip test.zip -d &#x2F;tmp&#x2F;</td><td>解压一个zip格式的压缩包到 &#x2F;tmp 目录</td></tr></tbody></table><h3 id="6-yum安装器"><a href="#6-yum安装器" class="headerlink" title="6.yum安装器"></a>6.yum安装器</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>yum -y install [package]</td><td>下载并安装一个rpm包</td></tr><tr><td>yum localinstall [package.rpm]</td><td>安装一个rpm包，使用你自己的软件仓库解决所有依赖关系</td></tr><tr><td>yum -y update</td><td>更新当前系统中安装的所有rpm包</td></tr><tr><td>yum update [package]</td><td>更新一个rpm包</td></tr><tr><td>yum remove [package]</td><td>删除一个rpm包</td></tr><tr><td>yum list</td><td>列出当前系统中安装的所有包</td></tr><tr><td>yum search [package]</td><td>在rpm仓库中搜寻软件包</td></tr><tr><td>yum clean [package]</td><td>清除缓存目录（&#x2F;var&#x2F;cache&#x2F;yum）下的软件包</td></tr><tr><td>yum clean headers</td><td>删除所有头文件</td></tr><tr><td>yum clean all</td><td>删除所有缓存的包和头文件</td></tr></tbody></table><h3 id="7-网络相关"><a href="#7-网络相关" class="headerlink" title="7.网络相关"></a>7.网络相关</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>ifconfig eth0</td><td>显示一个以太网卡的配置</td></tr><tr><td>ifconfig eth0 192.168.1.1 netmask 255.255.255.0</td><td>配置网卡的IP地址</td></tr><tr><td>ifdown eth0</td><td>禁用 ‘eth0’ 网络设备</td></tr><tr><td>ifup eth0</td><td>启用 ‘eth0’ 网络设备</td></tr><tr><td>iwconfig eth1</td><td>显示一个无线网卡的配置</td></tr><tr><td>iwlist scan</td><td>显示无线网络</td></tr><tr><td>ip addr show</td><td>显示网卡的IP地址</td></tr></tbody></table><h3 id="8-系统相关"><a href="#8-系统相关" class="headerlink" title="8.系统相关"></a>8.系统相关</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>su -</td><td>切换到root权限（与su有区别）</td></tr><tr><td>shutdown -h now</td><td>关机</td></tr><tr><td>shutdown -r now</td><td>重启</td></tr><tr><td>top</td><td>罗列使用CPU资源最多的linux任务 （输入q退出）</td></tr><tr><td>pstree</td><td>以树状图显示程序</td></tr><tr><td>man ping</td><td>查看参考手册（例如ping 命令）</td></tr><tr><td>passwd</td><td>修改密码</td></tr><tr><td>df -h</td><td>显示磁盘的使用情况</td></tr><tr><td>cal -3</td><td>显示前一个月，当前月以及下一个月的月历</td></tr><tr><td>cal 10 1988</td><td>显示指定月，年的月历</td></tr><tr><td>date –date ‘1970-01-01 UTC 1427888888 seconds’</td><td>把一相对于1970-01-01 00:00的秒数转换成时间</td></tr></tbody></table><h2 id="二、XSheel-5相关操作"><a href="#二、XSheel-5相关操作" class="headerlink" title="二、XSheel 5相关操作"></a>二、XSheel 5相关操作</h2><h3 id="1-窗体快捷键"><a href="#1-窗体快捷键" class="headerlink" title="1.窗体快捷键"></a>1.窗体快捷键</h3><table><thead><tr><th>命令</th><th>解析</th></tr></thead><tbody><tr><td>Ctrl + u</td><td>删除光标之前到行首的字符</td></tr><tr><td>Ctrl + k</td><td>删除光标之前到行尾的字符</td></tr><tr><td>Ctrl + c</td><td>取消当前行输入的命令，相当于Ctrl + Break</td></tr><tr><td>Ctrl + a</td><td>光标移动到行首（ahead of line），相当于通常的Home键</td></tr><tr><td>Ctrl + e</td><td>光标移动到行尾（end of line）</td></tr><tr><td>Ctrl + f</td><td>光标向前（forward）移动一个字符位置</td></tr><tr><td>Ctrl + b</td><td>光标往回（backward）移动一个字符位置</td></tr><tr><td>Ctrl + l</td><td>清屏，相当于执行clear命令</td></tr><tr><td>Ctrl + r</td><td>显示:号提示，根据用户输入查找相关历史命令（reverse-i-search）</td></tr><tr><td>Ctrl + w</td><td>删除从光标位置前到当前所处单词（word）的开头</td></tr><tr><td>Ctrl + t</td><td>交换光标位置前的两个字符</td></tr><tr><td>Ctrl + y</td><td>粘贴最后一次被删除的单词</td></tr><tr><td>Ctrl + Alt + d</td><td>显示桌面</td></tr><tr><td>Alt + b</td><td>光标往回（backward）移动到前一个单词</td></tr><tr><td>Alt + d</td><td>删除从光标位置到当前所处单词的末尾</td></tr><tr><td>Alt + F2</td><td>运行</td></tr><tr><td>Alt + F4</td><td>关闭当前窗口</td></tr><tr><td>Alt + F9</td><td>最小化当前窗口</td></tr><tr><td>Alt + F10</td><td>最大化当前窗口</td></tr><tr><td>Alt + Tab</td><td>切换窗口</td></tr><tr><td>Alt + 左键</td><td>移动窗口（或在最下面的任务栏滚动鼠标滑轮）</td></tr></tbody></table><p>命令行链接</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@192.168.80.134 -p 000000</span><br></pre></td></tr></table></figure><h3 id="2-操作小技巧"><a href="#2-操作小技巧" class="headerlink" title="2.操作小技巧"></a>2.操作小技巧</h3><blockquote><ul><li>鼠标中间键：粘贴突出显示的文本。(使用鼠标左键来选择文本。把光标指向想粘贴文本的地方。点击鼠标中间键来粘贴。)</li><li>Tab：命令行自动补全。使用 shell 提示时可使用这一方式。键入命令或文件名的前几个字符，然后按 [Tab] 键，它会自动补全命令或显示匹配键入字符的所有命令。</li><li>在滚动条的空白处点击鼠标中键：屏幕即滚动到那个地方。</li><li>在桌面或文件管理器中直接按 &#x2F; 就可以输入位置，打开文件管理器。</li><li>在 vi 或 Firefox 中直接按 &#x2F; 即可进入快速搜索状态。</li><li>网站链接和图片可直接拖放到桌面或者目录，可以马上下载。</li><li>直接将文件管理器中的文件拖到终端中就可以在终端中得到完整的路径名。</li></ul></blockquote><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p> 其实要学好**<u>Linux</u>**的操作并不是很困难的事情，在平常的使用过程中，碰到问题，学会去网上寻找答案不失为一个非常好的手段！谢谢大家！</p><h3 id="init一共分为7个级别，这7个级别的所代表的含义如下"><a href="#init一共分为7个级别，这7个级别的所代表的含义如下" class="headerlink" title="init一共分为7个级别，这7个级别的所代表的含义如下"></a>init一共分为7个级别，这7个级别的所代表的含义如下</h3><p>0：停机或者关机（千万不能将initdefault设置为0）</p><p>1：单用户模式，只root用户进行维护</p><p>2：多用户模式，不能使用NFS(Net File System)</p><p>3：完全多用户模式（标准的运行级别）</p><p>4：安全模式</p><p>5：图形化（即图形界面）</p><p>6：重启（千万不要把initdefault设置为6）</p><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"> # 文件末尾增加</span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">JAVA_HOME</span>=<span class="regexp">/opt/</span>server/jdk1<span class="number">.8</span><span class="number">.0_131</span></span><br><span class="line"><span class="keyword">export</span> <span class="variable constant_">PATH</span>=$&#123;<span class="variable constant_">JAVA_HOME</span>&#125;/<span class="attr">bin</span>:$PATH</span><br></pre></td></tr></table></figure><p>执行source命令，使配置立即生效 <code>source /etc/profile</code></p><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看防火墙状态</span></span><br><span class="line"><span class="attribute">sudo</span> firewall-cmd --state</span><br><span class="line"><span class="comment"># 关闭防火墙:</span></span><br><span class="line">sudo systemctl stop firewalld</span><br><span class="line"><span class="comment"># 禁止开机启动</span></span><br><span class="line">sudo systemctl disable firewalld</span><br></pre></td></tr></table></figure><h3 id="配置静态"><a href="#配置静态" class="headerlink" title="配置静态"></a>配置静态</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">hostnamectl set-hostname node1.centos.com</span><br><span class="line"></span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">BOOTPROTO=<span class="string">&quot;static&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面添加内容</span></span><br><span class="line">IPADDR=192.168.100.128</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">GATEWAY=192.168.100.2</span><br><span class="line">DNS1=192.168.100.2</span><br><span class="line"></span><br><span class="line">service network restart</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查 </span></span><br><span class="line">ip addr</span><br><span class="line">hostname</span><br></pre></td></tr></table></figure><h2 id="远程发送"><a href="#远程发送" class="headerlink" title="远程发送"></a>远程发送</h2><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 然后把文件拷贝到子节点中</span></span><br><span class="line">scp hadoop-env.sh node1:/opt/hadoop-<span class="number">3.1</span><span class="number">.0</span>/etc/hadoop/</span><br><span class="line">scp hadoop-env.sh node2:/opt/hadoop-<span class="number">3.1</span><span class="number">.0</span>/etc/hadoop/</span><br><span class="line">scp hadoop-env.sh node3:/opt/hadoop-<span class="number">3.1</span><span class="number">.0</span>/etc/hadoop/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制文件夹 -r</span></span><br><span class="line">spc -r</span><br></pre></td></tr></table></figure><h3 id="远程执行命令"><a href="#远程执行命令" class="headerlink" title="远程执行命令"></a>远程执行命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在master中控制node1执行命令</span></span><br><span class="line">ssh node1 <span class="string">&quot;mkdir -p /data/hadoop/tmp &amp; mkdir -p /data/hadoop/datanode&quot;</span></span><br><span class="line">ssh node2 <span class="string">&quot;mkdir -p /data/hadoop/tmp &amp; mkdir -p /data/hadoop/datanode&quot;</span></span><br><span class="line">ssh node3 <span class="string">&quot;mkdir -p /data/hadoop/tmp &amp; mkdir -p /data/hadoop/datanode&quot;</span></span><br></pre></td></tr></table></figure><h3 id="查看指定端口是否启动"><a href="#查看指定端口是否启动" class="headerlink" title="查看指定端口是否启动"></a>查看指定端口是否启动</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看2181端口</span></span><br><span class="line">netstat -tnpl | grep 2181</span><br></pre></td></tr></table></figure><h3 id="查看版本（验证是否安装成功）"><a href="#查看版本（验证是否安装成功）" class="headerlink" title="查看版本（验证是否安装成功）"></a>查看版本（验证是否安装成功）</h3><blockquote><ul><li><p>flume查看版本</p><p><code>flume-ng version</code></p></li><li><p>java查看版本</p><p><code>javac</code> 和 <code>java -version</code></p></li></ul></blockquote><h2 id="如何启动zookeeper集群"><a href="#如何启动zookeeper集群" class="headerlink" title="如何启动zookeeper集群"></a>如何启动zookeeper集群</h2><ol><li><p>【 第一步 】三台服务器上都执行如下指令，启动ZooKeeper集群</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/zookeeper/bin</span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure></li><li><p>【 第二步 】三台服务器上都执行如下指令，查看ZooKeeper的2181端口是否启动：netstat -tnpl|grep 2181<br>出现如下图所示后，说明ZooKeeper端口号启动成功,如下图所示。 </p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看2181端口 2181是zookeeper的端口</span></span><br><span class="line">netstat -tnpl | grep 2181</span><br></pre></td></tr></table></figure></li><li><p>【 第三步 】三台服务器上都执行如下指令，查看本机ZooKeeper的状态：会有两台服务器的ZooKeeper状态显示为follower（跟随者状态），<br>有一台服务器ZooKeeper状态显示为leader（领导者状态），如下面两图所示：</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode基本配置</title>
      <link href="/2024/03/25/VSCode%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/03/25/VSCode%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode基本配置"><a href="#VSCode基本配置" class="headerlink" title="VSCode基本配置"></a>VSCode基本配置</h1><p>设置快捷键：<code>Ctrl + ,</code> </p><p>下载中文插件：<code>Chinese</code>，重启一下，如果没有，<code>Ctrl + Shift + P</code>，搜索：<code>Display Language</code></p><p>主题推荐：<code>Solarized Dark</code>，快捷键：<code>Ctrl + K Ctrl + T</code></p><p>设置代码字体推荐：<code>&quot;JetBrains Mono&quot;</code> 或者 <code>Consolas</code></p><p>字体官网：<a href="https://www.jetbrains.com/zh-cn/lp/mono/">JetBrains Mono官网</a>  安装字体</p><p>字体大小：设置中搜索 <code>zoom</code>这样就可以使用 <code>Ctrl + 鼠标滚轮</code></p><p>文件资源管理快捷键：<code>Ctrl + B</code></p><p>活动栏右击可以隐藏，如果再想打开看，可以在查看——外观——显示活动栏</p><p>右边的小型预览也可以隐藏：在设置里面搜索<code>mini</code>勾选上<code>minimap: Autohide</code></p><p>重启后**<u>默认是打开上次</u>**编辑的文件，可以关闭到默认打开，设置中搜索<code>restor</code>,找到<code>Restor Windows</code> 把 all 改成 none，意思是打开软件的时候是一个空的文件</p><p>配置默认打开的 设置里搜索<code>startup</code> 可以改成 <code>welcomePage</code>,也可以设置为 <code>none</code> 就是一个空的</p><p>打开之前编辑过的文件 <code>Ctrl + R</code> 然后找文件夹</p><p>清理多余的空行并在原来的基础上加一行：设置中搜索<code>newline</code></p>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2 Book B</title>
      <link href="/2024/03/20/Vue2-Book-B/"/>
      <url>/2024/03/20/Vue2-Book-B/</url>
      
        <content type="html"><![CDATA[<h1 id="4-Vue中的Ajax"><a href="#4-Vue中的Ajax" class="headerlink" title="4.Vue中的Ajax"></a>4.Vue中的Ajax</h1><h2 id="4-1-Vue脚手架配置代理"><a href="#4-1-Vue脚手架配置代理" class="headerlink" title="4.1. Vue脚手架配置代理"></a>4.1. Vue脚手架配置代理</h2><blockquote><p>本案例需要下载axios库：<code>npm install axios</code></p></blockquote><p><code>vue.config.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">pages</span>: &#123;</span><br><span class="line">        <span class="attr">index</span>: &#123;</span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;src/main.js&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lintOnSave</span>:<span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 开启代理服务器（方式一）</span></span><br><span class="line">    <span class="comment">// devServer: &#123;</span></span><br><span class="line">    <span class="comment">//     proxy:&#x27;http://localhost:5000&#x27;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启代理服务器（方式二）</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;/jojo&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/jojo&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">                <span class="comment">// ws: true, //用于支持websocket,默认值为true</span></span><br><span class="line">                <span class="comment">// changeOrigin: true //用于控制请求头中的host值,默认值为true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&#x27;/atguigu&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,</span><br><span class="line">                <span class="attr">pathRewrite</span>:&#123;<span class="string">&#x27;^/atguigu&#x27;</span>:<span class="string">&#x27;&#x27;</span>&#125;,</span><br><span class="line">                <span class="comment">// ws: true, //用于支持websocket,默认值为true</span></span><br><span class="line">                <span class="comment">// changeOrigin: true //用于控制请求头中的host值,默认值为true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;button @click=&quot;getStudents&quot;&gt;获取学生信息&lt;/button&gt;&lt;br/&gt;</span><br><span class="line">        &lt;button @click=&quot;getCars&quot;&gt;获取汽车信息&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &#x27;axios&#x27;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">getStudents()&#123;</span><br><span class="line">axios.get(&#x27;http://localhost:8080/jojo/students&#x27;).then(</span><br><span class="line">response =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求成功了&#x27;,response.data)</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;,</span><br><span class="line">            getCars()&#123;</span><br><span class="line">axios.get(&#x27;http://localhost:8080/atguigu/cars&#x27;).then(</span><br><span class="line">response =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求成功了&#x27;,response.data)</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求失败了&#x27;,error.message)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/axios.png" alt="axios"></p><p><strong>总结：</strong></p><p>vue脚手架配置代理服务器：</p><ul><li><p>方法一：在<code>vue.config.js</code>中添加如下配置：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端即可</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （&#x3D;&#x3D;优先匹配前端资源&#x3D;&#x3D;）</li></ol></li><li><p>方法二：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123; <span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123; <span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">// changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理</li><li>缺点：配置略微繁琐，请求资源时必须加前缀</li></ol></li></ul><h2 id="4-2-GitHub用户搜索案例"><a href="#4-2-GitHub用户搜索案例" class="headerlink" title="4.2. GitHub用户搜索案例"></a>4.2. GitHub用户搜索案例</h2><p><code>public/index.html</code>:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对IE浏览器的特殊配置，含义是让IE浏览器以最高渲染级别渲染页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启移动端的理想端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置页签图标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入bootstrap样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;css/bootstrap.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Search/&gt;</span><br><span class="line">&lt;List/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Search from &#x27;./components/Search.vue&#x27;</span><br><span class="line">import List from &#x27;./components/List.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Search,List&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Search.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;section class=&quot;jumbotron&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;/h3&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; placeholder=&quot;enter the name you search&quot; v-model=&quot;keyWord&quot;/&gt;&amp;nbsp;</span><br><span class="line">            &lt;button @click=&quot;getUsers&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import axios from &#x27;axios&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Search&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                keyWord:&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getUsers()&#123;</span><br><span class="line">                //请求前更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:true,errMsg:&#x27;&#x27;,users:[],isFirst:false&#125;)</span><br><span class="line">axios.get(`https://api.github.com/search/users?q=$&#123;this.keyWord&#125;`).then(</span><br><span class="line">response =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求成功了&#x27;)</span><br><span class="line">//请求成功后更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:&#x27;&#x27;,users:response.data.items&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line">//请求后更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:error.message,users:[]&#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/List.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!-- 展示用户列表 --&gt;</span><br><span class="line">        &lt;div class=&quot;card&quot; v-show=&quot;info.users.length&quot; v-for=&quot;user in info.users&quot; :key=&quot;user.id&quot;&gt;</span><br><span class="line">            &lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;user.avatar_url&quot; style=&#x27;width: 100px&#x27;/&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;h4 class=&quot;card-title&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 展示欢迎词 --&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;info.isFirst&quot;&gt;欢迎使用！&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 展示加载中 --&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;info.isLoading&quot;&gt;加载中...&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 展示错误信息 --&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;info.errMsg&quot;&gt;&#123;&#123;errMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;List&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                info:&#123;</span><br><span class="line">                    isFirst:true,</span><br><span class="line">                    isLoading:false,</span><br><span class="line">                    errMsg:&#x27;&#x27;,</span><br><span class="line">                    users:[]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.$bus.$on(&#x27;updateListData&#x27;,(dataObj)=&gt;&#123;</span><br><span class="line">                //动态合并两个对象的属性</span><br><span class="line">                this.info = &#123;...this.info,...dataObj&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line">            this.$bus.$off(&#x27;updateListData&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .album &#123;</span><br><span class="line">min-height: 50rem; /* Can be removed; just added for demo purposes */</span><br><span class="line">padding-top: 3rem;</span><br><span class="line">padding-bottom: 3rem;</span><br><span class="line">background-color: #f7f7f7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &#123;</span><br><span class="line">float: left;</span><br><span class="line">width: 33.333%;</span><br><span class="line">padding: .75rem;</span><br><span class="line">margin-bottom: 2rem;</span><br><span class="line">border: 1px solid #efefef;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &gt; img &#123;</span><br><span class="line">margin-bottom: .75rem;</span><br><span class="line">border-radius: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card-text &#123;</span><br><span class="line">font-size: 85%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/GitHub%E7%94%A8%E6%88%B7%E6%90%9C%E7%B4%A2%E6%A1%88%E4%BE%8B.png" alt="GitHub用户搜索案例"></p><h2 id="4-3-vue-resource"><a href="#4-3-vue-resource" class="headerlink" title="4.3. vue-resource"></a>4.3. vue-resource</h2><blockquote><p>下载 vue-resource库：<code>npm i vue-resource</code></p></blockquote><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> vueResource <span class="keyword">from</span> <span class="string">&#x27;vue-resource&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">// 使用插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(vueResource)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Search/&gt;</span><br><span class="line">&lt;List/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Search from &#x27;./components/Search.vue&#x27;</span><br><span class="line">import List from &#x27;./components/List.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Search,List&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Search.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;section class=&quot;jumbotron&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;jumbotron-heading&quot;&gt;Search Github Users&lt;/h3&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; placeholder=&quot;enter the name you search&quot; v-model=&quot;keyWord&quot;/&gt;&amp;nbsp;</span><br><span class="line">            &lt;button @click=&quot;getUsers&quot;&gt;Search&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Search&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                keyWord:&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            getUsers()&#123;</span><br><span class="line">                //请求前更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:true,errMsg:&#x27;&#x27;,users:[],isFirst:false&#125;)</span><br><span class="line">this.$http.get(`https://api.github.com/search/users?q=$&#123;this.keyWord&#125;`).then(</span><br><span class="line">response =&gt; &#123;</span><br><span class="line">console.log(&#x27;请求成功了&#x27;)</span><br><span class="line">//请求成功后更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:&#x27;&#x27;,users:response.data.items&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">error =&gt; &#123;</span><br><span class="line">//请求后更新List的数据</span><br><span class="line">this.$bus.$emit(&#x27;updateListData&#x27;,&#123;isLoading:false,errMsg:error.message,users:[]&#125;)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/List.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;!-- 展示用户列表 --&gt;</span><br><span class="line">        &lt;div class=&quot;card&quot; v-show=&quot;info.users.length&quot; v-for=&quot;user in info.users&quot; :key=&quot;user.id&quot;&gt;</span><br><span class="line">            &lt;a :href=&quot;user.html_url&quot; target=&quot;_blank&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;user.avatar_url&quot; style=&#x27;width: 100px&#x27;/&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">            &lt;h4 class=&quot;card-title&quot;&gt;&#123;&#123;user.login&#125;&#125;&lt;/h4&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 展示欢迎词 --&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;info.isFirst&quot;&gt;欢迎使用！&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 展示加载中 --&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;info.isLoading&quot;&gt;加载中...&lt;/h1&gt;</span><br><span class="line">        &lt;!-- 展示错误信息 --&gt;</span><br><span class="line">        &lt;h1 v-show=&quot;info.errMsg&quot;&gt;&#123;&#123;errMsg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;List&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                info:&#123;</span><br><span class="line">                    isFirst:true,</span><br><span class="line">                    isLoading:false,</span><br><span class="line">                    errMsg:&#x27;&#x27;,</span><br><span class="line">                    users:[]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.$bus.$on(&#x27;updateListData&#x27;,(dataObj)=&gt;&#123;</span><br><span class="line">                this.info = &#123;...this.info,...dataObj&#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line">            this.$bus.$off(&#x27;updateListData&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .album &#123;</span><br><span class="line">min-height: 50rem; /* Can be removed; just added for demo purposes */</span><br><span class="line">padding-top: 3rem;</span><br><span class="line">padding-bottom: 3rem;</span><br><span class="line">background-color: #f7f7f7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &#123;</span><br><span class="line">float: left;</span><br><span class="line">width: 33.333%;</span><br><span class="line">padding: .75rem;</span><br><span class="line">margin-bottom: 2rem;</span><br><span class="line">border: 1px solid #efefef;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card &gt; img &#123;</span><br><span class="line">margin-bottom: .75rem;</span><br><span class="line">border-radius: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.card-text &#123;</span><br><span class="line">font-size: 85%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>vue项目常用的两个Ajax库：</p><ol><li>axios：通用的Ajax请求库，官方推荐，效率高</li><li>vue-resource：vue插件库，vue 1.x使用广泛，官方已不维护</li></ol><h2 id="4-4-slot插槽"><a href="#4-4-slot插槽" class="headerlink" title="4.4. slot插槽"></a>4.4. slot插槽</h2><h3 id="4-4-1-默认插槽"><a href="#4-4-1-默认插槽" class="headerlink" title="4.4.1. 默认插槽"></a>4.4.1. 默认插槽</h3><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Category title=&quot;美食&quot; &gt;</span><br><span class="line">&lt;img src=&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category title=&quot;游戏&quot; &gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category title=&quot;电影&quot;&gt;</span><br><span class="line">&lt;video controls src=&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Category from &#x27;./components/Category&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Category&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">games:[&#x27;植物大战僵尸&#x27;,&#x27;红色警戒&#x27;,&#x27;空洞骑士&#x27;,&#x27;王国&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.container&#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Category.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;category&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">&lt;slot&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Category&#x27;,</span><br><span class="line">props:[&#x27;title&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.category&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 300px;</span><br><span class="line">&#125;</span><br><span class="line">h3&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">video&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/%E9%BB%98%E8%AE%A4%E6%8F%92%E6%A7%BD.png" alt="默认插槽"></p><h3 id="4-4-2-具名插槽"><a href="#4-4-2-具名插槽" class="headerlink" title="4.4.2. 具名插槽"></a>4.4.2. 具名插槽</h3><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Category title=&quot;美食&quot; &gt;</span><br><span class="line">&lt;img slot=&quot;center&quot; src=&quot;https://s3.ax1x.com/2021/01/16/srJlq0.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;a slot=&quot;footer&quot; href=&quot;http://www.atguigu.com&quot;&gt;更多美食&lt;/a&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category title=&quot;游戏&quot; &gt;</span><br><span class="line">&lt;ul slot=&quot;center&quot;&gt;</span><br><span class="line">&lt;li v-for=&quot;(g,index) in games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;div class=&quot;foot&quot; slot=&quot;footer&quot;&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot;&gt;单机游戏&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot;&gt;网络游戏&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category title=&quot;电影&quot;&gt;</span><br><span class="line">&lt;video slot=&quot;center&quot; controls src=&quot;http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4&quot;&gt;&lt;/video&gt;</span><br><span class="line">&lt;template v-slot:footer&gt;</span><br><span class="line">&lt;div class=&quot;foot&quot;&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot;&gt;经典&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot;&gt;热门&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.atguigu.com&quot;&gt;推荐&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;h4&gt;欢迎前来观影&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Category from &#x27;./components/Category&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Category&#125;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">games:[&#x27;植物大战僵尸&#x27;,&#x27;红色警戒&#x27;,&#x27;空洞骑士&#x27;,&#x27;王国&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container,.foot&#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line">h4&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Category.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;category&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">&lt;slot name=&quot;center&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现1&lt;/slot&gt;</span><br><span class="line">        &lt;slot name=&quot;footer&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现2&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Category&#x27;,</span><br><span class="line">props:[&#x27;title&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.category&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 300px;</span><br><span class="line">&#125;</span><br><span class="line">h3&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">video&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/%E5%85%B7%E5%90%8D%E6%8F%92%E6%A7%BD.png" alt="具名插槽"></p><h3 id="4-4-3-作用域插槽"><a href="#4-4-3-作用域插槽" class="headerlink" title="4.4.3. 作用域插槽"></a>4.4.3. 作用域插槽</h3><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Category title=&quot;游戏&quot; &gt;</span><br><span class="line">&lt;template scope=&quot;taichi&quot;&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;(g,index) in taichi.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category title=&quot;游戏&quot; &gt;</span><br><span class="line">&lt;template scope=&quot;taichi&quot;&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li v-for=&quot;(g,index) in taichi.games&quot; :key=&quot;index&quot; style=&quot;color: red;&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category title=&quot;游戏&quot; &gt;</span><br><span class="line">&lt;template scope=&quot;taichi&quot;&gt;</span><br><span class="line">&lt;h4 v-for=&quot;(g,index) in taichi.games&quot; :key=&quot;index&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Category from &#x27;./components/Category&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Category&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.container,.foot&#123;</span><br><span class="line">display: flex;</span><br><span class="line">justify-content: space-around;</span><br><span class="line">&#125;</span><br><span class="line">h4&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Category.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;category&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;title&#125;&#125;分类&lt;/h3&gt;</span><br><span class="line">&lt;!-- 定义一个插槽（挖个坑，等着组件的使用者进行填充） --&gt;</span><br><span class="line">&lt;slot :games=&quot;games&quot;&gt;我是一些默认值，当使用者没有传递具体结构时，我会出现1&lt;/slot&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Category&#x27;,</span><br><span class="line">props:[&#x27;title&#x27;],</span><br><span class="line">        data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">games:[&#x27;植物大战僵尸&#x27;,&#x27;红色警戒&#x27;,&#x27;空洞骑士&#x27;,&#x27;王国&#x27;]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.category&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">width: 200px;</span><br><span class="line">height: 300px;</span><br><span class="line">&#125;</span><br><span class="line">h3&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line">video&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">img&#123;</span><br><span class="line">width: 100%;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="/%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD.png" alt="作用域插槽"></p><p><strong>总结：</strong></p><p>插槽：</p><ol><li><p>作用：让<strong>父组件</strong>可以向<strong>子组件</strong>&#x3D;&#x3D;指定位置插入html结构&#x3D;&#x3D;，也是一种组件间通信的方式，适用于&#x3D;&#x3D;父组件&#x3D;&#x3D; &gt; &#x3D;&#x3D;子组件&#x3D;&#x3D;</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot=&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;/div&gt;</span><br><span class="line">            &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">                &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：&#x3D;&#x3D;数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。&#x3D;&#x3D;（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope=&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#x27;Category&#x27;,</span><br><span class="line">                props:[&#x27;title&#x27;],</span><br><span class="line">                //数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#x27;红色警戒&#x27;,&#x27;穿越火线&#x27;,&#x27;劲舞团&#x27;,&#x27;超级玛丽&#x27;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h1 id="5-Vuex"><a href="#5-Vuex" class="headerlink" title="5.Vuex"></a>5.Vuex</h1><h2 id="5-1-理解Vuex"><a href="#5-1-理解Vuex" class="headerlink" title="5.1. 理解Vuex"></a>5.1. 理解Vuex</h2><h3 id="5-1-1-Vuex是什么"><a href="#5-1-1-Vuex是什么" class="headerlink" title="5.1.1. Vuex是什么"></a>5.1.1. Vuex是什么</h3><blockquote><ul><li>概念：专门在 Vue 中实现集中式状态（数据）管理的一个 **<u>Vue 插件</u>**，对 vue 应用中多个组件的共享状态进行集中式的管理（读&#x2F;写），也是一种组件间通信的方式，且适用于任意组件间通信</li><li><a href="https://github.com/vuejs/vuex">Vuex Github地址</a></li><li><a href="https://vuex.vuejs.org/zh/guide/">Vuex 官网</a></li></ul></blockquote><p><img src="/vuex.png" alt="vuex"></p><p><img src="/vuex1.png" alt="vuex1"></p><h3 id="5-1-2-什么时候使用Vuex"><a href="#5-1-2-什么时候使用Vuex" class="headerlink" title="5.1.2. 什么时候使用Vuex"></a>5.1.2. 什么时候使用Vuex</h3><blockquote><ol><li>多个组件依赖于同一状态</li><li>来自不同组件的行为需要变更同一状态</li></ol></blockquote><h3 id="5-1-3-Vuex工作原理图"><a href="#5-1-3-Vuex工作原理图" class="headerlink" title="5.1.3. Vuex工作原理图"></a>5.1.3. Vuex工作原理图</h3><p><img src="/vuex%E7%9A%84%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86.png" alt="vuex的工作原理"></p><h2 id="5-2-求和案例"><a href="#5-2-求和案例" class="headerlink" title="5.2. 求和案例"></a>5.2. 求和案例</h2><blockquote><p>下载<code>vuex</code>：<code>npm i vuex</code></p></blockquote><h3 id="5-2-1-使用纯vue编写"><a href="#5-2-1-使用纯vue编写" class="headerlink" title="5.2.1. 使用纯vue编写"></a>5.2.1. 使用纯vue编写</h3><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Count/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">ue</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Count from &#x27;./components/Count&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Count&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">sum:0 //当前的和</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">increment()&#123;</span><br><span class="line">this.sum += this.n</span><br><span class="line">&#125;,</span><br><span class="line">decrement()&#123;</span><br><span class="line">this.sum -= this.n</span><br><span class="line">&#125;,</span><br><span class="line">incrementOdd()&#123;</span><br><span class="line">if(this.sum % 2)&#123;</span><br><span class="line">this.sum += this.n</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">incrementWait()&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">this.sum += this.n</span><br><span class="line">&#125;,500)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果:</strong></p><p><img src="/%E6%B1%82%E5%92%8C%E6%A1%88%E4%BE%8B%E7%BA%AFvue.png" alt="求和案例纯vue"></p><h3 id="5-2-2-搭建Vuex环境"><a href="#5-2-2-搭建Vuex环境" class="headerlink" title="5.2.2. 搭建Vuex环境"></a>5.2.2. 搭建Vuex环境</h3><ol><li><p>下载 Vuex：<code>npm i vuex</code></p></li><li><p>创建<code>src/store/index.js</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作、处理业务逻辑</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">   actions,</span><br><span class="line">   mutations,</span><br><span class="line">   state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>src/main.js</code>中创建 vm 时传入<code>store</code>配置项：</p></li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-2-3-使用Vuex编写"><a href="#5-2-3-使用Vuex编写" class="headerlink" title="5.2.3. 使用Vuex编写"></a>5.2.3. 使用Vuex编写</h3><p><code>src/components/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;$store.state.sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">increment()&#123;</span><br><span class="line">this.$store.commit(&#x27;ADD&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">decrement()&#123;</span><br><span class="line">this.$store.commit(&#x27;SUBTRACT&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">incrementOdd()&#123;</span><br><span class="line">this.$store.dispatch(&#x27;addOdd&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">incrementWait()&#123;</span><br><span class="line">this.$store.dispatch(&#x27;addWait&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/store/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addOdd被调用了&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addWait被调用了&quot;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SUBTRACT</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>Vuex的基本使用：</p><ol><li><p>初始化数据<code>state</code>，配置<code>actions</code>、<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line"><span class="title function_">jia</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line"><span class="title function_">JIA</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.<span class="property">sum</span> += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   <span class="attr">sum</span>:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch(&#39;action中的方法名&#39;,数据)</code> 或 <code>$store.commit(&#39;mutations中的方法名&#39;,数据)</code></p></li></ol><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过<code>actions</code>，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote><h2 id="5-3-getters配置项"><a href="#5-3-getters配置项" class="headerlink" title="5.3. getters配置项"></a>5.3. getters配置项</h2><p><code>src/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;$store.state.sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;当前求和的10倍为：&#123;&#123;$store.getters.bigSum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">increment()&#123;</span><br><span class="line">this.$store.commit(&#x27;ADD&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">decrement()&#123;</span><br><span class="line">this.$store.commit(&#x27;SUBTRACT&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">incrementOdd()&#123;</span><br><span class="line">this.$store.dispatch(&#x27;addOdd&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">incrementWait()&#123;</span><br><span class="line">this.$store.dispatch(&#x27;addWait&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/store/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addOdd被调用了&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addWait被调用了&quot;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SUBTRACT</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span> <span class="comment">//当前的和</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备getters对象——用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%B1%82%E5%92%8C%E6%A1%88%E4%BE%8Bgetters%E9%85%8D%E7%BD%AE%E9%A1%B9.png" alt="求和案例getters配置项"></p><p><strong>总结：</strong></p><p><code>getters</code>配置项的使用：</p><ol><li><p>概念：当<code>state</code>中的数据需要经过加工后再使用时，可以使用<code>getters</code>加工</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line"><span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">...</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h2 id="5-4-四个map方法的使用"><a href="#5-4-四个map方法的使用" class="headerlink" title="5.4. 四个map方法的使用"></a>5.4. 四个map方法的使用</h2><h3 id="5-4-1-mapState与mapGetters"><a href="#5-4-1-mapState与mapGetters" class="headerlink" title="5.4.1. mapState与mapGetters"></a>5.4.1. mapState与mapGetters</h3><p><code>src/store/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addOdd被调用了&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addWait被调用了&quot;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SUBTRACT</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备getters对象——用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/components/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;当前求和的10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;我是&#123;&#123;name&#125;&#125;，我在&#123;&#123;school&#125;&#125;学习&lt;/h3&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState,mapGetters&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">increment()&#123;</span><br><span class="line">this.$store.commit(&#x27;ADD&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">decrement()&#123;</span><br><span class="line">this.$store.commit(&#x27;SUBTRACT&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">incrementOdd()&#123;</span><br><span class="line">this.$store.dispatch(&#x27;addOdd&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">incrementWait()&#123;</span><br><span class="line">this.$store.dispatch(&#x27;addWait&#x27;,this.n)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">// 借助mapState生成计算属性（数组写法）</span><br><span class="line">// ...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;name&#x27;]),</span><br><span class="line">// 借助mapState生成计算属性（对象写法）</span><br><span class="line">...mapState(&#123;sum:&#x27;sum&#x27;,school:&#x27;school&#x27;,name:&#x27;name&#x27;&#125;),</span><br><span class="line"></span><br><span class="line">...mapGetters([&#x27;bigSum&#x27;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/mapState.png" alt="mapState"></p><p><strong>总结：</strong></p><ol><li><p>mapState方法：用于帮助我们映射<code>state</code>中的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...<span class="title function_">mapState</span>(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>mapGetters方法：用于帮助我们映射<code>getters</code>中的数据</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-4-2-mapActions与mapMutations"><a href="#5-4-2-mapActions与mapMutations" class="headerlink" title="5.4.2. mapActions与mapMutations"></a>5.4.2. mapActions与mapMutations</h3><p><code>src/components/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;当前求和的10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;我是&#123;&#123;name&#125;&#125;，我在&#123;&#123;school&#125;&#125;学习&lt;/h3&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">// 借助mapActions生成：increment、decrement（对象形式）</span><br><span class="line">...mapMutations(&#123;increment:&#x27;ADD&#x27;,decrement:&#x27;SUBTRACT&#x27;&#125;),</span><br><span class="line"></span><br><span class="line">// 借助mapActions生成：incrementOdd、incrementWait（对象形式）</span><br><span class="line">...mapActions(&#123;incrementOdd:&#x27;addOdd&#x27;,incrementWait:&#x27;addWait&#x27;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">// 借助mapState生成计算属性（数组写法）</span><br><span class="line">// ...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;name&#x27;]),</span><br><span class="line">// 借助mapState生成计算属性（对象写法）</span><br><span class="line">...mapState(&#123;sum:&#x27;sum&#x27;,school:&#x27;school&#x27;,name:&#x27;name&#x27;&#125;),</span><br><span class="line"></span><br><span class="line">...mapGetters([&#x27;bigSum&#x27;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li><p>mapActions方法：用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...<span class="title function_">mapActions</span>([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapMutations方法：用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...<span class="title function_">mapMutations</span>([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：<code>mapActions</code>与<code>mapMutations</code>使用时，若需要传递参数，则需要在模板中绑定事件时传递好参数，否则参数是事件对象</p></blockquote><h2 id="5-5-多组件共享数据"><a href="#5-5-多组件共享数据" class="headerlink" title="5.5. 多组件共享数据"></a>5.5. 多组件共享数据</h2><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;container&quot;&gt;</span><br><span class="line">&lt;Count/&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;Person/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Count from &#x27;./components/Count&#x27;</span><br><span class="line">import Person from &#x27;./components/Person&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Count,Person&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/store/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addOdd被调用了&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">            context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addWait被调用了&quot;</span>)</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">&#125;,<span class="number">500</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> += value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">SUBTRACT</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">        state.<span class="property">sum</span> -= value</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="title function_">ADD_PERSON</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的ADD_PERSON被调用了&#x27;</span>)</span><br><span class="line">state.<span class="property">personList</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    <span class="attr">sum</span>:<span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span><br><span class="line">    <span class="attr">school</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    <span class="attr">personList</span>:[</span><br><span class="line">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//准备getters对象——用于将state中的数据进行加工</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    state,</span><br><span class="line">    getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/components/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;当前求和的10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;我是&#123;&#123;name&#125;&#125;，我在&#123;&#123;school&#125;&#125;学习&lt;/h3&gt;</span><br><span class="line">&lt;h3 style=&quot;color:red&quot;&gt;Person组件的总人数是：&#123;&#123;personList.length&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">...mapMutations(&#123;increment:&#x27;ADD&#x27;,decrement:&#x27;SUBTRACT&#x27;&#125;),</span><br><span class="line">...mapActions(&#123;incrementOdd:&#x27;addOdd&#x27;,incrementWait:&#x27;addWait&#x27;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">...mapState([&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;name&#x27;,&#x27;personList&#x27;]),,</span><br><span class="line">...mapGetters([&#x27;bigSum&#x27;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Person.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;人员列表&lt;/h1&gt;</span><br><span class="line">&lt;h3 style=&quot;color:red&quot;&gt;Count组件求和为：&#123;&#123;sum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;p in personList&quot; :key=&quot;p.id&quot;&gt;&#123;&#123;p.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Person&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">personList()&#123;</span><br><span class="line">return this.$store.state.personList</span><br><span class="line">&#125;,</span><br><span class="line">sum()&#123;</span><br><span class="line">return this.$store.state.sum</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const personObj = &#123;id:nanoid(),name:this.name&#125;</span><br><span class="line">this.$store.commit(&#x27;ADD_PERSON&#x27;,personObj)</span><br><span class="line">this.name = &#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E5%A4%9A%E7%BB%84%E4%BB%B6%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE.png" alt="多组件共享数据"></p><h2 id="5-6-模块化-命名空间"><a href="#5-6-模块化-命名空间" class="headerlink" title="5.6. 模块化+命名空间"></a>5.6. 模块化+命名空间</h2><p><code>src/store/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引入count</span></span><br><span class="line"><span class="keyword">import</span> countOptions <span class="keyword">from</span> <span class="string">&#x27;./count&#x27;</span></span><br><span class="line"><span class="comment">//引入person</span></span><br><span class="line"><span class="keyword">import</span> personOptions <span class="keyword">from</span> <span class="string">&#x27;./person&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line">   </span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="attr">countAbout</span>:countOptions,</span><br><span class="line">        <span class="attr">personAbout</span>:personOptions,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/store/count.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">addOdd</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addOdd被调用了&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span>(context.<span class="property">state</span>.<span class="property">sum</span> % <span class="number">2</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">addWait</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;actions中的addWait被调用了&quot;</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD&#x27;</span>,value)</span><br><span class="line">            &#125;,<span class="number">500</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">ADD</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> += value</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">SUBTRACT</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            state.<span class="property">sum</span> -= value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">sum</span>:<span class="number">0</span>, <span class="comment">//当前的和</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span><br><span class="line">        <span class="attr">school</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/store/person.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; nanoid &#125; <span class="keyword">from</span> <span class="string">&quot;nanoid&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">namespaced</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">actions</span>:&#123;</span><br><span class="line">        <span class="title function_">addPersonWang</span>(<span class="params">context,value</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(value.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;王&#x27;</span>) === <span class="number">0</span>)&#123;</span><br><span class="line">                context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>,value)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;添加的人必须姓王！&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">addPersonServer</span>(<span class="params">context</span>)&#123;</span><br><span class="line">            axios.<span class="title function_">get</span>(<span class="string">&#x27;http://api.uixsj.cn/hitokoto/get?type=social&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">                <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">                    context.<span class="title function_">commit</span>(<span class="string">&#x27;ADD_PERSON&#x27;</span>,&#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),<span class="attr">name</span>:response.<span class="property">data</span>&#125;)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">alert</span>(error.<span class="property">message</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mutations</span>:&#123;</span><br><span class="line">        <span class="title function_">ADD_PERSON</span>(<span class="params">state,value</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mutations中的ADD_PERSON被调用了&#x27;</span>)</span><br><span class="line">            state.<span class="property">personList</span>.<span class="title function_">unshift</span>(value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state</span>:&#123;</span><br><span class="line">        <span class="attr">personList</span>:[</span><br><span class="line">            &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;</span><br><span class="line">        <span class="title function_">firstPersonName</span>(<span class="params">state</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> state.<span class="property">personList</span>[<span class="number">0</span>].<span class="property">name</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/components/Count.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;当前求和的10倍为：&#123;&#123;bigSum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;我是&#123;&#123;name&#125;&#125;，我在&#123;&#123;school&#125;&#125;学习&lt;/h3&gt;</span><br><span class="line">&lt;h3 style=&quot;color:red&quot;&gt;Person组件的总人数是：&#123;&#123;personList.length&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;select v-model.number=&quot;n&quot;&gt;</span><br><span class="line">&lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;button @click=&quot;increment(n)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;decrement(n)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementOdd(n)&quot;&gt;当前求和为奇数再加&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;incrementWait(n)&quot;&gt;等一等再加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState,mapGetters,mapMutations,mapActions&#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Count&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">n:1, //用户选择的数字</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">...mapMutations(&#x27;countAbout&#x27;,&#123;increment:&#x27;ADD&#x27;,decrement:&#x27;SUBTRACT&#x27;&#125;),</span><br><span class="line">...mapActions(&#x27;countAbout&#x27;,&#123;incrementOdd:&#x27;addOdd&#x27;,incrementWait:&#x27;addWait&#x27;&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">...mapState(&#x27;countAbout&#x27;,[&#x27;sum&#x27;,&#x27;school&#x27;,&#x27;name&#x27;]),</span><br><span class="line">...mapGetters(&#x27;countAbout&#x27;,[&#x27;bigSum&#x27;]),</span><br><span class="line">...mapState(&#x27;personAbout&#x27;,[&#x27;personList&#x27;])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">button&#123;</span><br><span class="line">margin-left: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Person.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;人员列表&lt;/h1&gt;</span><br><span class="line">&lt;h3 style=&quot;color:red&quot;&gt;Count组件求和为：&#123;&#123;sum&#125;&#125;&lt;/h3&gt;</span><br><span class="line">        &lt;h3&gt;列表中第一个人的名字是：&#123;&#123;firstPersonName&#125;&#125;&lt;/h3&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; placeholder=&quot;请输入名字&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">&lt;button @click=&quot;add&quot;&gt;添加&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;addWang&quot;&gt;添加一个姓王的人&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;addPerson&quot;&gt;随机添加一个人&lt;/button&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for=&quot;p in personList&quot; :key=&quot;p.id&quot;&gt;&#123;&#123;p.name&#125;&#125;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Person&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">computed:&#123;</span><br><span class="line">personList()&#123;</span><br><span class="line">return this.$store.state.personAbout.personList</span><br><span class="line">&#125;,</span><br><span class="line">sum()&#123;</span><br><span class="line">return this.$store.state.countAbout.sum</span><br><span class="line">&#125;,</span><br><span class="line">            firstPersonName()&#123;</span><br><span class="line">                return this.$store.getters[&#x27;personAbout/firstPersonName&#x27;]</span><br><span class="line">            &#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">add()&#123;</span><br><span class="line">const personObj = &#123;id:nanoid(),name:this.name&#125;</span><br><span class="line">this.$store.commit(&#x27;personAbout/ADD_PERSON&#x27;,personObj)</span><br><span class="line">this.name = &#x27;&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">            addWang()&#123;</span><br><span class="line">                const personObj = &#123;id:nanoid(),name:this.name&#125;</span><br><span class="line">this.$store.dispatch(&#x27;personAbout/addPersonWang&#x27;,personObj)</span><br><span class="line">this.name = &#x27;&#x27;   </span><br><span class="line">            &#125;,</span><br><span class="line">            addPerson()&#123;</span><br><span class="line">                this.$store.dispatch(&#x27;personAbout/addPersonServer&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%A8%A1%E5%9D%97%E5%8C%96.png" alt="模块化"></p><p><strong>总结：</strong></p><p>模块化+命名空间：</p><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确</p></li><li><p>修改<code>store.js</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line"><span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line"><span class="attr">state</span>:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">    <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">    <span class="attr">actions</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">bigSum</span>(<span class="params">state</span>)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.<span class="property">sum</span> * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  <span class="attr">namespaced</span>:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  <span class="attr">state</span>:&#123; ... &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123; ... &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取<code>state</code>数据：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">personAbout</span>.<span class="property">list</span></span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...<span class="title function_">mapState</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取<code>getters</code>数据：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...<span class="title function_">mapGetters</span>(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用<code>dispatch</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...<span class="title function_">mapActions</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用<code>commit</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...<span class="title function_">mapMutations</span>(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h1 id="6-Vue-Router路由管理"><a href="#6-Vue-Router路由管理" class="headerlink" title="6.Vue Router路由管理"></a>6.Vue Router路由管理</h1><h2 id="6-1-相关理解"><a href="#6-1-相关理解" class="headerlink" title="6.1 相关理解"></a>6.1 相关理解</h2><h3 id="6-1-1-vue-router的理解"><a href="#6-1-1-vue-router的理解" class="headerlink" title="6.1.1 vue-router的理解"></a>6.1.1 vue-router的理解</h3><blockquote><ul><li>vue 的一个插件库，专门用来实现&#x3D;&#x3D;SPA 应用&#x3D;&#x3D;</li></ul></blockquote><h3 id="6-1-2-对SPA应用的理解"><a href="#6-1-2-对SPA应用的理解" class="headerlink" title="6.1.2 对SPA应用的理解"></a>6.1.2 对SPA应用的理解</h3><blockquote><ol><li>单页 Web 应用（single page web application，SPA）</li><li>整个应用&#x3D;&#x3D;只有一个完整的页面&#x3D;&#x3D;</li><li>点击页面中的导航链接&#x3D;&#x3D;不会刷新&#x3D;&#x3D;页面，只会做页面的&#x3D;&#x3D;局部更新&#x3D;&#x3D;</li><li>数据需要通过ajax请求获取</li></ol></blockquote><p><img src="/SPA.png" alt="SPA"></p><h3 id="6-1-3-路由的理解"><a href="#6-1-3-路由的理解" class="headerlink" title="6.1.3 路由的理解"></a>6.1.3 路由的理解</h3><ol><li>什么是路由?<ol><li>一个路由就是一组映射关系（key - value）</li><li>key 为路径，value 可能是 function 或 componen</li></ol></li><li>路由分类<ol><li>后端路由：<ol><li>理解：value 是 function，用于处理客户端提交的请求</li><li>工作过程：&#x3D;&#x3D;服务器接收到一个请求时，根据请求路径找到匹配的函数来处理请求，返回响应数据&#x3D;&#x3D;</li></ol></li><li>前端路由：<ol><li>理解：value 是 component，用于展示页面内容</li><li>工作过程：&#x3D;&#x3D;当浏览器的路径改变时，对应的组件就会显示&#x3D;&#x3D;</li></ol></li></ol></li></ol><h2 id="6-2-基本路由"><a href="#6-2-基本路由" class="headerlink" title="6.2 基本路由"></a>6.2 基本路由</h2><blockquote><p>下载<code>vue-router</code>：<code>npm i vue-router</code></p></blockquote><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    router</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot;&gt;&lt;h2&gt;Vue Router Demo&lt;/h2&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;row&quot;&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-2 col-xs-offset-2&quot;&gt;</span><br><span class="line">&lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">&lt;!-- 原始html中我们使用a标签实现页面跳转 --&gt;</span><br><span class="line">&lt;!-- &lt;a class=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Vue中借助router-link标签实现路由的切换 --&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt; About</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;</span><br><span class="line">                        Home</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">&lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Home.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是Home组件的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Home&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/About.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是About组件的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;About&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li><p>安装<code>vue-router</code>，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（<code>active-class</code>可配置高亮样式）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位：<code>&lt;router-view&gt;&lt;/router-view&gt;</code></p></li></ol><h2 id="6-3-几个注意事项"><a href="#6-3-几个注意事项" class="headerlink" title="6.3. 几个注意事项"></a>6.3. 几个注意事项</h2><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到</li></ol><p><strong>修改上一节案例</strong>:</p><p><code>src/pages/Home.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是Home组件的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Home&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/About.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;我是About组件的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;About&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/components/Banner.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;page-header&quot;&gt;&lt;h2&gt;Vue Router Demo&lt;/h2&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Banner&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;Banner/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;row&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-2 col-xs-offset-2&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;list-group&quot;&gt;</span><br><span class="line">    &lt;!-- 原始html中我们使用a标签实现页面跳转 --&gt;</span><br><span class="line">    &lt;!-- &lt;a class=&quot;list-group-item active&quot; href=&quot;./about.html&quot;&gt;About&lt;/a&gt;</span><br><span class="line">    &lt;a class=&quot;list-group-item&quot; href=&quot;./home.html&quot;&gt;Home&lt;/a&gt; --&gt;</span><br><span class="line">&lt;!-- Vue中借助router-link标签实现路由的切换 --&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;</span><br><span class="line">                        About</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home&quot;&gt;</span><br><span class="line">                        Home</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-6&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel&quot;&gt;</span><br><span class="line">&lt;div class=&quot;panel-body&quot;&gt;</span><br><span class="line">&lt;!-- 指定组件的呈现位置 --&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Banner from &#x27;./components/Banner.vue&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;Banner&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-4-多级路由"><a href="#6-4-多级路由" class="headerlink" title="6.4. 多级路由"></a>6.4. 多级路由</h2><p><code>src/pages/Home.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Home组件内容&lt;/h2&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt; </span><br><span class="line">                        News</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;router-link class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/message&quot;&gt;</span><br><span class="line">                        Message</span><br><span class="line">    &lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Home&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/News.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;news001&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news002&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news003&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/Message.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;/message1&quot;&gt;message001&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;/message2&quot;&gt;message002&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;a href=&quot;/message/3&quot;&gt;message003&lt;/a&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E5%A4%9A%E7%BA%A7%E8%B7%AF%E7%94%B1.png" alt="多级路由"></p><p><strong>总结：</strong></p><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>, <span class="comment">//此处一定不要写：/message</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：<code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</code></p></li></ol><h2 id="6-5-路由的query参数"><a href="#6-5-路由的query参数" class="headerlink" title="6.5. 路由的query参数"></a>6.5. 路由的query参数</h2><p><code>src/router.index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/pages/Detail.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;消息编号：&#123;&#123;$route.query.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息标题：&#123;&#123;$route.query.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Detail&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/Message.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">                &lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">                &lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;</span><br><span class="line">                    path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">                    query:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                messageList:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/query.png" alt="query"></p><p><strong>总结：</strong></p><ol><li><p>传递参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;</span><br><span class="line">path:&#x27;/home/message/detail&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">id:666,</span><br><span class="line">        title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">query</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-6-命名路由"><a href="#6-6-命名路由" class="headerlink" title="6.6. 命名路由"></a>6.6. 命名路由</h2><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="comment">//name配置项为路由命名</span></span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/pages/Message.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">                &lt;!-- 跳转路由并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">                &lt;!-- &lt;router-link :to=&quot;`/home/message/detail?id=$&#123;m.id&#125;&amp;title=$&#123;m.title&#125;`&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 跳转路由并携带query参数，to的对象写法 --&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;</span><br><span class="line">                    //使用name进行跳转</span><br><span class="line">                    name:&#x27;xiangqing&#x27;,</span><br><span class="line">                    query:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                messageList:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>命名路由：</p><ol><li><p>作用：可以简化路由的跳转</p></li><li><p>如何使用：</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Demo</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Test</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Hello</span>,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to=&quot;/demo/test/welcome&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;hello&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;hello&#x27;,</span><br><span class="line">query:&#123;</span><br><span class="line">    id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="6-7-路由的params参数"><a href="#6-7-路由的params参数" class="headerlink" title="6.7. 路由的params参数"></a>6.7. 路由的params参数</h2><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,<span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/pages/Message.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">                &lt;!-- 跳转路由并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">                &lt;!-- &lt;router-link :to=&quot;`/home/message/detail/$&#123;m.id&#125;/$&#123;m.title&#125;`&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp; --&gt;</span><br><span class="line"></span><br><span class="line">                &lt;!-- 跳转路由并携带params参数，to的对象写法 --&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;</span><br><span class="line">                    name:&#x27;xiangqing&#x27;,</span><br><span class="line">                    params:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                messageList:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/Detail.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;消息编号：&#123;&#123;$route.params.id&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息标题：&#123;&#123;$route.params.title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Detail&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li><p>配置路由，声明接收<code>params</code>参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to=&quot;&#123;</span><br><span class="line">name:&#x27;xiangqing&#x27;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#x27;你好&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$route.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">$route.<span class="property">params</span>.<span class="property">title</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-8-路由的props配置"><a href="#6-8-路由的props配置" class="headerlink" title="6.8. 路由的props配置"></a>6.8. 路由的props配置</h2><p><code>src/pages/Message.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;</span><br><span class="line">                    name:&#x27;xiangqing&#x27;,</span><br><span class="line">                    params:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                messageList:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">                            <span class="comment">//props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件。</span></span><br><span class="line"><span class="comment">// props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给Detail组件。</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//props的第三种写法，值为函数</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.<span class="property">params</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:$route.<span class="property">params</span>.<span class="property">title</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/pages/Detail.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息标题：&#123;&#123;title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Detail&#x27;,</span><br><span class="line">        props:[&#x27;id&#x27;,&#x27;title&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li><p>作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line"><span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:route.<span class="property">query</span>.<span class="property">title</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="6-9-路由跳转的replace方法"><a href="#6-9-路由跳转的replace方法" class="headerlink" title="6.9. 路由跳转的replace方法"></a>6.9. 路由跳转的replace方法</h2><p><code>src/pages/Home.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Home组件内容&lt;/h2&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;router-link replace class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;router-link replace class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/message&quot;&gt;Message&lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Home&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">12345678910111213141516171819202122</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><ol><li>作用：&#x3D;&#x3D;控制路由跳转时操作浏览器历史记录的模式&#x3D;&#x3D;</li><li>浏览器的历史记录有两种写入方式：<code>push</code>和<code>replace</code>，其中<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code>方式</li><li>开启<code>replace</code>模式：<code>&lt;router-link replace ...&gt;News&lt;/router-link&gt;</code></li></ol></blockquote><h2 id="6-10-编程式路由导航"><a href="#6-10-编程式路由导航" class="headerlink" title="6.10. 编程式路由导航"></a>6.10. 编程式路由导航</h2><p><code>src/components/Banner.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;col-xs-offset-2 col-xs-8&quot;&gt;</span><br><span class="line">&lt;div class=&quot;page-header&quot;&gt;</span><br><span class="line">&lt;h2&gt;Vue Router Demo&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;back&quot;&gt;后退&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;forward&quot;&gt;前进&lt;/button&gt;</span><br><span class="line">&lt;button @click=&quot;test&quot;&gt;测试一下go&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Banner&#x27;,</span><br><span class="line">methods:&#123;</span><br><span class="line">back()&#123;</span><br><span class="line">this.$router.back()</span><br><span class="line">&#125;,</span><br><span class="line">forward()&#123;</span><br><span class="line">this.$router.forward()</span><br><span class="line">&#125;,</span><br><span class="line">test()&#123;</span><br><span class="line">this.$router.go(3)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/Message.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;m in messageList&quot; :key=&quot;m.id&quot;&gt;</span><br><span class="line">                &lt;router-link :to=&quot;&#123;</span><br><span class="line">                    name:&#x27;xiangqing&#x27;,</span><br><span class="line">                    params:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;&quot;&gt;</span><br><span class="line">                    &#123;&#123;m.title&#125;&#125;</span><br><span class="line">                &lt;/router-link&gt;</span><br><span class="line">                &lt;button @click=&quot;showPush(m)&quot;&gt;push查看&lt;/button&gt;</span><br><span class="line">                &lt;button @click=&quot;showReplace(m)&quot;&gt;replace查看&lt;/button&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                messageList:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;,title:&#x27;消息001&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;,title:&#x27;消息002&#x27;&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;,title:&#x27;消息003&#x27;&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            showPush(m)&#123;</span><br><span class="line">                this.$router.push(&#123;</span><br><span class="line">                    name:&#x27;xiangqing&#x27;,</span><br><span class="line">                    query:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            showReplace(m)&#123;</span><br><span class="line">                this.$router.replace(&#123;</span><br><span class="line">                    name:&#x27;xiangqing&#x27;,</span><br><span class="line">                    query:&#123;</span><br><span class="line">                        id:m.id,</span><br><span class="line">                        title:m.title</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露一个路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/pages/Detail.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;消息编号：&#123;&#123;id&#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;消息标题：&#123;&#123;title&#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Detail&#x27;,</span><br><span class="line">        props:[&#x27;id&#x27;,&#x27;title&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E7%BC%96%E7%A8%8B%E5%BC%8F%E8%B7%AF%E7%94%B1%E5%AF%BC%E8%88%AA.png" alt="编程式路由导航"></p><p><strong>总结：</strong></p><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">replace</span>(&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123;</span><br><span class="line">        <span class="attr">id</span>:xxx,</span><br><span class="line">        <span class="attr">title</span>:xxx</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">forward</span>() <span class="comment">//前进</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">back</span>() <span class="comment">//后退</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">go</span>() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-11-缓存路由组件"><a href="#6-11-缓存路由组件" class="headerlink" title="6.11. 缓存路由组件"></a>6.11. 缓存路由组件</h2><p><code>src/pages/News.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;news001 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news002 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news003 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/pages/Home.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;Home组件内容&lt;/h2&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;ul class=&quot;nav nav-tabs&quot;&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;router-link replace class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;router-link replace class=&quot;list-group-item&quot; active-class=&quot;active&quot; to=&quot;/home/message&quot;&gt;Message&lt;/router-link&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;keep-alive include=&quot;News&quot;&gt;</span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Home&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E7%BC%93%E5%AD%98%E8%B7%AF%E7%94%B1%E7%BB%84%E4%BB%B6.png" alt="缓存路由组件"></p><p><strong>总结：</strong></p><ol><li><p>作用：&#x3D;&#x3D;让不展示的路由组件保持挂载，不被销毁&#x3D;&#x3D;</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//缓存一个路由组件</span><br><span class="line">&lt;keep-alive include=&quot;News&quot;&gt; //include中写想要缓存的组件名，不写表示全部缓存</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">//缓存多个路由组件</span><br><span class="line">&lt;keep-alive :include=&quot;[&#x27;News&#x27;,&#x27;Message&#x27;]&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-12-activated和deactivated"><a href="#6-12-activated和deactivated" class="headerlink" title="6.12. activated和deactivated"></a>6.12. activated和deactivated</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">`src/pages/News.vue`:</span><br><span class="line">1</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li :style=&quot;&#123;opacity&#125;&quot;&gt;欢迎学习vue&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news001 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news002 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;news003 &lt;input type=&quot;text&quot;&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;News&#x27;,</span><br><span class="line">        data()&#123;</span><br><span class="line">            return&#123;</span><br><span class="line">                opacity:1</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        activated()&#123;</span><br><span class="line">            console.log(&#x27;News组件被激活了&#x27;)</span><br><span class="line">            this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">                this.opacity -= 0.01</span><br><span class="line">                if(this.opacity &lt;= 0) this.opacity = 1</span><br><span class="line">            &#125;,16)</span><br><span class="line">        &#125;,</span><br><span class="line">        deactivated()&#123;</span><br><span class="line">            console.log(&#x27;News组件失活了&#x27;)</span><br><span class="line">            clearInterval(this.timer)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/activated%E5%92%8Cdeactivated.png" alt="activated和deactivated"></p><p><strong>总结：</strong></p><ol><li><code>activated</code>和<code>deactivated</code>是路由组件所独有的两个钩子，用于捕获路由组件的激活状态</li><li>具体使用：<ol><li><code>activated</code>路由组件被激活时触发</li><li><code>deactivated</code>路由组件失活时触发</li></ol></li></ol><h2 id="6-13-路由守卫"><a href="#6-13-路由守卫" class="headerlink" title="6.13. 路由守卫"></a>6.13. 路由守卫</h2><h3 id="6-13-1-全局路由守卫"><a href="#6-13-1-全局路由守卫" class="headerlink" title="6.13.1. 全局路由守卫"></a>6.13.1. 全局路由守卫</h3><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;guanyv&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>&#125;,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">                            <span class="attr">meta</span>:&#123;<span class="attr">isAuth</span>:<span class="literal">true</span>,<span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>&#125;,</span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局前置路由守卫————初始化的时候、每次路由切换之前被调用</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;前置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>)===<span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;学校名不对，无权限查看！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="6-13-2-独享路由守卫"><a href="#6-13-2-独享路由守卫" class="headerlink" title="6.13.2. 独享路由守卫"></a>6.13.2. 独享路由守卫</h3><p><code>src/router/index.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//该文件专门用于创建整个应用的路由器</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"><span class="comment">//引入组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/News&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Message</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Message&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Detail</span> <span class="keyword">from</span> <span class="string">&#x27;../pages/Detail&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个路由器</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;guanyv&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">About</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;关于&#x27;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span>,</span><br><span class="line">            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;主页&#x27;</span>&#125;,</span><br><span class="line">            <span class="attr">children</span>:[</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;新闻&#x27;</span>&#125;,</span><br><span class="line">                    <span class="comment">//独享守卫，特定路由切换之后被调用</span></span><br><span class="line">                    <span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;独享路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">                            <span class="title function_">next</span>()</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">name</span>:<span class="string">&#x27;xiaoxi&#x27;</span>,</span><br><span class="line">                    <span class="attr">path</span>:<span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">                    <span class="attr">component</span>:<span class="title class_">Message</span>,</span><br><span class="line">                    <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;消息&#x27;</span>&#125;,</span><br><span class="line">                    <span class="attr">children</span>:[</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="attr">name</span>:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">                            <span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line">                            <span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line">                            <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;详情&#x27;</span>&#125;,</span><br><span class="line"><span class="title function_">props</span>(<span class="params">$route</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">id</span>:$route.<span class="property">query</span>.<span class="property">id</span>,</span><br><span class="line"><span class="attr">title</span>:$route.<span class="property">query</span>.<span class="property">title</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置路由守卫————初始化的时候被调用、每次路由切换之后被调用</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;后置路由守卫&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> || <span class="string">&#x27;硅谷系统&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出路由器</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h3 id="6-13-3-组件内路由守卫"><a href="#6-13-3-组件内路由守卫" class="headerlink" title="6.13.3. 组件内路由守卫"></a>6.13.3. 组件内路由守卫</h3><p><code>src/pages/About.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;h2&gt;我是About组件的内容&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;About&#x27;,</span><br><span class="line">        //通过路由规则，离开该组件时被调用</span><br><span class="line">        beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">            console.log(&#x27;About--beforeRouteEnter&#x27;,to,from)</span><br><span class="line">            if(localStorage.getItem(&#x27;school&#x27;)===&#x27;atguigu&#x27;)&#123;</span><br><span class="line">                next()</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                alert(&#x27;学校名不对，无权限查看！&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        //通过路由规则，离开该组件时被调用</span><br><span class="line">        beforeRouteLeave (to, from, next) &#123;</span><br><span class="line">            console.log(&#x27;About--beforeRouteLeave&#x27;,to,from)</span><br><span class="line">            next()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><p><strong>总结：</strong></p><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">isAuth</span>)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="title function_">next</span>() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.<span class="property">meta</span>.<span class="property">title</span>)&#123; </span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = to.<span class="property">meta</span>.<span class="property">title</span> <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="params">to,<span class="keyword">from</span>,next</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteEnter</span> (to, <span class="keyword">from</span>, next) &#123;...&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line"><span class="title function_">beforeRouteLeave</span> (to, <span class="keyword">from</span>, next) &#123;...&#125;,</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-14-路由器的两种工作模式"><a href="#6-14-路由器的两种工作模式" class="headerlink" title="6.14. 路由器的两种工作模式"></a>6.14. 路由器的两种工作模式</h2><blockquote><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器</li><li>hash模式：<ol><li>地址中永远带着#号，不美观</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法</li><li>兼容性较好</li></ol></li><li>history模式：<ol><li>地址干净，美观</li><li>兼容性和hash模式相比略差</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题</li></ol></li></ol></blockquote><h1 id="7-Vue-UI组件库"><a href="#7-Vue-UI组件库" class="headerlink" title="7.Vue UI组件库"></a>7.Vue UI组件库</h1><h2 id="7-1-常用UI组件库"><a href="#7-1-常用UI组件库" class="headerlink" title="7.1 常用UI组件库"></a>7.1 常用UI组件库</h2><h3 id="7-1-1-移动端常用UI组件库"><a href="#7-1-1-移动端常用UI组件库" class="headerlink" title="7.1.1 移动端常用UI组件库"></a>7.1.1 移动端常用UI组件库</h3><blockquote><ol><li><a href="https://youzan.github.io/vant">Vant</a></li><li><a href="https://didi.github.io/cube-ui">Cube UI</a></li><li><a href="http://mint-ui.github.io/">Mint UI</a></li></ol></blockquote><h3 id="7-1-2-PC端常用UI组件库"><a href="#7-1-2-PC端常用UI组件库" class="headerlink" title="7.1.2. PC端常用UI组件库"></a>7.1.2. PC端常用UI组件库</h3><blockquote><ol><li><a href="https://element.eleme.cn/">Element UI</a></li><li><a href="https://www.iviewui.com/">IView UI</a></li></ol></blockquote><h2 id="7-2-element-ui基本使用"><a href="#7-2-element-ui基本使用" class="headerlink" title="7.2. element-ui基本使用"></a>7.2. element-ui基本使用</h2><ol><li><p>安装 element-ui：<code>npm i element-ui -S</code></p></li><li><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//引入ElementUI组件库</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="comment">//引入ElementUI全部样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="comment">//使用ElementUI</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;el-row&gt;</span><br><span class="line">&lt;el-button icon=&quot;el-icon-search&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;primary&quot; icon=&quot;el-icon-edit&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;success&quot; icon=&quot;el-icon-check&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;info&quot; icon=&quot;el-icon-message&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;warning&quot; icon=&quot;el-icon-star-off&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;el-button type=&quot;danger&quot; icon=&quot;el-icon-delete&quot; circle&gt;&lt;/el-button&gt;</span><br><span class="line">&lt;/el-row&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-3-element-ui按需引入"><a href="#7-3-element-ui按需引入" class="headerlink" title="7.3. element-ui按需引入"></a>7.3. element-ui按需引入</h2><ol><li><p>安装 babel-plugin-component：<code>npm install babel-plugin-component -D</code></p></li><li><p>修改 <code>babel-config-js</code>：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">presets</span>: [</span><br><span class="line">    <span class="string">&#x27;@vue/cli-plugin-babel/preset&#x27;</span>,</span><br><span class="line">    [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123; <span class="string">&quot;modules&quot;</span>: <span class="literal">false</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">&quot;component&quot;</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="string">&quot;libraryName&quot;</span>: <span class="string">&quot;element-ui&quot;</span>,</span><br><span class="line">        <span class="string">&quot;styleLibraryName&quot;</span>: <span class="string">&quot;theme-chalk&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//按需引入</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Button</span>,<span class="title class_">Row</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Button</span>.<span class="property">name</span>, <span class="title class_">Button</span>);</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">component</span>(<span class="title class_">Row</span>.<span class="property">name</span>, <span class="title class_">Row</span>);</span><br><span class="line"><span class="comment">/* 或写为</span></span><br><span class="line"><span class="comment"> * Vue.use(Button)</span></span><br><span class="line"><span class="comment"> * Vue.use(Row)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h1 id="8-Vue-3"><a href="#8-Vue-3" class="headerlink" title="8.Vue 3"></a>8.Vue 3</h1><p>完结撒花~</p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2 Book A</title>
      <link href="/2024/03/12/Vue2-Book-A/"/>
      <url>/2024/03/12/Vue2-Book-A/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Vue核心"><a href="#1-Vue核心" class="headerlink" title="1.Vue核心"></a>1.Vue核心</h1><h2 id="1-1-Vue简介"><a href="#1-1-Vue简介" class="headerlink" title="1.1. Vue简介"></a>1.1. Vue简介</h2><h3 id="1-1-1-官网"><a href="#1-1-1-官网" class="headerlink" title="1.1.1. 官网"></a>1.1.1. 官网</h3><ul><li><a href="https://vuejs.org/">英文官网</a></li><li><a href="https://cn.vuejs.org/">中文官网</a></li></ul><h3 id="1-1-2-介绍与描述"><a href="#1-1-2-介绍与描述" class="headerlink" title="1.1.2. 介绍与描述"></a>1.1.2. 介绍与描述</h3><ul><li>动态构建用户界面的&#x3D;&#x3D;渐进式&#x3D;&#x3D;JavaScript框架</li><li>作者：尤雨溪</li></ul><h3 id="1-1-3-Vue的特点"><a href="#1-1-3-Vue的特点" class="headerlink" title="1.1.3. Vue的特点"></a>1.1.3. Vue的特点</h3><ol><li>遵循&#x3D;&#x3D;MVVM&#x3D;&#x3D;模式</li><li>编码简洁，体积小，运行效率高，适合移动&#x2F;PC端开发</li><li>它本身只关注UI，可以引入其它<a href="https://so.csdn.net/so/search?q=%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93&spm=1001.2101.3001.7020">第三方库</a>开发项目</li></ol><h3 id="1-1-4-与其他JS框架的关联"><a href="#1-1-4-与其他JS框架的关联" class="headerlink" title="1.1.4.与其他JS框架的关联"></a>1.1.4.与其他JS框架的关联</h3><ol><li>借鉴 Angular 的&#x3D;&#x3D;模板&#x3D;&#x3D;和&#x3D;&#x3D;数据绑定&#x3D;&#x3D;技术</li><li>借鉴 React 的&#x3D;&#x3D;组件化&#x3D;&#x3D;和&#x3D;&#x3D;虚拟DOM&#x3D;&#x3D;技术</li></ol><h3 id="1-1-5-Vue周边库"><a href="#1-1-5-Vue周边库" class="headerlink" title="1.1.5. Vue周边库"></a>1.1.5. Vue周边库</h3><blockquote><ul><li>vue-cli：vue脚手架</li><li>vue-resource</li><li>axios</li><li>vue-router：路由</li><li>vuex：状态管理</li><li>element-ui：基于vue的UI组件库（PC端）</li></ul></blockquote><h2 id="1-2-初识Vue"><a href="#1-2-初识Vue" class="headerlink" title="1.2. 初识Vue"></a>1.2. 初识Vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>初识vue<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入Vue --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 准备好一个容器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello！&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">// 阻止vue在启动时生成生产提示</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, <span class="comment">//el用于指定当前Vue实例为哪个容器服务，值通常为css选择器字符串</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; <span class="comment">//data用于存储数据，数据共el所指定的容器去使用</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效果:</strong></p><p><img src="/hello.png"></p><p><strong>注意：</strong></p><ol><li>想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象</li><li>root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法</li><li>root容器里的代码被称为&#x3D;&#x3D;Vue模板&#x3D;&#x3D;</li><li>Vue实例与容器是&#x3D;&#x3D;一一对应&#x3D;&#x3D;的</li><li>真实开发中只有一个Vue实例，并且会配合着组件一起使用</li><li><code>&#123;&#123;xxx&#125;&#125;</code>中的xxx要写&#x3D;&#x3D;js表达式&#x3D;&#x3D;，且xxx可以自动读取到data中的所有属性</li><li>一旦data中的数据发生变化，那么模板中用到该数据的地方也会自动更新</li></ol><h2 id="1-3-模板语法"><a href="#1-3-模板语法" class="headerlink" title="1.3. 模板语法"></a>1.3. 模板语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue模板语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>插值语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>指令语法<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>快去看新番！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>快去看新番！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">url</span>:<span class="string">&#x27;https://www.bilibili.com/&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>效果:</strong></p><p><img src="/%E6%8C%87%E4%BB%A4%E8%AF%AD%E6%B3%95.png" alt="指令语法"></p><p><strong>总结：</strong></p><p>Vue模板语法包括两大类：</p><ol><li>插值语法：<ul><li>功能：用于&#x3D;&#x3D;解析标签体内容&#x3D;&#x3D;</li><li>写法：<code>&#123;&#123;xxx&#125;&#125;</code>，xxx是js表达式，且可以直接读取到data中的所有区域</li></ul></li><li>指令语法：<ul><li>功能：用于&#x3D;&#x3D;解析标签&#x3D;&#x3D;（包括：标签属性、标签体内容、绑定事件…）</li><li>举例：<code>&lt;a v-bind:href=&quot;xxx&quot;&gt;</code>或简写为<code>&lt;a :href=&quot;xxx&quot;&gt;</code>，xxx同样要写js表达式，且可以直接读取到data中的所有属性</li><li>备注：Vue中有很多的指令，且形式都是<code>v-???</code>，此处我们只是拿<code>v-bind</code>举个例子</li></ul></li></ol><h2 id="1-4-数据绑定"><a href="#1-4-数据绑定" class="headerlink" title="1.4. 数据绑定"></a>1.4. 数据绑定</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据绑定<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;name&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.png" alt="数据绑定"></p><p><strong>总结：</strong></p><ul><li>Vue中有2种数据绑定的方式：<ol><li>单向绑定（<code>v-bind</code>）：数据只能从data流向页面</li><li>双向绑定（<code>v-model</code>）：数据不仅能从data流向页面，还可以从页面流向data</li></ol></li><li>备注：<ol><li>双向绑定一般都应用在&#x3D;&#x3D;表单类元素&#x3D;&#x3D;上（如：<code>&lt;input&gt;</code>、<code>&lt;select&gt;</code>、<code>&lt;textarea&gt;</code>等）</li><li><code>v-model:value</code>可以简写为<code>v-model</code>，因为<code>v-model</code>默认收集的就是value值</li></ol></li></ul><h2 id="1-5-el与data的两种写法"><a href="#1-5-el与data的两种写法" class="headerlink" title="1.5. el与data的两种写法"></a>1.5. el与data的两种写法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>el与data的两种写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//el的两种写法：</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     // el:&#x27;#root&#x27;, //第一种写法</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         name:&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// vm.$mount(&#x27;#root&#x27;)//第二种写法</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//data的两种写法：</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data的第一种写法：对象式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// data:&#123;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//     name:&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//data的第二种写法：函数式</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>el有2种写法：</p><ol><li>创建Vue实例对象的时候配置el属性</li><li>先创建Vue实例，随后再通过<code>vm.$mount(&#39;#root&#39;)</code>指定el的值</li></ol><p>data有2种写法：</p><ol><li>对象式</li><li>函数式</li></ol><ul><li>如何选择：目前哪种写法都可以，以后学到组件时，data必须使用函数，否则会报错</li></ul><blockquote><p>由Vue管理的函数，一定不要写箭头函数，否则this就不再是Vue实例了</p></blockquote><h2 id="1-6-MVVM模型"><a href="#1-6-MVVM模型" class="headerlink" title="1.6. MVVM模型"></a>1.6. MVVM模型</h2><p><img src="/MVVM.png" alt="MVVM"></p><ul><li>MVVM模型：<ul><li>M：模型（Model），data中的数据</li><li>V：视图（View），模板代码</li><li>VM：视图模型（ViewModel），Vue实例</li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>mvvm<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>名称：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>战队：&#123;&#123;rank&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>测试：&#123;&#123;$options&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;uzi&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">rank</span>:<span class="string">&#x27;RNG&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果</strong>:</p><p><img src="/MVVM%E6%B5%8B%E8%AF%95.png" alt="MVVM测试"></p><p><strong>总结：</strong></p><ul><li>data中所有的属性，最后都出现在了vm身上</li><li>vm身上所有的属性 及 Vue原型身上所有的属性，在Vue模板中都可以直接使用</li></ul><h2 id="1-7-Vue中的数据代理"><a href="#1-7-Vue中的数据代理" class="headerlink" title="1.7. Vue中的数据代理"></a>1.7. Vue中的数据代理</h2><p><img src="/%E6%95%B0%E6%8D%AE%E4%BB%A3%E7%90%86.png" alt="数据代理"></p><p><strong>总结：</strong></p><blockquote><ol><li>Vue中的数据代理&#x3D;&#x3D;通过vm对象&#x3D;&#x3D;来代理data对象中属性的操作（读&#x2F;写）</li><li>Vue中数据代理的好处：更加方便的操作data中的数据</li><li>基本原理：<ul><li>通过<code>object.defineProperty()</code>把data对象中所有属性添加到vm上。</li><li>为每一个添加到vm上的属性，都指定一个getter&#x2F;setter。</li><li>在getter&#x2F;setter内部去操作（读&#x2F;写）data中对应的属性。</li></ul></li></ol></blockquote><h2 id="1-8-事件处理"><a href="#1-8-事件处理" class="headerlink" title="1.8. 事件处理"></a>1.8. 事件处理</h2><h3 id="1-8-1-事件的基本用法"><a href="#1-8-1-事件的基本用法" class="headerlink" title="1.8.1. 事件的基本用法"></a>1.8.1. 事件的基本用法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>事件的基本用法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>hello,&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showInfo1&quot;</span>&gt;</span>点我提示信息1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo2($event,66)&quot;</span>&gt;</span>点我提示信息2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showInfo1</span>(<span class="params">event</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(event)</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">showInfo2</span>(<span class="params">evnet,num</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(event,num)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果:</strong></p><p><img src="/%E4%BA%8B%E4%BB%B6%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.png" alt="事件的基本用法"></p><p><strong>总结：</strong></p><ol><li>使用<code>v-on:xxx</code>或<code>@xxx</code>绑定事件，其中xxx是事件名</li><li>事件的回调需要配置在methods对象中，最终会在vm上</li><li>methods中配置的函数，&#x3D;&#x3D;不要用箭头函数！&#x3D;&#x3D;否则this就不是vm了</li><li>methods中配置的函数，都是被Vue所管理的函数，this的指向是vm或组件实例对象</li><li><code>@click=&quot;demo</code>和<code>@click=&quot;demo($event)&quot;</code>效果一致，但后者可以传参</li></ol><h3 id="1-8-2-事件修饰符"><a href="#1-8-2-事件修饰符" class="headerlink" title="1.8.2. 事件修饰符"></a>1.8.2. 事件修饰符</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>事件修饰符<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.demo1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.list</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css"><span class="attribute">background-color</span>: peru;</span></span><br><span class="line"><span class="language-css"><span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件只触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 使用事件的捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span> @<span class="attr">click.capture</span>=<span class="string">&quot;showMsg(1)&quot;</span>&gt;</span></span><br><span class="line">div1</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;showMsg(2)&quot;</span>&gt;</span></span><br><span class="line">div2</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有event.target是当前操作的元素时才触发事件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span> @<span class="attr">click.self</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span>点我提示信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 事件的默认行为立即执行，无需等待事件回调执行完毕 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> @<span class="attr">wheel.passive</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;同学你好！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showMsg</span>(<span class="params">msg</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;#&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;累坏了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6.png" alt="事件修饰符"></p><p><strong>总结：</strong></p><p>Vue中的事件修饰符：</p><ol><li>prevent：阻止默认事件（常用）</li><li>stop：阻止事件冒泡（常用）</li><li>once：事件只触发一次（常用）</li><li>capture：使用事件的捕获模式</li><li>self：只有<code>event.target</code>是当前操作的元素时才触发事件</li><li>passive：事件的默认行为立即执行，无需等待事件回调执行完毕</li></ol><blockquote><p>修饰符可以连续写，比如可以这么用：<code>@click.prevent.stop=&quot;showInfo&quot;</code></p></blockquote><h3 id="1-8-3-键盘事件"><a href="#1-8-3-键盘事件" class="headerlink" title="1.8.3. 键盘事件"></a>1.8.3. 键盘事件</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>键盘事件<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>欢迎来到&#123;&#123;name&#125;&#125;学习<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按下回车提示输入&quot;</span> @<span class="attr">keydown.enter</span>=<span class="string">&quot;showInfo&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showInfo</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6.png" alt="键盘事件"></p><p><strong>总结：</strong></p><blockquote><p>键盘上的每个按键都有自己的名称和编码，例如：Enter（13）。而Vue还对一些常用按键起了别名方便使用</p></blockquote><p>Vue中常用的按键别名：</p><blockquote><ul><li>回车：enter</li><li>删除：delete (捕获“删除”和“退格”键)</li><li>退出：esc</li><li>空格：space</li><li>换行：tab (特殊，必须配合keydown去使用)</li><li>上：up</li><li>下：down</li><li>左：left</li><li>右：right</li></ul></blockquote><p><strong>注意：</strong></p><ol><li>系统修饰键（用法特殊）：ctrl、alt、shift、meta<ul><li>配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发</li><li>配合keydown使用：正常触发事件</li></ul></li><li>可以使用keyCode去指定具体的按键，比如：<code>@keydown.13=&quot;showInfo&quot;</code>，但&#x3D;&#x3D;不推荐这样使用&#x3D;&#x3D;</li><li><code>Vue.config.keyCodes.自定义键名 = 键码</code>，可以自定义按键别名</li></ol><h2 id="1-9-计算属性"><a href="#1-9-计算属性" class="headerlink" title="1.9. 计算属性"></a>1.9. 计算属性</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>计算属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        姓：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;firstName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;lastName&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        姓名：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">firstName</span>:<span class="string">&#x27;张&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lastName</span>:<span class="string">&#x27;三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fullName</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27;-&#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> arr = value.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**效果: **</p><p><img src="/%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7.png" alt="计算属性"></p><p><strong>总结：</strong></p><ul><li>计算属性：<ul><li>定义：要用的属性不存在，需要通过已有属性计算得来。</li><li>原理：底层借助了<code>Objcet.defineproperty()</code>方法提供的getter和setter。</li><li>get函数什么时候执行？<ol><li>初次读取时会执行一次</li><li>当依赖的数据发生改变时会被再次调用</li></ol></li><li>&#x3D;&#x3D;优势&#x3D;&#x3D;：与methods实现相比，内部有缓存机制（复用），效率更高，调试方便</li></ul></li><li>备注：<ul><li>计算属性最终会出现在vm上，直接读取使用即可</li><li>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生改变</li><li>如果计算属性确定不考虑修改，可以使用计算属性的简写形式</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;, </span><br><span class="line">    data:&#123; </span><br><span class="line">        firstName:&#x27;张&#x27;,</span><br><span class="line">        lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">    fullName()&#123;</span><br><span class="line">    return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="1-10-监视属性"><a href="#1-10-监视属性" class="headerlink" title="1.10. 监视属性"></a>1.10. 监视属性</h2><h3 id="1-10-1-监视属性基本用法"><a href="#1-10-1-监视属性基本用法" class="headerlink" title="1.10.1. 监视属性基本用法"></a>1.10.1. 监视属性基本用法</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>监视属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>今天天气好&#123;&#123;info&#125;&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeWeather&quot;</span>&gt;</span>点击切换天气<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span> </span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">//handler什么时候调用？当isHot发生改变时</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**效果: **</p><p><img src="/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7.png" alt="监视属性"></p><p><strong>总结：</strong></p><p>监视属性watch：</p><ol><li>当被监视的属性变化时，回调函数自动调用，进行相关操作</li><li>监视的属性必须存在，才能进行监视</li><li>监视有两种写法：<ol><li>创建Vue时传入watch配置</li><li>通过<code>vm.$watch</code>监视</li></ol></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.$watch(&#x27;isHot&#x27;,&#123;</span><br><span class="line">immediate:true,</span><br><span class="line">handler(newValue,oldValue)&#123;</span><br><span class="line">console.log(&#x27;isHot被修改了&#x27;,newValue,oldValue)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-10-2-深度监视"><a href="#1-10-2-深度监视" class="headerlink" title="1.10.2. 深度监视"></a>1.10.2. 深度监视</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>深度监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>a的值是:&#123;&#123;numbers.a&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.a++&quot;</span>&gt;</span>点我让a+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>b的值是:&#123;&#123;numbers.b&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;numbers.b++&quot;</span>&gt;</span>点我让b+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>, </span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123; </span></span><br><span class="line"><span class="language-javascript">                <span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">a</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">b</span>:<span class="number">1</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//监视多级结构中所有属性的变化</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">numbers</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">deep</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;numbers改变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//监视多级结构中某个属性的变化</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/* &#x27;numbers.a&#x27;:&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">handler()&#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">console.log(&#x27;a被改变了&#x27;)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">&#125; */</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果:</strong> </p><p><img src="/%E6%B7%B1%E5%BA%A6%E7%9B%91%E8%A7%86.png" alt="深度监视"></p><p><strong>总结：</strong></p><blockquote><ul><li>深度监视：<ol><li>Vue中的watch默认不监测对象内部值的改变（一层）</li><li>在watch中配置<code>deep:true</code>可以监测对象内部值的改变（多层）</li></ol></li><li>备注：<ol><li>Vue自身可以监测对象内部值的改变，但Vue提供的watch&#x3D;&#x3D;默认不可以&#x3D;&#x3D;</li><li>使用watch时根据监视数据的具体结构，决定是否采用深度监视</li></ol></li></ul></blockquote><h3 id="1-10-3-监视属性简写"><a href="#1-10-3-监视属性简写" class="headerlink" title="1.10.3. 监视属性简写"></a>1.10.3. 监视属性简写</h3><p>如果监视属性除了handler没有其他配置项的话，可以进行简写。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>:<span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">info</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">isHot</span> ? <span class="string">&#x27;炎热&#x27;</span> : <span class="string">&#x27;凉爽&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">isHot</span> = !<span class="variable language_">this</span>.<span class="property">isHot</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">isHot</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;, </span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">isHot</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//正常写法</span></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">handler</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//简写</span></span></span><br><span class="line"><span class="language-javascript">    vm.$watch(<span class="string">&#x27;isHot&#x27;</span>,<span class="keyword">function</span>(<span class="params">newValue,oldValue</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;isHot被修改了&#x27;</span>,newValue,oldValue,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-10-4-监听属性-VS-计算属性"><a href="#1-10-4-监听属性-VS-计算属性" class="headerlink" title="1.10.4. 监听属性 VS 计算属性"></a>1.10.4. 监听属性 VS 计算属性</h3><p><img src="/%E7%9B%91%E8%A7%86%E5%B1%9E%E6%80%A7%E7%AE%80%E5%86%99.png" alt="监听属性简写"></p><p><strong>使用计算属性：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    el:&#x27;#root&#x27;, </span><br><span class="line">    data:&#123; </span><br><span class="line">        firstName:&#x27;张&#x27;,</span><br><span class="line">        lastName:&#x27;三&#x27;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line">    fullName()&#123;</span><br><span class="line">    return this.firstName + &#x27;-&#x27; + this.lastName</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>使用监听属性：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">el:&#x27;#root&#x27;,</span><br><span class="line">data:&#123;</span><br><span class="line">firstName:&#x27;张&#x27;,</span><br><span class="line">lastName:&#x27;三&#x27;,</span><br><span class="line">fullName:&#x27;张-三&#x27;</span><br><span class="line">&#125;,</span><br><span class="line">watch:&#123;</span><br><span class="line">firstName(val)&#123;</span><br><span class="line">setTimeout(()=&gt;&#123;</span><br><span class="line">this.fullName = val + &#x27;-&#x27; + this.lastName</span><br><span class="line">&#125;,1000);</span><br><span class="line">&#125;,</span><br><span class="line">lastName(val)&#123;</span><br><span class="line">this.fullName = this.firstName + &#x27;-&#x27; + val</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">123456789101112131415161718</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><blockquote><ul><li>computed和watch之间的区别：<ul><li>computed能完成的功能，watch都可以完成</li><li>watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作</li></ul></li><li>两个重要的小原则：<ol><li>所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象</li><li>所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数等、Promise的回调函数），最好写成&#x3D;&#x3D;箭头函数&#x3D;&#x3D;，这样this的指向才是vm 或 组件实例对象。</li></ol></li></ul></blockquote><h2 id="1-11-绑定样式"><a href="#1-11-绑定样式" class="headerlink" title="1.11. 绑定样式"></a>1.11. 绑定样式</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.basic</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.happy</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> solid red;;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>, <span class="number">0.644</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">30deg</span>,yellow,pink,orange,yellow);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sad</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">4px</span> dashed <span class="built_in">rgb</span>(<span class="number">2</span>, <span class="number">197</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.normal</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.atguigu1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.atguigu2</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">text-shadow</span>:<span class="number">2px</span> <span class="number">2px</span> <span class="number">10px</span> red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.atguigu3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--字符串写法，适用于：样式的类名不确定，需要动态指定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;mood&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;changeMood&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--数组写法，适用于：要绑定的样式个数不确定、名字也不确定 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定class样式--对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;classObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定style样式--对象写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleObj&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 绑定style样式--数组写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;basic&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;styleArr&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">mood</span>:<span class="string">&#x27;normal&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classArr</span>:[<span class="string">&#x27;atguigu1&#x27;</span>,<span class="string">&#x27;atguigu2&#x27;</span>,<span class="string">&#x27;atguigu3&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">classObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">atguigu1</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">atguigu2</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObj</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">color</span>:<span class="string">&#x27;red&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleObj2</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">backgroundColor</span>:<span class="string">&#x27;orange&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">styleArr</span>:[</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">fontSize</span>: <span class="string">&#x27;40px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">color</span>:<span class="string">&#x27;blue&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">backgroundColor</span>:<span class="string">&#x27;gray&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">changeMood</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> arr = [<span class="string">&#x27;happy&#x27;</span>,<span class="string">&#x27;sad&#x27;</span>,<span class="string">&#x27;normal&#x27;</span>]</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> index = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">3</span>)</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">mood</span> = arr[index]</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果:</strong></p><p><img src="/%E6%A0%B7%E5%BC%8F%E7%BB%91%E5%AE%9A.png" alt="样式绑定"></p><p><strong>总结：</strong></p><ol><li>class样式：<ul><li>写法：<code>class=&quot;xxx&quot;</code>，xxx可以是字符串、对象、数组</li><li>字符串写法适用于：类名不确定，要动态获取</li><li>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定</li><li>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用</li></ul></li><li>style样式：<ul><li><code>:style=&quot;&#123;fontSize: xxx&#125;&quot;</code>其中xxx是动态值</li><li><code>:style=&quot;[a,b]&quot;</code>其中a、b是样式对象</li></ul></li></ol><h2 id="1-12-条件渲染"><a href="#1-12-条件渲染" class="headerlink" title="1.12. 条件渲染"></a>1.12. 条件渲染</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>条件渲染<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-show</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Hello,&#123;&#123;name&#125;&#125;!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;n === 1&quot;</span>&gt;</span>Angular<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;n === 2&quot;</span>&gt;</span>React<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;jojo&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%9D%A1%E4%BB%B6%E6%B8%B2%E6%9F%93.png" alt="条件渲染"></p><p><strong>总结：</strong></p><ol><li>v-if：<ul><li>写法：<ol><li><code>v-if=&quot;表达式&quot;</code></li><li><code>v-else-if=&quot;表达式&quot;</code></li><li><code>v-else</code></li></ol></li><li>适用于：切换频率较低的场景</li><li>特点：不展示的DOM元素直接被移除</li><li>注意：<code>v-if</code>可以和<code>v-else-if</code>、<code>v-else</code>一起使用，但要求结构不能被&#x3D;&#x3D;打断&#x3D;&#x3D;</li></ul></li><li>v-show：<ul><li>写法：<code>v-show=&quot;表达式&quot;</code></li><li>适用于：切换频率较高的场景</li><li>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</li></ul></li></ol><blockquote><p>使用<code>v-if</code>的时，元素可能无法获取到，而使用<code>v-show</code>一定可以获取到</p></blockquote><h2 id="1-13-列表渲染"><a href="#1-13-列表渲染" class="headerlink" title="1.13. 列表渲染"></a>1.13. 列表渲染</h2><h3 id="1-13-1-基本列表"><a href="#1-13-1-基本列表" class="headerlink" title="1.13.1. 基本列表"></a>1.13.1. 基本列表</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>基本列表<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表（遍历数组）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>汽车信息（遍历对象）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value,k) in car&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;k&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;k&#125;&#125;-&#123;&#123;value&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历字符串<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(char,index) in str&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;char&#125;&#125;-&#123;&#123;index&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>遍历指定次数<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(number,index) in 5&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;index&#125;&#125;-&#123;&#123;number&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">car</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;奥迪A8&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">price</span>:<span class="string">&#x27;70万&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">color</span>:<span class="string">&#x27;黑色&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">str</span>:<span class="string">&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E5%88%97%E8%A1%A8%E6%B8%B2%E6%9F%93.png" alt="列表渲染"></p><p><strong>总结：</strong></p><p><code>v-for</code>指令：</p><ol><li>用于展示列表数据</li><li>语法：<code>&lt;li v-for=&quot;(item, index) in xxx&quot; :key=&quot;yyy&quot;&gt;</code>，其中key可以是index，也可以是遍历对象的唯一标识</li><li>可遍历：数组、对象、字符串（用的少）、指定次数（用的少）</li></ol><h3 id="1-13-2-key的作用与原理"><a href="#1-13-2-key的作用与原理" class="headerlink" title="1.13.2. key的作用与原理"></a>1.13.2. key的作用与原理</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>key的原理<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;add&quot;</span>&gt;</span>添加老刘<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) in persons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125; - &#123;&#123;p.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;王五&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> p = &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;老刘&#x27;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">unshift</span>(p)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/key%E7%9A%84%E4%BD%9C%E7%94%A8%E4%B8%8E%E5%8E%9F%E7%90%86.png" alt=" key的作用与原理"></p><p><strong>原理:</strong> </p><p><img src="/index%E4%BD%9C%E4%B8%BAkey.png" alt="index作为key"></p><p><img src="/ID%E4%BD%9C%E4%B8%BAkey.png" alt="id作为key"></p><p><strong>面试题</strong>：<a href="https://so.csdn.net/so/search?q=react&spm=1001.2101.3001.7020">react</a>、vue中的key有什么作用？（key的内部原理）</p><ol><li>虚拟DOM中key的作用：key是虚拟DOM中&#x3D;&#x3D;对象的标识&#x3D;&#x3D;，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】，随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：</li><li>对比规则：<ol><li>旧虚拟DOM中找到了与新虚拟DOM相同的key：<ol><li>若虚拟DOM中内容没变, 直接使用之前的真实DOM</li><li>若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li></ol></li><li>旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到到页面</li></ol></li><li>用index作为key可能会引发的问题：<ol><li>若对数据进行逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实DOM更新 &#x3D;&#x3D;&gt; 界面效果没问题, 但效率低</li><li>若结构中还包含输入类的DOM：会产生错误DOM更新 &#x3D;&#x3D;&gt; 界面有问题</li></ol></li><li>开发中如何选择key?<ol><li>最好使用每条数据的唯一标识作为key，比如id、手机号、身份证号、学号等唯一值</li><li>如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅用于渲染列表，使用index作为key是没有问题的</li></ol></li></ol><h3 id="1-13-3-列表过滤"><a href="#1-13-3-列表过滤" class="headerlink" title="1.13.3. 列表过滤"></a>1.13.3. 列表过滤</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>列表过滤<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">20</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">filPersons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E5%88%97%E8%A1%A8%E8%BF%87%E6%BB%A4.png" alt="列表过滤"></p><h3 id="1-13-4-列表排序"><a href="#1-13-4-列表排序" class="headerlink" title="1.13.4. 列表排序"></a>1.13.4. 列表排序</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>人员列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入名字&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;keyWord&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 2&quot;</span>&gt;</span>年龄升序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 1&quot;</span>&gt;</span>年龄降序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sortType = 0&quot;</span>&gt;</span>原顺序<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(p,index) of filPersons&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;p.id&quot;</span>&gt;</span></span><br><span class="line">                &#123;&#123;p.name&#125;&#125;-&#123;&#123;p.age&#125;&#125;-&#123;&#123;p.sex&#125;&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">persons</span>:[</span></span><br><span class="line"><span class="language-javascript">                    &#123;<span class="attr">id</span>:<span class="string">&#x27;001&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;马冬梅&#x27;</span>,<span class="attr">age</span>:<span class="number">30</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;<span class="attr">id</span>:<span class="string">&#x27;002&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周冬雨&#x27;</span>,<span class="attr">age</span>:<span class="number">45</span>,<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;<span class="attr">id</span>:<span class="string">&#x27;003&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;周杰伦&#x27;</span>,<span class="attr">age</span>:<span class="number">21</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    &#123;<span class="attr">id</span>:<span class="string">&#x27;004&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;温兆伦&#x27;</span>,<span class="attr">age</span>:<span class="number">22</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">                ],</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">keyWord</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">sortType</span>:<span class="number">0</span>,<span class="comment">//0代表原顺序，1代表升序，3代表降序</span></span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">computed</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">filPersons</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">const</span> arr = <span class="variable language_">this</span>.<span class="property">persons</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">p</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> p.<span class="property">name</span>.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">keyWord</span>) !== -<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">                    &#125;)</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sortType</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                        arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">p1, p2</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">sortType</span> ===<span class="number">1</span> ? p2.<span class="property">age</span>-p1.<span class="property">age</span> : p1.<span class="property">age</span>-p2.<span class="property">age</span></span></span><br><span class="line"><span class="language-javascript">                        &#125;)</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> arr</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E4%BA%BA%E5%91%98%E5%88%97%E8%A1%A8.png" alt="人员列表"></p><h3 id="1-13-5-Vue数据监视"><a href="#1-13-5-Vue数据监视" class="headerlink" title="1.13.5. Vue数据监视"></a>1.13.5. Vue数据监视</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue数据监视<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>学生信息<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;student.age++&quot;</span>&gt;</span>年龄+1岁<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addSex&quot;</span>&gt;</span>添加性别属性，默认值：男<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addFriend&quot;</span>&gt;</span>在列表首位添加一个朋友<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateFirstFriendName&quot;</span>&gt;</span>修改第一个朋友的名字为：张三<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;addHobby&quot;</span>&gt;</span>添加一个爱好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;updateHobby&quot;</span>&gt;</span>修改第一个爱好为：开车<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;removeSmoke&quot;</span>&gt;</span>过滤掉爱好中的抽烟<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>姓名：&#123;&#123;student.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>年龄：&#123;&#123;student.age&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-if</span>=<span class="string">&quot;student.sex&quot;</span>&gt;</span>性别：&#123;&#123;student.sex&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>爱好：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(h,index) in student.hobby&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;h&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>朋友们：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(f,index) in student.friends&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">student</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;tom&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">hobby</span>:[<span class="string">&#x27;抽烟&#x27;</span>,<span class="string">&#x27;喝酒&#x27;</span>,<span class="string">&#x27;烫头&#x27;</span>],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">friends</span>:[</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">name</span>:<span class="string">&#x27;jerry&#x27;</span>,<span class="attr">age</span>:<span class="number">35</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">36</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addSex</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//Vue.set(this.student,&#x27;sex&#x27;,&#x27;男&#x27;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$set(<span class="variable language_">this</span>.<span class="property">student</span>,<span class="string">&#x27;sex&#x27;</span>,<span class="string">&#x27;男&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addFriend</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>.<span class="title function_">unshift</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;jack&#x27;</span>,<span class="attr">age</span>:<span class="number">70</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updateFirstFriendName</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">friends</span>[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&#x27;张三&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">addHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">push</span>(<span class="string">&#x27;学习&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updateHobby</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="string">&#x27;开车&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">removeSmoke</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span> = <span class="variable language_">this</span>.<span class="property">student</span>.<span class="property">hobby</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">h</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> h !== <span class="string">&#x27;抽烟&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%95%B0%E6%8D%AE%E7%9B%91%E8%A7%86.png" alt="数据监视"></p><p><strong>总结：</strong></p><p>Vue监视数据的原理：</p><ol><li><p>vue会监视data中所有层次的数据</p></li><li><p>如何监测对象中的数据？</p><p>通过setter实现监视，且要在<code>new Vue</code>时就传入要监测的数据</p><ol><li>对象中后追加的属性，Vue默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使用如下API：<ul><li><code>Vue.set(target,propertyName/index,value)</code></li><li><code>vm.$set(target,propertyName/index,value)</code></li></ul></li></ol></li><li><p>如何监测数组中的数据？</p><p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p><ol><li>调用原生对应的方法对数组进行更新</li><li>重新解析模板，进而更新页面</li></ol></li><li><p>在Vue修改数组中的某个元素一定要用如下方法：</p><ol><li>使用这些API：<code>push()</code>、<code>pop()</code>、<code>shift()</code>、<code>unshift()</code>、<code>splice()</code>、<code>sort()</code>、<code>reverse()</code></li><li><code>Vue.set()</code> 或 <code>vm.$set()</code></li></ol></li></ol><p><strong>特别注意</strong>：<code>Vue.set()</code> 和 <code>vm.$set()</code> 不能给vm 或 vm的根数据对象（data等） 添加属性</p><h2 id="1-14-收集表单数据"><a href="#1-14-收集表单数据" class="headerlink" title="1.14. 收集表单数据"></a>1.14. 收集表单数据</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>收集表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">账号：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;userInfo.account&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.password&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model.number</span>=<span class="string">&quot;userInfo.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">性别：</span><br><span class="line">男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">女<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">爱好：</span><br><span class="line">学习<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;study&quot;</span>&gt;</span></span><br><span class="line">打游戏<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;game&quot;</span>&gt;</span></span><br><span class="line">吃饭<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.hobby&quot;</span> <span class="attr">value</span>=<span class="string">&quot;eat&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">所属校区：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.city&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择校区<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;beijing&quot;</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shanghai&quot;</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;shenzhen&quot;</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;wuhan&quot;</span>&gt;</span>武汉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">其他信息：</span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model.lazy</span>=<span class="string">&quot;userInfo.other&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;userInfo.agree&quot;</span>&gt;</span>阅读并接受<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.atguigu.com&quot;</span>&gt;</span>《用户协议》<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">userInfo</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">password</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">age</span>:<span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">sex</span>:<span class="string">&#x27;female&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">hobby</span>:[],</span></span><br><span class="line"><span class="language-javascript"><span class="attr">city</span>:<span class="string">&#x27;beijing&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">other</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">agree</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">demo</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">userInfo</span>))</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%94%B6%E9%9B%86%E8%A1%A8%E5%8D%95%E6%95%B0%E6%8D%AE.png" alt="收集表单数据"></p><p><strong>总结：</strong></p><p>收集表单数据：</p><ul><li><p>若：<code>&lt;input type=&quot;text&quot;/&gt;</code>，则<code>v-model</code>收集的是value值，用户输入的内容就是value值</p></li><li><p>若：<code>&lt;input type=&quot;radio&quot;/&gt;</code>，则<code>v-model</code>收集的是value值，且要给标签配置value属性</p></li><li><p>若：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;checkbox&quot;/&gt;</span><br></pre></td></tr></table></figure><ul><li>没有配置value属性，那么收集的是checked属性（勾选 or 未勾选，是布尔值）</li><li>配置了value属性：<ul><li><code>v-model</code>的初始值是非数组，那么收集的就是checked（勾选 or 未勾选，是布尔值）</li><li><code>v-model</code>的初始值是数组，那么收集的就是value组成的数组</li></ul></li></ul></li></ul><p><code>v-model</code>的三个修饰符：</p><ol><li>lazy：失去焦点后再收集数据</li><li>number：输入字符串转为有效的数字</li><li>trim：输入首尾空格过滤</li></ol><h2 id="1-15-过滤器"><a href="#1-15-过滤器" class="headerlink" title="1.15. 过滤器"></a>1.15. 过滤器</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>过滤器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/dayjs/1.10.6/dayjs.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>时间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>当前时间戳：&#123;&#123;time&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span>&gt;</span>转换后时间：&#123;&#123;time | timeFormater()&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>转换后时间：&#123;&#123;time | timeFormater(&#x27;YYYY-MM-DD HH:mm:ss&#x27;)&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>截取年月日：&#123;&#123;time | timeFormater() | mySlice&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//全局过滤器</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">11</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">time</span>:<span class="number">1626750147900</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//局部过滤器</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">filters</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">timeFormater</span>(<span class="params">value, str=<span class="string">&quot;YYYY年MM月DD日 HH:mm:ss&quot;</span></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">return</span> <span class="title function_">dayjs</span>(value).<span class="title function_">format</span>(str)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%97%B6%E9%97%B4%E6%88%B3.png" alt="时间戳"></p><p><strong>总结：</strong></p><p>过滤器：</p><ul><li>定义：对要显示的数据进行特定格式化后再显示（适用于一些简单逻辑的处理）。</li><li>语法：<ol><li>注册过滤器：<code>Vue.filter(name,callback)</code> 或 <code>new Vue&#123;filters:&#123;&#125;&#125;</code></li><li>使用过滤器：<code>&#123;&#123; xxx | 过滤器名&#125;&#125;</code> 或 <code>v-bind:属性 = &quot;xxx | 过滤器名&quot;</code></li></ol></li><li>备注：<ol><li>过滤器可以接收额外参数，多个过滤器也可以串联</li><li>并没有改变原本的数据，而是产生新的对应的数据</li></ol></li></ul><h2 id="1-16-内置指令"><a href="#1-16-内置指令" class="headerlink" title="1.16. 内置指令"></a>1.16. 内置指令</h2><h3 id="1-16-1-v-text指令"><a href="#1-16-1-v-text指令" class="headerlink" title="1.16.1. v-text指令"></a>1.16.1. v-text指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-text指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>你好，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ul><li>之前学过的指令：<ul><li><code>v-bind</code>：单向绑定解析表达式，可简写为<code>:</code></li><li><code>v-model</code>：双向数据绑定</li><li><code>v-for</code>：遍历数组 &#x2F; 对象 &#x2F; 字符串</li><li><code>v-on</code>：绑定事件监听，可简写为<code>@</code></li><li><code>v-if</code>：条件渲染（动态控制节点是否存存在）</li><li><code>v-else</code>：条件渲染（动态控制节点是否存存在）</li><li><code>v-show</code>：条件渲染 (动态控制节点是否展示)</li></ul></li><li><code>v-text</code>指令：<ol><li>作用：向其所在的节点中渲染文本内容</li><li>与插值语法的区别：<code>v-text</code>会替换掉节点中的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会。</li></ol></li></ul><h3 id="1-16-2-v-html指令"><a href="#1-16-2-v-html指令" class="headerlink" title="1.16.2. v-html指令"></a>1.16.2. v-html指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-html指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello，&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;str2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> <span class="comment">//阻止 vue 在启动时生成生产提示。</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;JOJO&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">str</span>:<span class="string">&#x27;&lt;h3&gt;你好啊！&lt;/h3&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">str2</span>:<span class="string">&#x27;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><code>v-html</code>指令：</p><ol><li>作用：向指定节点中渲染包含html结构的内容</li><li>与插值语法的区别：<ol><li><code>v-html</code>会替换掉节点中所有的内容，<code>&#123;&#123;xx&#125;&#125;</code>则不会</li><li><code>v-html</code>可以识别html结构</li></ol></li><li>严重注意：<code>v-html</code>有安全性问题！！！<ol><li>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击</li><li>一定要在可信的内容上使用<code>v-html</code>，永远不要用在用户提交的内容上！！！</li></ol></li></ol><h3 id="1-16-3-v-cloak指令"><a href="#1-16-3-v-cloak指令" class="headerlink" title="1.16.3. v-cloak指令"></a>1.16.3. v-cloak指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-cloak指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-attr">[v-cloak]</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">display</span>:none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-cloak</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><code>v-cloak</code>指令（没有值）：</p><ol><li>本质是一个特殊属性，Vue实例创建完毕并接管容器后，会删掉<code>v-cloak</code>属性</li><li>使用css配合<code>v-cloak</code>可以解决网速慢时页面展示出<code>&#123;&#123;xxx&#125;&#125;</code>的问题</li></ol><h3 id="1-16-4-v-once指令"><a href="#1-16-4-v-once指令" class="headerlink" title="1.16.4. v-once指令"></a>1.16.4. v-once指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-once指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-once</span>&gt;</span>n初始化的值是：&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>n现在的值是：&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><code>v-once</code>指令：</p><ol><li><code>v-once</code>所在节点在初次动态渲染后，就视为静态内容了</li><li>以后数据的改变不会引起<code>v-once</code>所在结构的更新，可以用于优化性能</li></ol><h3 id="1-16-5-v-pre指令"><a href="#1-16-5-v-pre指令" class="headerlink" title="1.16.5. v-pre指令"></a>1.16.5. v-pre指令</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>v-pre指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-pre</span>&gt;</span>Vue其实很简单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是:&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><code>v-pre</code>指令：</p><ol><li>跳过其所在节点的编译过程。</li><li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译</li></ol><h2 id="1-17-自定义指令"><a href="#1-17-自定义指令" class="headerlink" title="1.17. 自定义指令"></a>1.17. 自定义指令</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>自定义指令<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">需求1：定义一个v-big指令，和v-text功能类似，但会把绑定的数值放大10倍。</span></span><br><span class="line"><span class="comment">需求2：定义一个v-fbind指令，和v-bind功能类似，但可以让其所绑定的input元素默认获取焦点。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>放大10倍后的n值是：<span class="tag">&lt;<span class="name">span</span> <span class="attr">v-big</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;n++&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-fbind:value</span>=<span class="string">&quot;n&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">directives</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//big函数何时会被调用？1.指令与元素成功绑定时（一上来） 2.指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">big</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>,<span class="variable language_">this</span>) <span class="comment">//注意此处的this是window</span></span></span><br><span class="line"><span class="language-javascript">element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">fbind</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//指令与元素成功绑定时（一上来）</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//指令所在元素被插入页面时</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">element.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//指令所在的模板被重新解析时</span></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">element.<span class="property">value</span> = binding.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8C%87%E4%BB%A4.png" alt="自定义指令"></p><p><strong>总结：</strong></p><ol><li><p>自定义指令定义语法：</p><ol><li><p>局部指令：</p><ol><li><pre><code class="javascript"> new Vue(&#123;     directives:&#123;指令名:配置对象&#125;    &#125;) 123<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2. ```javascript</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">    directives:&#123;指令名:回调函数&#125;   </span><br><span class="line">    &#125;) </span><br><span class="line">   123</span><br></pre></td></tr></table></figure></code></pre></li></ol></li><li><p>全局指令：</p><ol><li><code>Vue.directive(指令名,配置对象)</code></li><li><code>Vue.directive(指令名,回调函数)</code></li></ol><p>例如：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;fbind&#x27;</span>,&#123;</span><br><span class="line"><span class="comment">//指令与元素成功绑定时（一上来）</span></span><br><span class="line"><span class="title function_">bind</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//指令所在元素被插入页面时</span></span><br><span class="line">    <span class="title function_">inserted</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">    element.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//指令所在的模板被重新解析时</span></span><br><span class="line">    <span class="title function_">update</span>(<span class="params">element,binding</span>)&#123;</span><br><span class="line">    element.<span class="property">value</span> = binding.<span class="property">value</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="number">1234567891011121314</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>配置对象中常用的3个回调函数：</p><ol><li><code>bind(element,binding)</code>：指令与元素成功绑定时调用</li><li><code>inserted(element,binding)</code>：指令所在元素被插入页面时调用</li><li><code>update(element,binding)</code>：指令所在模板结构被重新解析时调用</li></ol></li><li><p>备注：</p><ol><li><p>指令定义时不加“v-”，但使用时要加“v-”</p></li><li><p>指令名如果是多个单词，要使用kebab-case命名方式，不要用camelCase命名</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line"><span class="attr">n</span>:<span class="number">1</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">directives</span>:&#123;</span><br><span class="line"><span class="string">&#x27;big-number&#x27;</span>(element,binding)&#123;</span><br><span class="line">element.<span class="property">innerText</span> = binding.<span class="property">value</span> * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="1-18-Vue生命周期"><a href="#1-18-Vue生命周期" class="headerlink" title="1.18. Vue生命周期"></a>1.18. Vue生命周期</h2><h3 id="1-18-1-引出生命周期"><a href="#1-18-1-引出生命周期" class="headerlink" title="1.18.1. 引出生命周期"></a>1.18.1. 引出生命周期</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>引出生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-if</span>=<span class="string">&quot;a&quot;</span>&gt;</span>你好啊<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">a</span>:<span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>生命周期：</p><ol><li>又名：生命周期回调函数、生命周期函数、生命周期钩子</li><li>是什么：Vue在关键时刻帮我们调用的一些特殊名称的函数</li><li>生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的</li><li>生命周期函数中的this指向是vm 或 组件实例对象</li></ol><h3 id="1-18-2-分析生命周期"><a href="#1-18-2-分析生命周期" class="headerlink" title="1.18.2. 分析生命周期"></a>1.18.2. 分析生命周期</h3><p><img src="/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="生命周期"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>分析生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-text</span>=<span class="string">&quot;n&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>当前的n值是：&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>点我n+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;bye&quot;</span>&gt;</span>点我销毁vm<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// template:`</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;div&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;h2&gt;当前的n值是：&#123;&#123;n&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;button @click=&quot;add&quot;&gt;点我n+1&lt;/button&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// &lt;/div&gt;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// `,</span></span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">n</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">add</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;add&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">n</span>++</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">bye</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bye&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">watch</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">n</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;n变了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeCreate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;created&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeMount&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeUpdate&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;updated&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;beforeDestroy&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;destroyed&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-18-3-总结生命周期"><a href="#1-18-3-总结生命周期" class="headerlink" title="1.18.3. 总结生命周期"></a>1.18.3. 总结生命周期</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>引出生命周期<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;opacity&#125;&quot;</span>&gt;</span>欢迎学习Vue<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;opacity = 1&quot;</span>&gt;</span>透明度设置为1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stop&quot;</span>&gt;</span>点我停止变换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">opacity</span>:<span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">stop</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.$destroy()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mounted&#x27;</span>,<span class="variable language_">this</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setInterval&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">this</span>.<span class="property">opacity</span> -= <span class="number">0.01</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">opacity</span> &lt;= <span class="number">0</span>) <span class="variable language_">this</span>.<span class="property">opacity</span> = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">&#125;,<span class="number">16</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;vm即将驾鹤西游了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>常用的生命周期钩子：</p><ol><li><code>mounted</code>：发送ajax请求、启动定时器、绑定自定义事件、订阅消息等初始化操作</li><li><code>beforeDestroy</code>：清除定时器、解绑自定义事件、取消订阅消息等收尾工作</li></ol><p>关于销毁Vue实例：</p><ol><li>销毁后借助Vue开发者工具看不到任何信息</li><li>销毁后自定义事件会失效，但原生DOM事件依然有效</li><li>一般不会在<code>beforeDestroy</code>操作数据，因为即便操作数据，也不会再触发更新流程了</li></ol><h1 id="2-Vue组件化编程"><a href="#2-Vue组件化编程" class="headerlink" title="2.Vue组件化编程"></a>2.Vue组件化编程</h1><h2 id="2-1-模块与组件、模块化与组件化"><a href="#2-1-模块与组件、模块化与组件化" class="headerlink" title="2.1. 模块与组件、模块化与组件化"></a>2.1. 模块与组件、模块化与组件化</h2><p><img src="/%E6%A8%A1%E5%9D%97%E4%B8%8E%E7%BB%84%E4%BB%B6.png" alt="模块与组件"></p><p><img src="/%E7%BB%84%E4%BB%B6%E5%8C%96%E7%BC%96%E7%A8%8B.png" alt="组件化编程"></p><p><img src="/%E7%BB%84%E4%BB%B6%E6%96%B9%E5%BC%8F.png" alt="组件方式"></p><h3 id="2-1-1-模块"><a href="#2-1-1-模块" class="headerlink" title="2.1.1. 模块"></a>2.1.1. 模块</h3><blockquote><ol><li>理解：向外提供特定功能的 js 程序，一般就是一个 js 文件</li><li>为什么：js 文件很多很复杂</li><li>作用：复用 js，简化 js 的编写，提高 js 运行效率</li></ol></blockquote><h4 id="2-1-2-组件"><a href="#2-1-2-组件" class="headerlink" title="2.1.2. 组件"></a>2.1.2. 组件</h4><blockquote><ol><li>定义：用来实现局部功能的代码和资源的集合（html&#x2F;css&#x2F;js&#x2F;image…）</li><li>为什么：一个界面的功能很复杂</li><li>作用：复用编码，简化项目编码，提高运行效率</li></ol></blockquote><h4 id="2-1-3-模块化"><a href="#2-1-3-模块化" class="headerlink" title="2.1.3. 模块化"></a>2.1.3. 模块化</h4><p>当应用中的 js 都以模块来编写的，那这个应用就是一个模块化的应用</p><h3 id="2-1-4-组件化"><a href="#2-1-4-组件化" class="headerlink" title="2.1.4. 组件化"></a>2.1.4. 组件化</h3><p>当应用中的功能都是多组件的方式来编写的，那这个应用就是一个组件化的应用</p><h2 id="2-2-非单文件组件"><a href="#2-2-非单文件组件" class="headerlink" title="2.2. 非单文件组件"></a>2.2. 非单文件组件</h2><h3 id="2-2-1-基本使用"><a href="#2-2-1-基本使用" class="headerlink" title="2.2.1. 基本使用"></a>2.2.1. 基本使用</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>基本使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 第三步：编写组件标签 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第一步：创建school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">schoolName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">schoolName:&#x27;尚硅谷&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">address:&#x27;北京昌平&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第一步：创建student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生姓名：</span><span class="template-variable">&#123;&#123;<span class="name">studentName</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">studentName:&#x27;JOJO&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">age:20</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">msg:&#x27;你好，JOJO！&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//第二步：注册组件（局部注册）</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E9%9D%9E%E5%8D%95%E6%96%87%E4%BB%B6.png" alt="非单文件"></p><p><strong>总结：</strong></p><ul><li><p>Vue中使用组件的三大步骤：</p><ol><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ol></li><li><p>如何定义一个组件？</p><p>使用<code>Vue.extend(options)</code>创建，其中<code>options</code>和<code>new Vue(options)</code>时传入的<code>options</code>几乎一样，但也有点区别：</p><ol><li><p>el不要写，为什么？</p><p>最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器</p></li><li><p>data必须写成函数，为什么？</p><p>避免组件被复用时，数据存在引用关系</p></li></ol></li><li><p>如何注册组件？</p><ol><li>局部注册：<code>new Vue</code>的时候传入<code>components</code>选项</li><li>全局注册：<code>Vue.component(&#39;组件名&#39;,组件)</code></li></ol></li><li><p>编写组件标签：<code>&lt;school&gt;&lt;/school&gt;</code></p></li></ul><h3 id="2-2-2-组件注意事项"><a href="#2-2-2-组件注意事项" class="headerlink" title="2.2.2. 组件注意事项"></a>2.2.2. 组件注意事项</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>组件注意事项<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;atguigu&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;欢迎学习Vue!&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">school</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**效果: **</p><p><img src="/%E7%BB%84%E4%BB%B6%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.png" alt="组件注意事项"></p><p><strong>总结：</strong></p><ul><li>关于组件名：<ul><li>一个单词组成：<ul><li>第一种写法（首字母小写）：school</li><li>第二种写法（首字母大写）：School</li></ul></li><li>多个单词组成：<ul><li>第一种写法（kebab-case命名）：my-school</li><li>第二种写法（CamelCase命名）：MySchool （需要Vue脚手架支持）</li></ul></li><li>备注：<ul><li>组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行</li><li>可以使用name配置项指定组件在开发者工具中呈现的名字</li></ul></li></ul></li><li>关于组件标签：<ul><li>第一种写法：<code>&lt;school&gt;&lt;/school&gt;</code></li><li>第二种写法：<code>&lt;school/&gt;</code></li><li>备注：不使用脚手架时，<code>&lt;school/&gt;</code>会导致后续组件不能渲染</li></ul></li><li>一个简写方式：<code>const school = Vue.extend(options)</code>可简写为：<code>const school = options</code></li></ul><h3 id="2-2-3-组件的嵌套"><a href="#2-2-3-组件的嵌套" class="headerlink" title="2.2.3. 组件的嵌套"></a>2.2.3. 组件的嵌套</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>组件的嵌套<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">Vue.config.productionTip = false</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义student组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const student = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学生年龄：</span><span class="template-variable">&#123;&#123;<span class="name">age</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;JOJO&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">age:20</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义school组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const school = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校名称：</span><span class="template-variable">&#123;&#123;<span class="name">name</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：</span><span class="template-variable">&#123;&#123;<span class="name">address</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">student</span>&gt;</span><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">student</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">name:&#x27;尚硅谷&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">address:&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义hello组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const hello = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;<span class="name">msg</span>&#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">data()&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">return &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">msg:&quot;欢迎学习尚硅谷Vue教程！&quot;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//定义app组件</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">const app = Vue.extend(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">hello</span>&gt;</span><span class="tag">&lt;/<span class="name">hello</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">school,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">hello</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">//创建vm</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">new Vue(&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">template:`</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"><span class="tag">&lt;<span class="name">app</span>&gt;</span><span class="tag">&lt;/<span class="name">app</span>&gt;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">`,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">el:&#x27;#root&#x27;,</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">components:&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">app</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;)</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-4-VueComponent"><a href="#2-2-4-VueComponent" class="headerlink" title="2.2.4. VueComponent"></a>2.2.4. VueComponent</h3><p>关于VueComponent：</p><ol><li><p>school组件本质是一个名为<code>VueComponent</code>的构造函数，且不是程序员定义的，是<code>Vue.extend</code>生成的</p></li><li><p>我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;/school&gt;</code>，Vue解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：<code>new VueComponent(options)</code></p></li><li><p>特别注意：每次调用<code>Vue.extend</code>，返回的都是一个&#x3D;&#x3D;全新&#x3D;&#x3D;的VueComponent！</p></li><li><p>关于this指向：</p><ol><li>组件配置中：<code>data</code>函数、<code>methods</code>中的函数、<code>watch</code>中的函数、<code>computed</code>中的函数 它们的this均是&#x3D;&#x3D;VueComponent实例对象&#x3D;&#x3D;</li><li><code>new Vue(options)</code>配置中：<code>data</code>函数、<code>methods</code>中的函数、<code>watch</code>中的函数、<code>computed</code>中的函数 它们的this均是&#x3D;&#x3D;Vue实例对象&#x3D;&#x3D;</li></ol></li><li><p><code>VueComponent</code>的实例对象，以后简称vc（也可称之为：组件实例对象）</p><p><code>Vue</code>的实例对象，以后简称vm</p><blockquote><p>只有在本笔记中<code>VueComponent</code>的实例对象才简称为vc</p></blockquote></li></ol><h3 id="2-2-5-一个重要的内置关系"><a href="#2-2-5-一个重要的内置关系" class="headerlink" title="2.2.5. 一个重要的内置关系"></a>2.2.5. 一个重要的内置关系</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>一个重要的内置关系<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">school</span>&gt;</span><span class="tag">&lt;/<span class="name">school</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">x</span> = <span class="number">99</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> school = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;school&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">template</span>:<span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;button @click=&quot;showX&quot;&gt;点我输出x&lt;/button&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&lt;/div&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">showX</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript"><span class="attr">msg</span>:<span class="string">&#x27;你好&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;,</span></span><br><span class="line"><span class="language-javascript"><span class="attr">components</span>:&#123;school&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结:</strong></p><p><img src="/%E5%88%86%E6%9E%90Vue%E4%B8%8EVueComponent%E7%9A%84%E5%85%B3%E7%B3%BB.png" alt="分析Vue与VueComponent的关系"></p><blockquote><ol><li>一个重要的内置关系：<code>VueComponent.prototype.__proto__ === Vue.prototype</code></li><li>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue 原型上的属性、方法</li></ol></blockquote><h2 id="2-3-单文件组件"><a href="#2-3-单文件组件" class="headerlink" title="2.3. 单文件组件"></a>2.3. 单文件组件</h2><ul><li><p>School.vue:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&#x27;Demo&#x27;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;尚硅谷&#x27;,</span><br><span class="line">                address:&#x27;北京&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showName()&#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #Demo&#123;</span><br><span class="line">        background: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></li><li><p>Student.vue:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">                age:20</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>App.vue:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School&gt;&lt;/School&gt;</span><br><span class="line">        &lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import School from &#x27;./School.vue&#x27;</span><br><span class="line">    import Student from &#x27;./Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            School,</span><br><span class="line">            Student</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>main.js:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>:<span class="string">`&lt;App&gt;&lt;/App&gt;`</span>,</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">    <span class="attr">components</span>:&#123;<span class="title class_">App</span>&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>index.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>单文件组件练习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../js/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="3-使用Vue-CLI脚手架"><a href="#3-使用Vue-CLI脚手架" class="headerlink" title="3.使用Vue CLI脚手架"></a>3.使用Vue CLI脚手架</h1><h2 id="3-1-初始化脚手架"><a href="#3-1-初始化脚手架" class="headerlink" title="3.1. 初始化脚手架"></a>3.1. 初始化脚手架</h2><h3 id="3-1-1-说明"><a href="#3-1-1-说明" class="headerlink" title="3.1.1. 说明"></a>3.1.1. 说明</h3><blockquote><ol><li>Vue 脚手架是 Vue 官方提供的标准化开发工具（开发平台）</li><li>最新的版本是 4.x</li><li>文档：<a href="https://cli.vuejs.org/zh/">Vue CLI</a></li></ol></blockquote><h3 id="3-1-2-具体步骤"><a href="#3-1-2-具体步骤" class="headerlink" title="3.1.2. 具体步骤"></a>3.1.2. 具体步骤</h3><ol><li>如果下载缓慢请配置 npm 淘宝镜像：<code>npm config set registry http://registry.npm.taobao.org</code></li><li>全局安装@vue&#x2F;cli：<code>npm install -g @vue/cli</code></li><li>切换到你要创建项目的目录，然后使用命令创建项目：<code>vue create xxxx</code></li><li>选择使用vue的版本</li><li>启动项目：<code>npm run serve</code></li><li>暂停项目：Ctrl+C</li></ol><blockquote><p>Vue 脚手架隐藏了所有 webpack 相关的配置，若想查看具体的 webpakc 配置，请执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vue inspect &gt; output.js</span><br></pre></td></tr></table></figure></blockquote><h3 id="3-1-3-分析脚手架结构"><a href="#3-1-3-分析脚手架结构" class="headerlink" title="3.1.3. 分析脚手架结构"></a>3.1.3. 分析脚手架结构</h3><p>脚手架文件结构：</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">.文件目录</span><br><span class="line">├── node<span class="emphasis">_modules </span></span><br><span class="line"><span class="emphasis">├── public</span></span><br><span class="line"><span class="emphasis">│   ├── favicon.ico: 页签图标</span></span><br><span class="line"><span class="emphasis">│   └── index.html: 主页面</span></span><br><span class="line"><span class="emphasis">├── src</span></span><br><span class="line"><span class="emphasis">│   ├── assets: 存放静态资源</span></span><br><span class="line"><span class="emphasis">│   │   └── logo.png</span></span><br><span class="line"><span class="emphasis">│   │── component: 存放组件</span></span><br><span class="line"><span class="emphasis">│   │   └── HelloWorld.vue</span></span><br><span class="line"><span class="emphasis">│   │── App.vue: 汇总所有组件</span></span><br><span class="line"><span class="emphasis">│   └── main.js: 入口文件</span></span><br><span class="line"><span class="emphasis">├── .gitignore: git版本管制忽略的配置</span></span><br><span class="line"><span class="emphasis">├── babel.config.js: babel的配置文件</span></span><br><span class="line"><span class="emphasis">├── package.json: 应用包配置文件 </span></span><br><span class="line"><span class="emphasis">├── README.md: 应用描述文件</span></span><br><span class="line"><span class="emphasis">└── package-lock.json: 包版本控制文件</span></span><br></pre></td></tr></table></figure><hr><p><code>src/components/School.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&#x27;Demo&#x27;&gt;</span><br><span class="line">        &lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;尚硅谷&#x27;,</span><br><span class="line">                address:&#x27;北京&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            showName() &#123;</span><br><span class="line">                alert(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #Demo&#123;</span><br><span class="line">        background: orange;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">                age:20</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School&gt;&lt;/School&gt;</span><br><span class="line">        &lt;Student&gt;&lt;/Student&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import School from &#x27;./components/School.vue&#x27;</span><br><span class="line">    import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components:&#123;</span><br><span class="line">            School,</span><br><span class="line">            Student</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>public/index.html</code>:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 针对IE浏览器的特殊配置，含义是让IE浏览器以最高渲染级别渲染页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启移动端的理想端口 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置页签图标 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= BASE_URL %&gt;favicon.ico&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置网页标题 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&lt;%= htmlWebpackPlugin.options.title %&gt;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 容器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E8%84%9A%E6%89%8B%E6%9E%B6%E6%B5%8B%E8%AF%95.png" alt="脚手架测试"></p><h3 id="3-1-4-render函数"><a href="#3-1-4-render函数" class="headerlink" title="3.1.4. render函数"></a>3.1.4. render函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">    <span class="comment">// 简写形式</span></span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="comment">// 完整形式</span></span><br><span class="line"><span class="comment">// render(createElement)&#123;</span></span><br><span class="line"><span class="comment">//     return createElement(App)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>关于不同版本的函数：</p><ol><li><code>vue.js</code> 与 <code>vue.runtime.xxx.js</code>的区别：<ol><li><code>vue.js</code> 是完整版的 Vue，包含：核心功能+模板解析器</li><li><code>vue.runtime.xxx.js</code> 是运行版的 Vue，只包含核心功能，没有模板解析器</li></ol></li><li>因为 <code>vue.runtime.xxx.js</code> 没有模板解析器，所以不能使用 <code>template</code> 配置项，需要使用 <code>render</code>函数接收到的<code>createElement</code> 函数去指定具体内容</li></ol><h3 id="3-1-5-修改默认配置"><a href="#3-1-5-修改默认配置" class="headerlink" title="3.1.5. 修改默认配置"></a>3.1.5. 修改默认配置</h3><ul><li><code>vue.config.js</code> 是一个可选的配置文件，如果项目的（和 <code>package.json</code> 同级的）根目录中存在这个文件，那么它会被 <code>@vue/cli-service</code> 自动加载</li><li>使用 <code>vue.config.js</code> 可以对脚手架进行个性化定制，详见<a href="https://cli.vuejs.org/zh/config/#vue-config-js">配置参考 | Vue CLI</a></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; defineConfig &#125; = <span class="built_in">require</span>(<span class="string">&#x27;@vue/cli-service&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">transpileDependencies</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">lintOnSave</span>:<span class="literal">false</span>  <span class="comment">//关闭语法检查</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-2-ref属性"><a href="#3-2-ref属性" class="headerlink" title="3.2. ref属性"></a>3.2. ref属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h1 ref=&quot;title&quot;&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;School ref=&quot;sch&quot;/&gt;</span><br><span class="line">        &lt;button @click=&quot;show&quot; ref=&quot;btn&quot;&gt;点我输出ref&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import School from &#x27;./components/School.vue&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; School &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                msg:&#x27;欢迎学习Vue！&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            show()&#123;</span><br><span class="line">                console.log(this.$refs.title)</span><br><span class="line">                console.log(this.$refs.sch)</span><br><span class="line">                console.log(this.$refs.btn)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/ref%E5%B1%9E%E6%80%A7.png" alt="ref属性"></p><p><strong>总结：</strong></p><p><code>ref</code>属性：</p><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在<code>html</code>标签上获取的是真实DOM元素，应用在组件标签上获取的是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;&lt;/h1&gt;</code> 或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code>.</li></ol></li></ol><h2 id="3-3-props配置项"><a href="#3-3-props配置项" class="headerlink" title="3.3. props配置项"></a>3.3. props配置项</h2><ul><li><p><code>src/App.vue</code>:</p></li><li><pre><code class="vue">&lt;template&gt;    &lt;div&gt;        &lt;Student name=&quot;JOJO&quot; sex=&quot;男酮&quot; :age=&quot;20&quot; /&gt;    &lt;/div&gt;&lt;/template&gt;&lt;script&gt;    import Student from &#39;./components/Student.vue&#39;    export default &#123;        name:&#39;App&#39;,        components: &#123; Student &#125;,    &#125;&lt;/script&gt;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- `src/components/Student.vue`:</span><br><span class="line"></span><br><span class="line">- ```vue</span><br><span class="line">  &lt;template&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;</span><br><span class="line">          &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">          &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">          &lt;h2&gt;学生年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;     </span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;script&gt;</span><br><span class="line">      export default &#123;</span><br><span class="line">          name:&#x27;Student&#x27;,</span><br><span class="line">          data() &#123;</span><br><span class="line">              return &#123;</span><br><span class="line">                  msg:&quot;我是一名来自枝江大学的男酮，嘿嘿，我的金轮~~&quot;,</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          // 简单声明接收</span><br><span class="line">  // props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;]</span><br><span class="line">  </span><br><span class="line">          // 接收的同时对数据进行类型限制</span><br><span class="line">  /* props:&#123;</span><br><span class="line">  name:String,</span><br><span class="line">  age:Number,</span><br><span class="line">  sex:String</span><br><span class="line">  &#125; */</span><br><span class="line">  </span><br><span class="line">          // 接收的同时对数据进行类型限制 + 指定默认值 + 限制必要性</span><br><span class="line">  props:&#123;</span><br><span class="line">  name:&#123;</span><br><span class="line">  type:String,</span><br><span class="line">  required:true,</span><br><span class="line">  &#125;,</span><br><span class="line">  age:&#123;</span><br><span class="line">  type:Number,</span><br><span class="line">  default:99</span><br><span class="line">  &#125;,</span><br><span class="line">  sex:&#123;</span><br><span class="line">  type:String,</span><br><span class="line">  required:true</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>效果:</p></li><li><p><img src="/props%E9%85%8D%E7%BD%AE%E9%A1%B9.png" alt="props配置项"></p></li></ul><p><strong>总结：</strong></p><p><code>props</code>配置项：</p><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:[&#39;name&#39;]</code></p></li><li><p>第二种方式（限制数据类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:&#123;</span><br><span class="line">    <span class="attr">type</span>:<span class="title class_">String</span>, <span class="comment">//类型</span></span><br><span class="line">        <span class="attr">required</span>:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line">        <span class="attr">default</span>:<span class="string">&#x27;JOJO&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><blockquote><p>props是&#x3D;&#x3D;只读的&#x3D;&#x3D;，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据</p></blockquote><h2 id="3-4-mixin混入"><a href="#3-4-mixin混入" class="headerlink" title="3.4. mixin混入"></a>3.4. mixin混入</h2><p><strong>局部混入：</strong></p><p><code>src/mixin.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">showName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好呀~&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/components/School.vue</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span> @<span class="attr">click</span>=<span class="string">&quot;showName&quot;</span>&gt;</span>学校姓名：&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>学校地址：&#123;&#123;address&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>   </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//引入混入</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>:<span class="string">&#x27;School&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;尚硅谷&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">address</span>:<span class="string">&#x27;北京&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">mixins</span>:[mixin]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2 @click=&quot;showName&quot;&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;   </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    //引入混入</span><br><span class="line">    import &#123;mixin&#125; from &#x27;../mixin&#x27;</span><br><span class="line">    </span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">mixins:[mixin]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School/&gt;</span><br><span class="line">        &lt;hr/&gt;</span><br><span class="line">        &lt;Student/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line">    import School from &#x27;./components/School.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; Student,School &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/mixin%E6%B7%B7%E5%85%A5.png" alt=" mixin混入"></p><p><strong>全局混入：</strong></p><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;./mixin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p><code>mixin</code>（混入）：</p><ol><li><p>功能：可以&#x3D;&#x3D;把多个组件共用的配置提取成一个混入对象&#x3D;&#x3D;.</p></li><li><p>使用方式：</p><ol><li><p>定义混入：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mixin = &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;....&#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用混入:</p><ol><li>全局混入: <code>Vue.mixin(xxx)</code></li><li>局部混入: <code>mixins: [&#39;xxx&#39;]</code></li></ol></li><li><p>备注:</p><ol><li><p>组件和混入对象含有同名选项时，这些选项将以恰当的方式进行“合并”，在发生冲突时&#x3D;&#x3D;以组件优先&#x3D;&#x3D;。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line"><span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">            <span class="attr">foo</span>: <span class="string">&#x27;abc&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [mixin],</span><br><span class="line">  <span class="title function_">data</span> () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">message</span>: <span class="string">&#x27;goodbye&#x27;</span>,</span><br><span class="line">            <span class="attr">bar</span>: <span class="string">&#x27;def&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="title function_">created</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$data</span>)</span><br><span class="line">    <span class="comment">// =&gt; &#123; message: &quot;goodbye&quot;, foo: &quot;abc&quot;, bar: &quot;def&quot; &#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>同名生命周期钩子将合并为一个数组，因此都将被调用。另外，混入对象的钩子将在组件自身钩子之前调用。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mixin = &#123;</span><br><span class="line">  <span class="title function_">created</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;混入对象的钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">mixins</span>: [mixin],</span><br><span class="line">  <span class="title function_">created</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;组件钩子被调用&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// =&gt; &quot;混入对象的钩子被调用&quot;</span></span><br><span class="line"><span class="comment">// =&gt; &quot;组件钩子被调用&quot;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="3-5-plugin插件"><a href="#3-5-plugin插件" class="headerlink" title="3.5. plugin插件"></a>3.5. plugin插件</h2><p>&#96;&#96;src&#x2F;plugin.js<code>:</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="title function_">install</span>(<span class="params">Vue,x,y,z</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z)</span><br><span class="line"><span class="comment">//全局过滤器</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;mySlice&#x27;</span>,<span class="keyword">function</span>(<span class="params">value</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> value.<span class="title function_">slice</span>(<span class="number">0</span>,<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义混入</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">x</span>:<span class="number">100</span>,</span><br><span class="line"><span class="attr">y</span>:<span class="number">200</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//给Vue原型上添加一个方法（vm和vc就都能用了）</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="function">()=&gt;</span>&#123;<span class="title function_">alert</span>(<span class="string">&#x27;你好啊&#x27;</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> plugin <span class="keyword">from</span> <span class="string">&#x27;./plugin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(plugin,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/components/School.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学校姓名：&#123;&#123;name | mySlice&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;   </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;尚硅谷atguigu&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt; </span><br><span class="line">        &lt;button @click=&quot;test&quot;&gt;点我测试hello方法&lt;/button&gt;  </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            test() &#123;</span><br><span class="line">                this.hello()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/vue%E6%8F%92%E4%BB%B6.png" alt="vue插件"></p><p><strong>总结：</strong></p><p>插件：</p><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据</p></li><li><p>定义插件：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">plugin.<span class="property">install</span> = <span class="keyword">function</span> (<span class="params">Vue, options</span>) &#123;</span><br><span class="line">        <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(....)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">directive</span>(....)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 3. 配置全局混入</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(....)</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;...&#125;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$myProperty</span> = xxxx</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件: <code>Vue.use(plugin)</code></p></li></ol><h2 id="3-6-scoped样式"><a href="#3-6-scoped样式" class="headerlink" title="3.6. scoped样式"></a>3.6. scoped样式</h2><p><code>src/components/School.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;   </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: blueviolet;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .demo&#123;</span><br><span class="line">        background-color: chartreuse;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;School/&gt;</span><br><span class="line">        &lt;Student/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line">    import School from &#x27;./components/School.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; Student,School &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/scoped%E6%A0%B7%E5%BC%8F.png" alt="scoped样式"></p><p><strong>总结：</strong></p><p><code>scoped</code>样式：</p><ol><li>作用：让样式在局部生效，防止冲突</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><blockquote><p><code>scoped</code>样式一般不会在<code>App.vue</code>中使用</p></blockquote><h2 id="3-7-Todo-List案例"><a href="#3-7-Todo-List案例" class="headerlink" title="3.7. Todo-List案例"></a>3.7. Todo-List案例</h2><p><code>src/components/MyHeader.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; @keydown.enter=&quot;add&quot; v-model=&quot;title&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyHeader&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                title:&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            add()&#123;</span><br><span class="line">                if(!this.title.trim()) return</span><br><span class="line">                const todoObj = &#123;id:nanoid(),title:this.title,done:false&#125;</span><br><span class="line">                this.addTodo(todoObj)</span><br><span class="line">                this.title = &#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props:[&#x27;addTodo&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .todo-header input &#123;</span><br><span class="line">        width: 560px;</span><br><span class="line">        height: 28px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        padding: 4px 7px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-header input:focus &#123;</span><br><span class="line">        outline: none;</span><br><span class="line">        border-color: rgba(82, 168, 236, 0.8);</span><br><span class="line">        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyItem.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @click=&quot;handleCheck(todo.id)&quot;/&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id,todo.title)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyItem&#x27;,</span><br><span class="line">        props:[&#x27;todo&#x27;,&#x27;checkTodo&#x27;,&#x27;deleteTodo&#x27;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleCheck(id)&#123;</span><br><span class="line">                this.checkTodo(id)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(id,title)&#123;</span><br><span class="line">                if(confirm(&quot;确定删除任务：&quot;+title+&quot;吗？&quot;))&#123;</span><br><span class="line">                    this.deleteTodo(id)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        height: 36px;</span><br><span class="line">        line-height: 36px;</span><br><span class="line">        padding: 0 5px;</span><br><span class="line">        border-bottom: 1px solid #ddd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label li input &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 6px;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -1px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li button &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        display: none;</span><br><span class="line">        margin-top: 3px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:before &#123;</span><br><span class="line">        content: initial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:last-child &#123;</span><br><span class="line">        border-bottom: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover &#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover button&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyList.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">        &lt;MyItem </span><br><span class="line">            v-for=&quot;todo in todos&quot; </span><br><span class="line">            :key=&quot;todo.id&quot; </span><br><span class="line">            :todo=&quot;todo&quot; </span><br><span class="line">            :checkTodo=&quot;checkTodo&quot;</span><br><span class="line">            :deleteTodo=&quot;deleteTodo&quot;</span><br><span class="line">        /&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyItem from &#x27;./MyItem.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyList&#x27;,</span><br><span class="line">        components:&#123;MyItem&#125;,</span><br><span class="line">        props:[&#x27;todos&#x27;,&#x27;checkTodo&#x27;,&#x27;deleteTodo&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .todo-main &#123;</span><br><span class="line">        margin-left: 0px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        padding: 0px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-empty &#123;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        padding-left: 5px;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyFooter.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;todo-footer&quot; v-show=&quot;total&quot;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot;/&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt; / 全部&#123;&#123;total&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearAll&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyFooter&#x27;,</span><br><span class="line">        props:[&#x27;todos&#x27;,&#x27;checkAllTodo&#x27;,&#x27;clearAllTodo&#x27;],</span><br><span class="line">        computed:&#123;</span><br><span class="line">            doneTotal()&#123;</span><br><span class="line">                return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">            &#125;,</span><br><span class="line">            total()&#123;</span><br><span class="line">                return this.todos.length</span><br><span class="line">            &#125;,</span><br><span class="line">            isAll:&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return this.total === this.doneTotal &amp;&amp; this.total &gt; 0</span><br><span class="line">                &#125;,</span><br><span class="line">                set(value)&#123;</span><br><span class="line">                    this.checkAllTodo(value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            clearAll()&#123;</span><br><span class="line">                this.clearAllTodo()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .todo-footer &#123;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">        padding-left: 6px;</span><br><span class="line">        margin-top: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    .todo-footer label &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin-right: 20px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-footer label input &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -1px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-footer button &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-top: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">            &lt;MyHeader :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">            &lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; :deleteTodo=&quot;deleteTodo&quot;/&gt;</span><br><span class="line">            &lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">    import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyHeader,MyList,MyFooter &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                todos:[</span><br><span class="line">                    &#123;id:&#x27;001&#x27;,title:&#x27;抽烟&#x27;,done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;002&#x27;,title:&#x27;喝酒&#x27;,done:false&#125;,</span><br><span class="line">                    &#123;id:&#x27;003&#x27;,title:&#x27;烫头&#x27;,done:false&#125;,</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //添加一个todo</span><br><span class="line">            addTodo(todoObj)&#123;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">            //勾选or取消勾选一个todo</span><br><span class="line">            checkTodo(id)&#123;</span><br><span class="line">                this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除一个todo</span><br><span class="line">            deleteTodo(id)&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">            &#125;,</span><br><span class="line">            //全选or取消勾选</span><br><span class="line">            checkAllTodo(done)&#123;</span><br><span class="line">                this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除已完成的todo</span><br><span class="line">            clearAllTodo()&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 4px 12px;</span><br><span class="line">        margin-bottom: 0;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #da4f49;</span><br><span class="line">        border: 1px solid #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn:focus &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-container &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .todo-container .todo-wrap &#123;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p>图片</p><p><strong>总结：</strong></p><ul><li>组件化编码流程：<ol><li>拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突</li><li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：<ol><li>一个组件在用：放在组件自身即可</li><li>一些组件在用：放在他们共同的父组件上（&#x3D;&#x3D;状态提升&#x3D;&#x3D;）</li></ol></li><li>实现交互：从绑定事件开始</li></ol></li><li><code>props</code>适用于：<ol><li>父组件 &#x3D;&#x3D;&gt; 子组件 通信</li><li>子组件 &#x3D;&#x3D;&gt; 父组件 通信（要求父组件先给子组件一个函数）</li></ol></li><li>使用<code>v-model</code>时要切记：<code>v-model</code>绑定的值不能是<code>props</code>传过来的值，因为<code>props</code>是不可以修改的</li><li><code>props</code>传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但&#x3D;&#x3D;不推荐这样做&#x3D;&#x3D;</li></ul><h2 id="3-8-WebStorage"><a href="#3-8-WebStorage" class="headerlink" title="3.8. WebStorage"></a>3.8. WebStorage</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>localStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveDate()&quot;</span>&gt;</span>点我保存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readDate()&quot;</span>&gt;</span>点我读数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteDate()&quot;</span>&gt;</span>点我删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllDate()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// localStorage最大的特点就是，浏览器关闭后还存在数据   </span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> person = &#123;<span class="attr">name</span>:<span class="string">&quot;JOJO&quot;</span>,<span class="attr">age</span>:<span class="number">20</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 保存数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">saveDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&#x27;localStorage&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 读取数据，如果没有数据，读取的null</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">readDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> person = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(person))  <span class="comment">// JSON.parse 用来解析，把字符转成json</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">deleteDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// removeItem 移出</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;msg&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 删除所有数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">deleteAllDate</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>sessionStorage<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>会话存储空间<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>sessionStorage的特点就是,浏览器关闭就会清空,会话存储本质就是会话,会话结束内存清空<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;saveDate()&quot;</span>&gt;</span>点我保存数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;readDate()&quot;</span>&gt;</span>点我读数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteDate()&quot;</span>&gt;</span>点我删除数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;deleteAllDate()&quot;</span>&gt;</span>点我清空数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> person = &#123;<span class="attr">name</span>: <span class="string">&quot;杰尼龟&quot;</span>,<span class="attr">age</span>: <span class="number">25</span>&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 保存数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">saveDate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;msg&#x27;</span>,<span class="string">&quot;sessionStorage&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">sessionStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;person&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(person))</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">readDate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;msg&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">const</span> person = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;person&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(person))  <span class="comment">// JSON.parse 用来解析，把字符转成json</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">deleteDate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// removeItem 删除指定内容</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">sessionStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;msg&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">deleteAllDate</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// clear 删除所有内容</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">sessionStorage</span>.<span class="title function_">clear</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><ol><li>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</li><li>浏览器端通过<code>Window.sessionStorage</code>和<code>Window.localStorage</code>属性来实现本地存储机制</li><li>相关API：<ol><li><code>xxxStorage.setItem(&#39;key&#39;, &#39;value&#39;)</code>：该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值</li><li><code>xxxStorage.getItem(&#39;key&#39;)</code>：该方法接受一个键名作为参数，返回键名对应的值</li><li><code>xxxStorage.removeItem(&#39;key&#39;)</code>：该方法接受一个键名作为参数，并把该键名从存储中删除</li><li><code>xxxStorage.clear()</code>：该方法会清空存储中的所有数据</li></ol></li><li>备注：<ol><li><code>SessionStorage</code>存储的内容会随着浏览器窗口关闭而消失</li><li><code>LocalStorage</code>存储的内容，需要手动清除才会消失</li><li><code>xxxStorage.getItem(xxx)</code>如果 xxx 对应的 value 获取不到，那么<code>getItem()</code>的返回值是null</li><li><code>JSON.parse(null)</code>的结果依然是null</li></ol></li></ol><p><strong>使用本地存储优化Todo-List：</strong></p><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">            &lt;MyHeader :addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">            &lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; :deleteTodo=&quot;deleteTodo&quot;/&gt;</span><br><span class="line">            &lt;MyFooter :todos=&quot;todos&quot; :checkAllTodo=&quot;checkAllTodo&quot; :clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">    import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyHeader,MyList,MyFooter &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                //若localStorage中存有&#x27;todos&#x27;则从localStorage中取出，否则初始为空数组</span><br><span class="line">                todos:JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //添加一个todo</span><br><span class="line">            addTodo(todoObj)&#123;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">            //勾选or取消勾选一个todo</span><br><span class="line">            checkTodo(id)&#123;</span><br><span class="line">                this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除一个todo</span><br><span class="line">            deleteTodo(id)&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">            &#125;,</span><br><span class="line">            //全选or取消勾选</span><br><span class="line">            checkAllTodo(done)&#123;</span><br><span class="line">                this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除已完成的todo</span><br><span class="line">            clearAllTodo()&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            todos:&#123;</span><br><span class="line">                //由于todos是对象数组，所以必须开启深度监视才能发现数组中对象的变化</span><br><span class="line">                deep:true,  // deep 开启深度监听</span><br><span class="line">                handler(value)&#123;</span><br><span class="line">                    localStorage.setItem(&#x27;todos&#x27;,JSON.stringify(value))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 4px 12px;</span><br><span class="line">        margin-bottom: 0;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #da4f49;</span><br><span class="line">        border: 1px solid #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn:focus &#123;</span><br><span class="line">    outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-container &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .todo-container .todo-wrap &#123;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-9-自定义事件"><a href="#3-9-自定义事件" class="headerlink" title="3.9. 自定义事件"></a>3.9. 自定义事件</h2><h3 id="3-9-1-绑定"><a href="#3-9-1-绑定" class="headerlink" title="3.9.1. 绑定"></a>3.9.1. 绑定</h3><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;!-- 通过父组件给子组件传递函数类型的props实现子给父传递数据 --&gt;</span><br><span class="line">        &lt;School :getSchoolName=&quot;getSchoolName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第一种写法，使用@或v-on） --&gt;</span><br><span class="line">        &lt;!-- &lt;Student @jojo=&quot;getStudentName&quot;/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 通过父组件给子组件绑定一个自定义事件实现子给父传递数据（第二种写法，使用ref） --&gt;</span><br><span class="line">&lt;Student ref=&quot;student&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line">    import School from &#x27;./components/School.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; Student,School &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getSchoolName(name)&#123;</span><br><span class="line">                console.log(&quot;已收到学校的名称：&quot;+name)</span><br><span class="line">            &#125;,</span><br><span class="line">            getStudentName(name)&#123;</span><br><span class="line">                console.log(&quot;已收到学生的姓名：&quot;+name)      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.$refs.student.$on(&#x27;jojo&#x27;,this.getStudentName)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.app&#123;</span><br><span class="line">background-color: gray;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;sendStudentName&quot;&gt;点我传递学生姓名&lt;/button&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sendStudentName()&#123;</span><br><span class="line">                // 触发Student组件实例身上的jojo事件</span><br><span class="line">                this.$emit(&#x27;jojo&#x27;,this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .student&#123;</span><br><span class="line">        background-color: chartreuse;</span><br><span class="line">        padding: 5px;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/School.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;school&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学校姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&#x27;sendSchoolName&#x27;&gt;把学校名给APP&lt;/button&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;School&#x27;,</span><br><span class="line">        props: [&#x27;getSchoolName&#x27;],  // 获取App的getSchoolName的方法</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address: &quot;北京&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            sendSchoolName() &#123;</span><br><span class="line">                //  可能会报错</span><br><span class="line">                this.getShoolName(this.name)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .school&#123;</span><br><span class="line">        background-color: skyblue;</span><br><span class="line">        padding: 5px;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果:</strong></p><p><img src="/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%BB%91%E5%AE%9A.png" alt="自定义事件绑定"></p><h3 id="3-9-2-解绑"><a href="#3-9-2-解绑" class="headerlink" title="3.9.2. 解绑"></a>3.9.2. 解绑</h3><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;Student @jojo=&quot;getStudentName&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import Student from &#x27;./components/Student.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; Student &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            getStudentName(name)&#123;</span><br><span class="line">                console.log(&quot;已收到学生的姓名：&quot;+name)      </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.app&#123;</span><br><span class="line">background-color: gray;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;student&quot;&gt;</span><br><span class="line">        &lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;sendStudentName&quot;&gt;点我传递学生姓名&lt;/button&gt; </span><br><span class="line">        &lt;button @click=&quot;unbind&quot;&gt;解绑自定义事件&lt;/button&gt; </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;Student&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                name:&#x27;JOJO&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sendStudentName()&#123;</span><br><span class="line">                this.$emit(&#x27;jojo&#x27;,this.name)</span><br><span class="line">            &#125;,</span><br><span class="line">            unbind()&#123;</span><br><span class="line">                // 解绑一个自定义事件</span><br><span class="line">                // this.$off(&#x27;jojo&#x27;)</span><br><span class="line">                // 解绑多个自定义事件</span><br><span class="line">                // this.$off([&#x27;jojo&#x27;])</span><br><span class="line">                // 解绑所有自定义事件</span><br><span class="line">                this.$off()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .student&#123;</span><br><span class="line">        background-color: chartreuse;</span><br><span class="line">        padding: 5px;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E8%A7%A3%E9%99%A4%E7%BB%91%E5%AE%9A.png" alt="自定义事件解除绑定"></p><p><strong>总结：</strong></p><p>组件的自定义事件：</p><ol><li><p>一种组件间通信的方式，适用于：&#x3D;&#x3D;子组件 &gt; 父组件</p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code> 或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Demo</span> ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">...</span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">demo</span>.$on(<span class="string">&#x27;atguigu&#x27;</span>,data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit(&#39;atguigu&#39;,数据)</code></p></li><li><p>解绑自定义事件：<code>this.$off(&#39;atguigu&#39;)</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符</p></li><li><p>注意：通过<code>this.$refs.xxx.$on(&#39;atguigu&#39;,回调)</code>绑定自定义事件时，回调&#x3D;&#x3D;要么配置在methods中&#x3D;&#x3D;，要么&#x3D;&#x3D;用箭头函数&#x3D;&#x3D;，否则this指向会出问题！</p></li></ol><p><strong>使用自定义事件优化Todo-List：</strong></p><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">            &lt;MyHeader @addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">            &lt;MyList :todos=&quot;todos&quot; :checkTodo=&quot;checkTodo&quot; :deleteTodo=&quot;deleteTodo&quot;/&gt;</span><br><span class="line">            &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">    import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyHeader,MyList,MyFooter &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                todos:JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //添加一个todo</span><br><span class="line">            addTodo(todoObj)&#123;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">            //勾选or取消勾选一个todo</span><br><span class="line">            checkTodo(id)&#123;</span><br><span class="line">                this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除一个todo</span><br><span class="line">            deleteTodo(id)&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">            &#125;,</span><br><span class="line">            //全选or取消勾选</span><br><span class="line">            checkAllTodo(done)&#123;</span><br><span class="line">                this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除已完成的todo</span><br><span class="line">            clearAllTodo()&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            todos:&#123;</span><br><span class="line">                deep:true,</span><br><span class="line">                handler(value)&#123;</span><br><span class="line">                    localStorage.setItem(&#x27;todos&#x27;,JSON.stringify(value))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 4px 12px;</span><br><span class="line">        margin-bottom: 0;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #da4f49;</span><br><span class="line">        border: 1px solid #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn:focus &#123;</span><br><span class="line">   outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-container &#123;</span><br><span class="line">    width: 600px;</span><br><span class="line">    margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .todo-container .todo-wrap &#123;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyHeader.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;todo-header&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;请输入你的任务名称，按回车键确认&quot; @keydown.enter=&quot;add&quot; v-model=&quot;title&quot;/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import &#123;nanoid&#125; from &#x27;nanoid&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyHeader&#x27;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                title:&#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            add()&#123;</span><br><span class="line">                if(!this.title.trim()) return</span><br><span class="line">                const todoObj = &#123;id:nanoid(),title:this.title,done:false&#125;</span><br><span class="line">                this.$emit(&#x27;addTodo&#x27;,todoObj)</span><br><span class="line">                this.title = &#x27;&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    /*header*/</span><br><span class="line">    .todo-header input &#123;</span><br><span class="line">        width: 560px;</span><br><span class="line">        height: 28px;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        border: 1px solid #ccc;</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">        padding: 4px 7px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-header input:focus &#123;</span><br><span class="line">        outline: none;</span><br><span class="line">        border-color: rgba(82, 168, 236, 0.8);</span><br><span class="line">        box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075), 0 0 8px rgba(82, 168, 236, 0.6);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyFooter</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;todo-footer&quot; v-show=&quot;total&quot;&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot;/&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;span&gt;</span><br><span class="line">            &lt;span&gt;已完成&#123;&#123;doneTotal&#125;&#125;&lt;/span&gt; / 全部&#123;&#123;total&#125;&#125;</span><br><span class="line">        &lt;/span&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearAll&quot;&gt;清除已完成任务&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyFooter&#x27;,</span><br><span class="line">        props:[&#x27;todos&#x27;],</span><br><span class="line">        computed:&#123;</span><br><span class="line">            doneTotal()&#123;</span><br><span class="line">                return this.todos.reduce((pre,todo)=&gt; pre + (todo.done ? 1 : 0) ,0)</span><br><span class="line">            &#125;,</span><br><span class="line">            total()&#123;</span><br><span class="line">                return this.todos.length</span><br><span class="line">            &#125;,</span><br><span class="line">            isAll:&#123;</span><br><span class="line">                get()&#123;</span><br><span class="line">                    return this.total === this.doneTotal &amp;&amp; this.total &gt; 0</span><br><span class="line">                &#125;,</span><br><span class="line">                set(value)&#123;</span><br><span class="line">                    this.$emit(&#x27;checkAllTodo&#x27;,value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            clearAll()&#123;</span><br><span class="line">                this.$emit(&#x27;clearAllTodo&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .todo-footer &#123;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">        padding-left: 6px;</span><br><span class="line">        margin-top: 5px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    .todo-footer label &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        margin-right: 20px;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-footer label input &#123;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -1px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-footer button &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        margin-top: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-10-全局事件总线"><a href="#3-10-全局事件总线" class="headerlink" title="3.10. 全局事件总线"></a>3.10. 全局事件总线</h2><blockquote><p>全局事件总线是一种可以在任意组件间通信的方式，本质上就是一个对象。它必须满足以下条件：1. 所有的组件对象都必须能看见他 2. 这个对象必须能够使用<code>$on</code>、<code>$emit</code>和<code>$off</code>方法去绑定、触发和解绑事件</p></blockquote><p><code>src/main.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line"><span class="attr">el</span>:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line"><span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line"><span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;app&quot;&gt;</span><br><span class="line">&lt;School/&gt;</span><br><span class="line">&lt;Student/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Student from &#x27;./components/Student&#x27;</span><br><span class="line">import School from &#x27;./components/School&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;App&#x27;,</span><br><span class="line">components:&#123;School,Student&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.app&#123;</span><br><span class="line">background-color: gray;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/School.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;school&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;School&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">            // 声明 demo 函数</span><br><span class="line">demo(data) &#123;</span><br><span class="line">console.log(&#x27;我是School组件，收到了数据：&#x27;,data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">        // mounted 钩子函数，主要用于初始化操作，比如：开启定时器，发送网络请求，绑定事件</span><br><span class="line">mounted() &#123;</span><br><span class="line">            // 把 this.demo 绑定到bus上</span><br><span class="line">this.$bus.$on(&#x27;demo&#x27;,this.demo)</span><br><span class="line">&#125;,</span><br><span class="line">        // beforeDestroy 收尾操作</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">            // beforeDestroy 销毁bus上的demo函数</span><br><span class="line">this.$bus.$off(&#x27;demo&#x27;)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.school&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;student&quot;&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Student&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;张三&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">sendStudentName()&#123;</span><br><span class="line">                // 调用 bus 上的demo 函数，并把name传入</span><br><span class="line">this.$bus.$emit(&#x27;demo&#x27;,this.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.student&#123;</span><br><span class="line">background-color: pink;</span><br><span class="line">padding: 5px;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E5%85%A8%E5%B1%80%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF.png" alt="全局事件总线"></p><p><strong>总结：</strong></p><p>全局事件总线（GlobalEventBus）：</p><ol><li><p>一种组件间通信的方式，适用于任意组件间通信</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">   &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给<code>$bus</code>绑定自定义事件，事件的回调留在A组件自身</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit(&#39;xxx&#39;,data)</code></p></li></ol></li><li><p>最好在<code>beforeDestroy</code>钩子中，用<code>$off</code>去&#x3D;&#x3D;解绑当前组件所用到的事件&#x3D;&#x3D;.</p></li></ol><p><strong>使用自定义事件优化Todo-List：</strong></p><p><code>src/mian.js</code>:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/components/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">            &lt;MyHeader @addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">            &lt;MyList :todos=&quot;todos&quot;/&gt;</span><br><span class="line">            &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">    import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyHeader,MyList,MyFooter &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                todos:JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //添加一个todo</span><br><span class="line">            addTodo(todoObj)&#123;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">            //勾选or取消勾选一个todo</span><br><span class="line">            checkTodo(id)&#123;</span><br><span class="line">                this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除一个todo</span><br><span class="line">            deleteTodo(id)&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">            &#125;,</span><br><span class="line">            //全选or取消勾选</span><br><span class="line">            checkAllTodo(done)&#123;</span><br><span class="line">                this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除已完成的todo</span><br><span class="line">            clearAllTodo()&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            todos:&#123;</span><br><span class="line">                deep:true,</span><br><span class="line">                handler(value)&#123;</span><br><span class="line">                    localStorage.setItem(&#x27;todos&#x27;,JSON.stringify(value))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.$bus.$on(&#x27;checkTodo&#x27;,this.checkTodo)</span><br><span class="line">            this.$bus.$on(&#x27;deleteTodo&#x27;,this.deleteTodo)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line">            this.$bus.$off([&#x27;checkTodo&#x27;,&#x27;deleteTodo&#x27;])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 4px 12px;</span><br><span class="line">        margin-bottom: 0;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #da4f49;</span><br><span class="line">        border: 1px solid #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn:focus &#123;</span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-container &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .todo-container .todo-wrap &#123;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyItem.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @click=&quot;handleCheck(todo.id)&quot;/&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id,todo.title)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyItem&#x27;,</span><br><span class="line">        props:[&#x27;todo&#x27;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleCheck(id)&#123;</span><br><span class="line">                this.$bus.$emit(&#x27;checkTodo&#x27;,id)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(id,title)&#123;</span><br><span class="line">                if(confirm(&quot;确定删除任务：&quot;+title+&quot;吗？&quot;))&#123;</span><br><span class="line">                    this.$bus.$emit(&#x27;deleteTodo&#x27;,id)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        height: 36px;</span><br><span class="line">        line-height: 36px;</span><br><span class="line">        padding: 0 5px;</span><br><span class="line">        border-bottom: 1px solid #ddd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label li input &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 6px;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -1px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li button &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        display: none;</span><br><span class="line">        margin-top: 3px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:before &#123;</span><br><span class="line">        content: initial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:last-child &#123;</span><br><span class="line">        border-bottom: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover &#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover button&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-11-消息的订阅与发布"><a href="#3-11-消息的订阅与发布" class="headerlink" title="3.11. 消息的订阅与发布"></a>3.11. 消息的订阅与发布</h2><p><code>src/components/School.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;school&quot;&gt;</span><br><span class="line">&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;School&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;尚硅谷&#x27;,</span><br><span class="line">address:&#x27;北京&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods:&#123;</span><br><span class="line">demo(msgName,data) &#123;</span><br><span class="line">console.log(&#x27;我是School组件，收到了数据：&#x27;,data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">this.pubId = pubsub.subscribe(&#x27;demo&#x27;,this.demo) //订阅消息</span><br><span class="line">&#125;,</span><br><span class="line">beforeDestroy() &#123;</span><br><span class="line">pubsub.unsubscribe(this.pubId) //取消订阅</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.school&#123;</span><br><span class="line">background-color: skyblue;</span><br><span class="line">padding: 5px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/Student.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;student&quot;&gt;</span><br><span class="line">&lt;h2&gt;学生姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;学生性别：&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;button @click=&quot;sendStudentName&quot;&gt;把学生名给School组件&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;Student&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">name:&#x27;JOJO&#x27;,</span><br><span class="line">sex:&#x27;男&#x27;,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">sendStudentName()&#123;</span><br><span class="line">pubsub.publish(&#x27;demo&#x27;,this.name) //发布消息</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.student&#123;</span><br><span class="line">background-color: pink;</span><br><span class="line">padding: 5px;</span><br><span class="line">margin-top: 30px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E6%B6%88%E6%81%AF%E8%AE%A2%E9%98%85%E4%B8%8E%E5%8F%91%E5%B8%83.png" alt="消息订阅与发布"></p><p><strong>总结：</strong></p><p>消息订阅与发布（pubsub）：</p><ol><li><p>消息订阅与发布是一种组件间通信的方式，适用于&#x3D;&#x3D;任意组件间通信&#x3D;&#x3D;</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入：<code>import pubsub from &#39;pubsub-js&#39;</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">methods</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">demo</span>(<span class="params">data</span>)&#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pid</span> = pubsub.<span class="title function_">subscribe</span>(<span class="string">&#x27;xxx&#x27;</span>,<span class="variable language_">this</span>.<span class="property">demo</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish(&#39;xxx&#39;,data)</code></p></li><li><p>最好在<code>beforeDestroy</code>钩子中，使用<code>pubsub.unsubscribe(pid)</code>取消订阅</p></li></ol></li></ol><p><strong>使用消息的订阅与发布优化Todo-List：</strong></p><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">            &lt;MyHeader @addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">            &lt;MyList :todos=&quot;todos&quot;/&gt;</span><br><span class="line">            &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">    import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyHeader,MyList,MyFooter &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                todos:JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //添加一个todo</span><br><span class="line">            addTodo(todoObj)&#123;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">            //勾选or取消勾选一个todo</span><br><span class="line">            checkTodo(_,id)&#123;</span><br><span class="line">                this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除一个todo</span><br><span class="line">            deleteTodo(id)&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">            &#125;,</span><br><span class="line">            //全选or取消勾选</span><br><span class="line">            checkAllTodo(done)&#123;</span><br><span class="line">                this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除已完成的todo</span><br><span class="line">            clearAllTodo()&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            todos:&#123;</span><br><span class="line">                deep:true,</span><br><span class="line">                handler(value)&#123;</span><br><span class="line">                    localStorage.setItem(&#x27;todos&#x27;,JSON.stringify(value))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.pubId = pubsub.subscribe(&#x27;checkTodo&#x27;,this.checkTodo)</span><br><span class="line">            this.$bus.$on(&#x27;deleteTodo&#x27;,this.deleteTodo)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line">            pubsub.unsubscribe(this.pubId)</span><br><span class="line">            this.$bus.$off(&#x27;deleteTodo&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 4px 12px;</span><br><span class="line">        margin-bottom: 0;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #da4f49;</span><br><span class="line">        border: 1px solid #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn:focus &#123;</span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-container &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .todo-container .todo-wrap &#123;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/myItem.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @click=&quot;handleCheck(todo.id)&quot;/&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id,todo.title)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyItem&#x27;,</span><br><span class="line">        props:[&#x27;todo&#x27;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleCheck(id)&#123;                    </span><br><span class="line">                pubsub.publish(&#x27;checkTodo&#x27;,id)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(id,title)&#123;</span><br><span class="line">                if(confirm(&quot;确定删除任务：&quot;+title+&quot;吗？&quot;))&#123;</span><br><span class="line">                    this.$bus.$emit(&#x27;deleteTodo&#x27;,id)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        height: 36px;</span><br><span class="line">        line-height: 36px;</span><br><span class="line">        padding: 0 5px;</span><br><span class="line">        border-bottom: 1px solid #ddd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label li input &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 6px;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -1px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li button &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        display: none;</span><br><span class="line">        margin-top: 3px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:before &#123;</span><br><span class="line">        content: initial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:last-child &#123;</span><br><span class="line">        border-bottom: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover &#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover button&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-nextTick"><a href="#3-12-nextTick" class="headerlink" title="3.12. $nextTick"></a>3.12. $nextTick</h2><blockquote><p><code>$nextTick(回调函数)</code>可以将回调延迟到下次 DOM 更新循环之后执行</p></blockquote><p><strong>使用$nextTick优化Todo-List：</strong></p><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;todo-container&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;todo-wrap&quot;&gt;</span><br><span class="line">            &lt;MyHeader @addTodo=&quot;addTodo&quot;/&gt;</span><br><span class="line">            &lt;MyList :todos=&quot;todos&quot;/&gt;</span><br><span class="line">            &lt;MyFooter :todos=&quot;todos&quot; @checkAllTodo=&quot;checkAllTodo&quot; @clearAllTodo=&quot;clearAllTodo&quot;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    import MyHeader from &#x27;./components/MyHeader.vue&#x27;</span><br><span class="line">    import MyList from &#x27;./components/MyList.vue&#x27;</span><br><span class="line">    import MyFooter from &#x27;./components/MyFooter.vue&#x27;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyHeader,MyList,MyFooter &#125;,</span><br><span class="line">        data() &#123;</span><br><span class="line">            return &#123;</span><br><span class="line">                todos:JSON.parse(localStorage.getItem(&#x27;todos&#x27;)) || []</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            //添加一个todo</span><br><span class="line">            addTodo(todoObj)&#123;</span><br><span class="line">                this.todos.unshift(todoObj)</span><br><span class="line">            &#125;,</span><br><span class="line">            //勾选or取消勾选一个todo</span><br><span class="line">            checkTodo(_,id)&#123;</span><br><span class="line">                this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">                    if(todo.id === id) todo.done = !todo.done</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除一个todo</span><br><span class="line">            deleteTodo(id)&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; todo.id !== id)</span><br><span class="line">            &#125;,</span><br><span class="line">            //更新一个todo</span><br><span class="line">updateTodo(id,title)&#123;</span><br><span class="line">this.todos.forEach((todo)=&gt;&#123;</span><br><span class="line">if(todo.id === id) todo.title = title</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">            //全选or取消勾选</span><br><span class="line">            checkAllTodo(done)&#123;</span><br><span class="line">                this.todos.forEach(todo =&gt; todo.done = done)</span><br><span class="line">            &#125;,</span><br><span class="line">            //删除已完成的todo</span><br><span class="line">            clearAllTodo()&#123;</span><br><span class="line">                this.todos = this.todos.filter(todo =&gt; !todo.done)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;</span><br><span class="line">            todos:&#123;</span><br><span class="line">                deep:true,</span><br><span class="line">                handler(value)&#123;</span><br><span class="line">                    localStorage.setItem(&#x27;todos&#x27;,JSON.stringify(value))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            this.pubId = pubsub.subscribe(&#x27;checkTodo&#x27;,this.checkTodo)</span><br><span class="line">            this.$bus.$on(&#x27;deleteTodo&#x27;,this.deleteTodo)</span><br><span class="line">            this.$bus.$on(&#x27;updateTodo&#x27;,this.updateTodo)</span><br><span class="line">        &#125;,</span><br><span class="line">        beforeDestroy()&#123;</span><br><span class="line">            pubsub.unsubscribe(this.pubId)</span><br><span class="line">            this.$bus.$off(&#x27;deleteTodo&#x27;)</span><br><span class="line">            this.$bus.$off(&#x27;updateTodo&#x27;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    body &#123;</span><br><span class="line">        background: #fff;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        display: inline-block;</span><br><span class="line">        padding: 4px 12px;</span><br><span class="line">        margin-bottom: 0;</span><br><span class="line">        font-size: 14px;</span><br><span class="line">        line-height: 20px;</span><br><span class="line">        text-align: center;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">        box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2), 0 1px 2px rgba(0, 0, 0, 0.05);</span><br><span class="line">        border-radius: 4px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #e04e49;</span><br><span class="line">        border: 1px solid #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-danger:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: #bd362f;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-info &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: rgb(50, 129, 233);</span><br><span class="line">        border: 1px solid rgb(1, 47, 212);</span><br><span class="line">        margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn-info:hover &#123;</span><br><span class="line">        color: #fff;</span><br><span class="line">        background-color: rgb(1, 47, 212);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn:focus &#123;</span><br><span class="line">        outline: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-container &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        margin: 0 auto;</span><br><span class="line">    &#125;</span><br><span class="line">    .todo-container .todo-wrap &#123;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyItem.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">        &lt;label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; :checked=&quot;todo.done&quot; @click=&quot;handleCheck(todo.id)&quot;/&gt;</span><br><span class="line">            &lt;span v-show=&quot;!todo.isEdit&quot;&gt;&#123;&#123;todo.title&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;input type=&quot;text&quot; v-show=&quot;todo.isEdit&quot; :value=&quot;todo.title&quot; @blur=&quot;handleBlur(todo,$event)&quot; ref=&quot;inputTitle&quot;&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-danger&quot; @click=&quot;handleDelete(todo.id,todo.title)&quot;&gt;删除&lt;/button&gt;</span><br><span class="line">        &lt;button class=&quot;btn btn-info&quot; v-show=&quot;!todo.isEdit&quot; @click=&quot;handleEdit(todo)&quot;&gt;编辑&lt;/button&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import pubsub from &#x27;pubsub-js&#x27;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyItem&#x27;,</span><br><span class="line">        props:[&#x27;todo&#x27;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            handleCheck(id)&#123;                    </span><br><span class="line">                pubsub.publish(&#x27;checkTodo&#x27;,id)</span><br><span class="line">            &#125;,</span><br><span class="line">            handleDelete(id,title)&#123;</span><br><span class="line">                if(confirm(&quot;确定删除任务：&quot;+title+&quot;吗？&quot;))&#123;</span><br><span class="line">                    this.$bus.$emit(&#x27;deleteTodo&#x27;,id)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            handleEdit(todo)&#123;</span><br><span class="line">                // 如果todo自身有isEdit属性就将isEdit改成true</span><br><span class="line">if(Object.prototype.hasOwnProperty.call(todo,&#x27;isEdit&#x27;))&#123;</span><br><span class="line">todo.isEdit = true</span><br><span class="line">&#125;else&#123;</span><br><span class="line">                    // 如果没有就向todo中添加一个响应式的isEdit属性并设为true</span><br><span class="line">this.$set(todo,&#x27;isEdit&#x27;,true)</span><br><span class="line">&#125;</span><br><span class="line">                // 当Vue重新编译模板之后执行$nextTick()中的回调函数</span><br><span class="line">                this.$nextTick(function()&#123;</span><br><span class="line">                    // 使input框获取焦点</span><br><span class="line">                    this.$refs.inputTitle.focus()</span><br><span class="line">                &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">            // 当input框失去焦点时更新</span><br><span class="line">            handleBlur(todo,event)&#123;</span><br><span class="line">                todo.isEdit = false</span><br><span class="line">if(!event.target.value.trim()) return alert(&#x27;输入不能为空！&#x27;)</span><br><span class="line">this.$bus.$emit(&#x27;updateTodo&#x27;,todo.id,event.target.value)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    li &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">        height: 36px;</span><br><span class="line">        line-height: 36px;</span><br><span class="line">        padding: 0 5px;</span><br><span class="line">        border-bottom: 1px solid #ddd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label &#123;</span><br><span class="line">        float: left;</span><br><span class="line">        cursor: pointer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li label li input &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 6px;</span><br><span class="line">        position: relative;</span><br><span class="line">        top: -1px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li button &#123;</span><br><span class="line">        float: right;</span><br><span class="line">        display: none;</span><br><span class="line">        margin-top: 3px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:before &#123;</span><br><span class="line">        content: initial;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:last-child &#123;</span><br><span class="line">        border-bottom: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover &#123;</span><br><span class="line">        background-color: #eee;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    li:hover button&#123;</span><br><span class="line">        display: block;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>Todo-List最终效果：</strong></p><p><img src="/Todo-List%E6%9C%80%E7%BB%88%E6%95%88%E6%9E%9C.png" alt="Todo-List最终效果"></p><p><strong>总结：</strong></p><p>$nextTick：</p><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</li></ol><h2 id="3-13-过渡与动画"><a href="#3-13-过渡与动画" class="headerlink" title="3.13. 过渡与动画"></a>3.13. 过渡与动画</h2><p><code>src/App.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;root&quot;&gt;</span><br><span class="line">        &lt;MyAnimation/&gt;</span><br><span class="line">        &lt;MyTransition/&gt;</span><br><span class="line">        &lt;MyTransitionGroup/&gt;</span><br><span class="line">        &lt;ThirdPartAnimation/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyAnimation from &#x27;./components/MyAnimation.vue&#x27;</span><br><span class="line">    import MyTransition from &#x27;./components/MyTransition.vue&#x27;</span><br><span class="line">    import MyTransitionGroup from &#x27;./components/MyTransitionGroup.vue&#x27;</span><br><span class="line">    import ThirdPartAnimation from &#x27;./components/ThirdPartAnimation.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;App&#x27;,</span><br><span class="line">        components: &#123; MyAnimation,MyTransition,MyTransitionGroup,ThirdPartAnimation &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyAnimation</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;transition name=&quot;jojo&quot; appear&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;MyTitle&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">isShow:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter-active&#123;</span><br><span class="line">animation: jojo 0.5s linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-leave-active&#123;</span><br><span class="line">animation: jojo 0.5s linear reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes jojo &#123;</span><br><span class="line">from&#123;</span><br><span class="line">transform: translateX(-100%);</span><br><span class="line">&#125;</span><br><span class="line">to&#123;</span><br><span class="line">transform: translateX(0px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyTransition.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;transition name=&quot;jojo&quot; appear&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;MyTitle&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">isShow:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter,.jojo-leave-to&#123;</span><br><span class="line">transform: translateX(-100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter-to,.jojo-leave&#123;</span><br><span class="line">transform: translateX(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter-active,.jojo-leave-active&#123;</span><br><span class="line">transition: 0.5s linear;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/MyTransitionGroup.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;transition-group name=&quot;jojo&quot; appear&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-show=&quot;!isShow&quot; key=&quot;2&quot;&gt;大笨蛋&lt;/h1&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    name:&#x27;MyTitle&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">isShow:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">·</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter,.jojo-leave-to&#123;</span><br><span class="line">transform: translateX(-100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter-to,.jojo-leave&#123;</span><br><span class="line">transform: translateX(0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.jojo-enter-active,.jojo-leave-active&#123;</span><br><span class="line">transition: 0.5s linear;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><code>src/components/ThirdPartAnimation</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;</span><br><span class="line">&lt;transition-group </span><br><span class="line">appear</span><br><span class="line">name=&quot;animate__animated animate__bounce&quot;</span><br><span class="line">enter-active-class=&quot;animate__backInUp&quot; </span><br><span class="line">leave-active-class=&quot;animate__backOutUp&quot;</span><br><span class="line">&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;h1 v-show=&quot;!isShow&quot; key=&quot;2&quot;&gt;大笨蛋&lt;/h1&gt;</span><br><span class="line">&lt;/transition-group&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#x27;animate.css&#x27;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#x27;MyTitle&#x27;,</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">isShow:true</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1&#123;</span><br><span class="line">background-color: orange;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>效果：</strong></p><p><img src="/%E8%BF%87%E5%BA%A6%E4%B8%8E%E5%8A%A8%E7%94%BB.png" alt="过度与动画"></p><p><strong>总结：</strong></p><p>Vue封装的过度与动画：</p><ul><li>作用：在插入、更新或移除 DOM元素时，&#x3D;&#x3D;在合适的时候给元素添加样式类名&#x3D;&#x3D;</li></ul><ol><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li><code>v-enter</code>：进入的起点</li><li><code>v-enter-active</code>：进入过程中</li><li><code>v-enter-to</code>：进入的终点</li></ol></li><li>元素离开的样式：<ol><li><code>v-leave</code>：离开的起点</li><li><code>v-leave-active</code>：离开过程中</li><li><code>v-leave-to</code>：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;transition name=&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值</p></li></ol></li></ol><blockquote><ul><li>可以借助第三方库，npm官网上的 <code>animation.css</code></li><li><code>App.js</code>中直接引入<code>import animation.css</code></li></ul></blockquote><p><strong>使用动画优化Todo-List：</strong></p><p><code>src/components/MyList.vue</code>:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul class=&quot;todo-main&quot;&gt;</span><br><span class="line">        &lt;transition-group name=&quot;todo&quot; appear&gt;</span><br><span class="line">            &lt;MyItem v-for=&quot;todo in todos&quot; :key=&quot;todo.id&quot; :todo=&quot;todo&quot;/&gt;</span><br><span class="line">        &lt;/transition-group&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import MyItem from &#x27;./MyItem.vue&#x27;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        name:&#x27;MyList&#x27;,</span><br><span class="line">        components:&#123;MyItem&#125;,</span><br><span class="line">        props:[&#x27;todos&#x27;]</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    .todo-main &#123;</span><br><span class="line">        margin-left: 0px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        padding: 0px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-empty &#123;</span><br><span class="line">        height: 40px;</span><br><span class="line">        line-height: 40px;</span><br><span class="line">        border: 1px solid #ddd;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        padding-left: 5px;</span><br><span class="line">        margin-top: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .todo-enter-active&#123;</span><br><span class="line">animation: todo 0.5s linear;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.todo-leave-active&#123;</span><br><span class="line">animation: todo 0.5s linear reverse;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes todo &#123;</span><br><span class="line">from&#123;</span><br><span class="line">transform: translateX(-100%);</span><br><span class="line">&#125;</span><br><span class="line">to&#123;</span><br><span class="line">transform: translateX(0px);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> CSS </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络技术</title>
      <link href="/2024/01/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/"/>
      <url>/2024/01/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机网络概括"><a href="#计算机网络概括" class="headerlink" title="计算机网络概括"></a>计算机网络概括</h1><h2 id="计算机网络的概念"><a href="#计算机网络的概念" class="headerlink" title="计算机网络的概念"></a>计算机网络的概念</h2><h3 id="计算机网络的定义"><a href="#计算机网络的定义" class="headerlink" title="计算机网络的定义"></a>计算机网络的定义</h3><ul><li>计算机网络是指将地理位置不同的具有独立功能的多台计算机及其外部设备，通过通信线路连接起来，在网络操作系统，网络管理软件及网络通信协议的管理和协调下，实现资源共享和信息传输的计算机</li><li>简写：</li><li><u><strong>计算机网络是指将地理位置不同的且具有独立的多台计算机 通过通信线路连接，实现资源共享和信息传递。</strong></u>.</li></ul><h3 id="计算机网络的组成"><a href="#计算机网络的组成" class="headerlink" title="计算机网络的组成"></a>计算机网络的组成</h3><p>通信子网和资源子网组成的</p><ul><li>&#x3D;&#x3D;通信子网&#x3D;&#x3D;：<ul><li>提供共享的软件资源和硬件资源</li></ul></li><li>&#x3D;&#x3D;资源子网&#x3D;&#x3D;：<ul><li>提供信息交换的网络节点和通信线路</li></ul></li><li>比如说：两台电脑需要通信，中间的线路就叫做通信子网，通信子网并不是指那一条线，它是一个通俗的一个大的抽象概念，就是所有用来通信的，不管是光纤还是双绞线，它都被称为通信子网，所有服务于这个软件和硬件资源的，就是只要认为是资源的（比如说，一个文件1.mp3），然后要传输过去</li><li>总结：<ul><li>通信子网是提供网络节点和线路</li><li>资源子网是提供你需要的一些数据</li></ul></li></ul><h3 id="计算机网络的类型"><a href="#计算机网络的类型" class="headerlink" title="计算机网络的类型"></a>计算机网络的类型</h3><h5 id="（1）按照拓扑结构分类"><a href="#（1）按照拓扑结构分类" class="headerlink" title="（1）按照拓扑结构分类"></a>（1）按照拓扑结构分类</h5><ol><li>星型结构<ul><li>中间一个星，然后散开，（比如”米“字）</li></ul></li><li>树形结构<ul><li>树形是一个跟，相当与电脑的目录一样，一个树往下生根。</li></ul></li><li>总线型结构<ul><li>总线型就是一个大的线，所有的电脑是这个总线的一层分支</li></ul></li><li>环形结构<ul><li>环形就是一个环，这个环形跟总线型是比较类似的，这个是闭环，总线是直线。</li></ul></li><li>网状性结构<ul><li>就比如五角星，每台电脑中间都有线连接。</li></ul></li></ol><h5 id="（2）按照范围分类"><a href="#（2）按照范围分类" class="headerlink" title="（2）按照范围分类"></a>（2）按照范围分类</h5><ol><li>局域网 LAN <ul><li>局域网是最小的你如一栋楼，一个小区</li><li>范围是：几百米到十几公里</li></ul></li><li>城域网 MAN<ul><li>一个城市，比如果一个市区</li></ul></li><li>广域网 WAN<ul><li>比如说一个国家，或者是大省之间的一个通信</li><li>（记法：蓝莓味 LMW局城广</li></ul></li></ol><ul><li>补充： </li><li>个人局域网 PAN</li><li>互联网 Internet</li></ul><h5 id="（3）按照传输方式分类"><a href="#（3）按照传输方式分类" class="headerlink" title="（3）按照传输方式分类"></a>（3）按照传输方式分类</h5><ol><li>有线网络<ul><li>IEEE802.3</li></ul></li><li>无线网络<ul><li>IEEE802.11</li><li>WLAN 无线局域网（wireless）</li><li>WPAN 无线个人局域网</li></ul></li></ol><h2 id="计算机网络体系结构"><a href="#计算机网络体系结构" class="headerlink" title="计算机网络体系结构"></a>计算机网络体系结构</h2><h3 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h3><h5 id="按照传输方向分"><a href="#按照传输方向分" class="headerlink" title="按照传输方向分"></a>按照传输方向分</h5><ol><li>&#x3D;&#x3D;单工&#x3D;&#x3D;<ul><li>只能单方向传输的工作模式</li><li>就比如考四级的耳机（你只能单方面的收到别人的信号，自己不能发出信号</li></ul></li><li>&#x3D;&#x3D;双工&#x3D;&#x3D;<ul><li>在同一时间，线路上只能允许一个方向的数据通过</li><li>比如对讲机，甲在讲的时候，乙只能听，乙在讲的时候，甲只能听</li></ul></li><li>&#x3D;&#x3D;全双工&#x3D;&#x3D;<ul><li>双方可以同时进行数据通信</li><li>比如打电话，在同一时间可以来可以回。</li></ul></li></ol><h5 id="按照传输对象（方式）分"><a href="#按照传输对象（方式）分" class="headerlink" title="按照传输对象（方式）分"></a>按照传输对象（方式）分</h5><ol><li>单播（1对1）</li><li>双播（1对多，可以指定群聊）</li><li>广播（1对all，比如村里大喇叭）</li></ol><h3 id="数据交换"><a href="#数据交换" class="headerlink" title="数据交换"></a>数据交换</h3><ol><li>&#x3D;&#x3D;电路交换&#x3D;&#x3D;<ul><li>整个报文从源头到终点连续的传输</li><li>缺点：占用信道，其他的线路都不能传输。</li></ul></li><li>&#x3D;&#x3D;报文交换&#x3D;&#x3D;<ul><li>整个报文先传送到相邻节点，全部存储下来查找转发表，再转发到下一个结束点</li><li>有个中间商，不会霸占</li></ul></li><li>&#x3D;&#x3D;分组交换&#x3D;&#x3D;<ul><li>将一个报文分成多个分组，传送到相邻节点，在查找转发表，再传发到下一个节点 </li><li>会分成好几个组，通过不同的</li><li>&#x3D;&#x3D;最常用&#x3D;&#x3D;</li></ul></li></ol><h3 id="通信协议和体系结构"><a href="#通信协议和体系结构" class="headerlink" title="通信协议和体系结构"></a>通信协议和体系结构</h3><p>网络协议三要素</p><p>&#x3D;&#x3D;语法、语义、时序&#x3D;&#x3D;</p><p>OSI 参考模型</p><p>OSI 参考模型叫做：开放式系统，互联参考模型</p><p>从低到高排序，宗旨是下层为上层服务</p><table><thead><tr><th>OSI七层</th><th align="left">介绍</th></tr></thead><tbody><tr><td>应用层</td><td align="left">使应用程序通过网络服务</td></tr><tr><td>表示层</td><td align="left">用于处理交互数据的表示方式，比如格式转换、数据的加密和解密、数据压缩和恢复等功能</td></tr><tr><td>会话层</td><td align="left">负责会务通信中&#x3D;&#x3D;两个节点之间&#x3D;&#x3D;的&#x3D;&#x3D;回话建立维护和断开&#x3D;&#x3D;，以及数据的交换</td></tr><tr><td>传输层</td><td align="left">提供&#x3D;&#x3D;端到端之间的数据传输服务&#x3D;&#x3D;，实现对数据进行控制和操作的功能。</td></tr><tr><td>网络层</td><td align="left">单位 &#x3D;&#x3D;分组&#x3D;&#x3D;，在数据链路层的基础之上，提供点到&#x3D;&#x3D;点之间的通信&#x3D;&#x3D;，提供路由功能，实现拥塞控制、网络互联等功能</td></tr><tr><td>数据链路层</td><td align="left">单位 &#x3D;&#x3D;帧&#x3D;&#x3D;，在物理层的基础上，提供&#x3D;&#x3D;节点到节点之间的服务&#x3D;&#x3D;，采用差错控制和流量控制的方法。实现网络互联</td></tr><tr><td>物理层</td><td align="left">单位 &#x3D;&#x3D;bit&#x3D;&#x3D;，利用传输介质为通信的网络节点之间的建立</td></tr></tbody></table><p>节点是电脑和最近的路由器，两个电脑叫端到端</p><p>下三层只能保证实现最基本的数据交换，当他们是怎样控制的一些规则是上三层（会表应）所决定的</p><p>TCP&#x2F;IP 参考模型</p><p>就是把OSI简化了</p><table><thead><tr><th>TCP&#x2F;IP</th><th>OSI七层</th></tr></thead><tbody><tr><td>应用层</td><td>会话层、表示层、应用层</td></tr><tr><td>传输层</td><td>传输层</td></tr><tr><td>网际层</td><td>网络层</td></tr><tr><td>网络接口层</td><td>物理层和数据链路层</td></tr></tbody></table><h3 id="题库："><a href="#题库：" class="headerlink" title="题库："></a>题库：</h3><p>1、什么是计算机网络？</p><p>答：独立功能的计算机使用通信线路连接起来实现资源共享</p><p>2、计算机网络的组成</p><p>答：资源子网和通信子网。</p><p>3、拓扑分类</p><p>答：星型、树形、环形、总线型、网状型（常用）</p><p>4、按照范围分类？</p><p>答：LAN MAN WAN</p><p>5、传输方式：有线和无线</p><p>6、按照方向：单工、双工、全双工</p><p>7、按照传输对象：单播、多播、广播。</p><p>8、数据交换：电路交换、报文交换、分组交换。</p><p>9、网络协议三要素：语法、语义、时序。</p><p>10、OSI参考模型：应表会传网数物</p><p>11、TCP&#x2F;IP参考模型：网络接口层、网际层、传输层、应用层.</p><h3 id="计算机网络-第二章"><a href="#计算机网络-第二章" class="headerlink" title="计算机网络 第二章"></a>计算机网络 第二章</h3><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><h3 id="物理层的基本概念"><a href="#物理层的基本概念" class="headerlink" title="物理层的基本概念"></a>物理层的基本概念</h3><h4 id="四大特性"><a href="#四大特性" class="headerlink" title="四大特性"></a>四大特性</h4><p>机械、电器、功能、过程</p><blockquote><ul><li>机械特性：接口是怎样的</li><li>电气特性：用多少伏的电</li><li>功能特性：线路上平电压的特性 （什么介质怎么一个功能</li><li>过程特性：实现不同功能所发射信号的顺序</li></ul></blockquote><h4 id="两种信号"><a href="#两种信号" class="headerlink" title="两种信号"></a>两种信号</h4><p>数字、模拟</p><blockquote><ul><li>模拟信号：特定频段的信号（有更加丰富的表现形式<ul><li>连续的，有秩序的，被干扰后会失真</li></ul></li><li>数字信号：二进制（不是1就是0）<ul><li>离散的，有着更加强大的抗干扰能力</li></ul></li></ul></blockquote><h4 id="调制和编码"><a href="#调制和编码" class="headerlink" title="调制和编码"></a>调制和编码</h4><blockquote><ul><li>调制：模拟信号转换（return 模拟）</li><li>编码：数字信号转换  （return 数字）<ul><li>编码的步骤：采样、量化、编码。</li></ul></li><li>区别：<ul><li>数据可以通过编码手段转成数字信号，也可以通过调制手段将数据转为模拟信号</li><li>数字数据可以通过数字发送器转换为数字信号（编号），也可以通过调制器转化为模拟信号（调制）</li><li>模拟数据可以通过PCM编码器转化为数字信号（编码），也可以通过放大器调制器转化为模拟信号（调制）。</li></ul></li></ul></blockquote><h4 id="传输介质"><a href="#传输介质" class="headerlink" title="传输介质"></a>传输介质</h4><p>双绞线、光纤、同轴电缆、无线</p><blockquote><ul><li>双绞线<ul><li>屏蔽双绞线 &#x3D;&#x3D;STP&#x3D;&#x3D;：抗干扰强，贵一些（因为做了一些屏蔽外部干扰的处理）</li><li>非屏蔽双绞线 &#x3D;&#x3D;UTP&#x3D;&#x3D;：便宜，抗干扰较差</li><li>制作标准<ul><li>&#x3D;&#x3D;T568B&#x3D;&#x3D;：白橙、橙、白绿、蓝、白蓝、绿、白宗、宗</li><li>&#x3D;&#x3D;T568A&#x3D;&#x3D;：13、26替换：白绿、绿、白橙、蓝、白蓝、橙、白宗、宗</li></ul></li></ul></li><li>光纤：<ul><li>单面光纤<ul><li>只能传一种模式的光，中心纤芯很细，稳定性好，距离100KM</li></ul></li><li>多模光纤<ul><li>可传多种模式的光，中心纤芯较粗，距离2KM</li></ul></li></ul></li><li>同轴电缆：这个好，这个被淘汰了，不用学了</li><li>无线：无线信号频率 IEEE802.11 (标准，有线是802.3)</li></ul></blockquote><h4 id="三大部分"><a href="#三大部分" class="headerlink" title="三大部分"></a>三大部分</h4><p>源系统、传输系统、目标系统</p><blockquote><ul><li>源系统：发送数据的一端</li><li>传输系统：传输过程中的各种传输介质</li><li>目标系统：接收数据的电脑</li></ul></blockquote><h3 id="物理层的基本通信"><a href="#物理层的基本通信" class="headerlink" title="物理层的基本通信"></a>物理层的基本通信</h3><h4 id="四种信道复用技术"><a href="#四种信道复用技术" class="headerlink" title="四种信道复用技术"></a>四种信道复用技术</h4><p>&#x3D;&#x3D;复用技术&#x3D;&#x3D;是指一种在传输路径上综合多种信道，然后恢复原机制或解除终端各信道复用技术的过程。</p><p>将多种不同的信号在同一信道上进行传输，复用技术主要是用于解决不同信号传输时应该如何区分。</p><p><img src="https://i-blog.csdnimg.cn/blog_migrate/9716faf8ff09979922d25c0c2daf35da.png"></p><blockquote><ul><li>频分复用 FDM<ul><li>划分不同频率来并行传输信号</li></ul></li><li>分时复用 TDM<ul><li>划分不同的时间段来传输信号</li></ul></li><li>波分复用 WDM<ul><li>根据光波的长度进行传输</li></ul></li><li>码分复用 CDM<ul><li>在同一时间同一个频率根据传输的数据码进行区分</li></ul></li></ul></blockquote><h4 id="数据的传输方式"><a href="#数据的传输方式" class="headerlink" title="数据的传输方式"></a>数据的传输方式</h4><p>通过&#x3D;&#x3D;同时间传输数量&#x3D;&#x3D;分为：串行传输和并行传输</p><blockquote><ul><li>&#x3D;&#x3D;串行传输&#x3D;&#x3D;：使用一条数据线，将数据一位一位地一次传输，每一位数据占一个固定的时间长度。只需要少数几条线就可以在系统间交换信息，特别适用于计算机与计算机、外设之间的远距离通信。</li><li>&#x3D;&#x3D;并行传输&#x3D;&#x3D;：并行传输指的是数据以成组的方式，在多条并行信通上同时进行传输，是在传输中有多个数据位同时在设备之间进行传输。</li></ul></blockquote><p>通过&#x3D;&#x3D;数据报文双方的行为方式&#x3D;&#x3D;分为：同步传输和异步传输。</p><blockquote><ul><li>&#x3D;&#x3D;同步传输&#x3D;&#x3D;<ul><li>双方都在线，约定好了，比如打电话</li><li>同步传输的比特分组要大得多。它不是独立地发送每个字节，每个字节都有自己的开始位和停止位，而是把它们组合起来一起发送。我们将这些组合成为数据帧，或简称为帧。</li></ul></li><li>&#x3D;&#x3D;异步传输&#x3D;&#x3D;<ul><li>比如发消息</li><li>异步传输将比特分成小组进行传送，小组可以是8位的1个字节或更长。发送放可以在任何时刻发送这些比特组</li><li>而接收方从不知道它们会在什么时候到达。</li></ul></li></ul></blockquote><p>通过&#x3D;&#x3D;传输的信号&#x3D;&#x3D;分为：基带传输和频带传输</p><blockquote><ul><li>&#x3D;&#x3D;基带传输&#x3D;&#x3D;：传输数字信号叫做基带传输</li><li>&#x3D;&#x3D;频带传输&#x3D;&#x3D;：传输模拟信号叫做频带传输（300-3400HZ）</li></ul></blockquote><p>其他：</p><ul><li>传输方向：单工、半双工、全双工</li><li>传输对象：单播、组播和广播。</li></ul><h3 id="必考内容"><a href="#必考内容" class="headerlink" title="必考内容"></a>必考内容</h3><p>1、四大特性：机械特性、电气特性、功能特性、过程特性</p><p>2、两种信号：数字信号（常见 0 1）和模拟信号</p><p>3、调制和编码：调制是将任意信号转换为模拟信号，编码是将任意信号转换为数字信号。编码的步骤（采样、量化、编码）</p><p>4、传输介质：双绞线、光纤（单模和多膜）单 几千米  多 几十千米、</p><p>5、源系统、传输系统、目的系统</p><p>6、四种信道复用技术：频分、时分、波分、码分。 复用技术主要是用于解决不同信号传输时应该如何区分。</p><p>7、数据的传输方式：</p><ol><li>串行传输和并行传输</li><li>同步传输和异步传输</li><li>基带传输和频带传输</li></ol><h3 id="计算机网络基础练习题"><a href="#计算机网络基础练习题" class="headerlink" title="计算机网络基础练习题"></a>计算机网络基础练习题</h3><h3 id="一、简答题"><a href="#一、简答题" class="headerlink" title="一、简答题"></a>一、简答题</h3><p>1、什么是计算机网络</p><p>答:计算机网络是具有独立功能的计算机，通过通信线路连接起来实现资源共享。</p><p>2、写出双绞线的两种线序：T568A和T568B。</p><ul><li>T568A：白绿、绿、白橙、蓝、白蓝、橙、白宗、宗</li><li>T568B: 白橙、橙、白绿、蓝、白蓝、绿、白宗、宗</li></ul><p>3、写出OSI&#x2F;RM和TCP&#x2F;IP分层结构</p><ul><li>OSI：应表会传网数物</li><li>TCP：网络接口层（物理和数据链路层）、网际层、传输层、应用层。</li></ul><p>4、写出IP地址空间中的特殊IP地址。</p><p>保留IP地址：</p><ul><li>0.0.0.0：表示当前网络中的任何主机。</li><li>127.0.0.1：表示本地回环地址，用于主机自身进行自我测试和通信。</li></ul><p>5、请画出下列比特流10100010的曼彻斯特编码和差分曼彻斯特编码。</p><ul><li>画~</li></ul><p>6、写出分层模型的优点。</p><ul><li>模块化设计</li><li>易于理解</li><li>互操作性</li><li>容错性</li><li>可扩展性(每个都是独立的)</li></ul><p>7、写出OSI模型的层次结构及各层的功能。</p><ol><li>物理层（Physical Layer）：<ul><li>功能：负责在物理媒介上传输比特流，提供物理连接和电气特性以及数据传输的基本手段。</li></ul></li><li>数据链路层（Data Link Layer）：<ul><li>功能：负责将原始的比特流转换为逻辑上的数据帧，并提供错误检测和纠正、流控制、访问控制等功能。</li></ul></li><li>网络层（Network Layer）：<ul><li>功能：负责实现不同网络之间的数据包路由选择和转发，处理网络拓扑结构和寻址，确保数据可靠地从源节点到目标节点传输。</li></ul></li><li>传输层（Transport Layer）：<ul><li>功能：提供端到端的可靠数据传输服务，负责分段、流量控制、错误恢复等功能，并通过端口号标识应用程序之间的通信。</li></ul></li><li>会话层（Session Layer）：<ul><li>功能：负责建立、管理和终止会话（通信连接），实现不同主机之间的对话控制和同步。</li></ul></li><li>表示层（Presentation Layer）：<ul><li>功能：负责数据的格式转换、加密解密、压缩解压缩等操作，以确保不同系统上的应用程序能够相互理解和交换数据。</li></ul></li><li>应用层（Application Layer）：<ul><li>功能：为用户提供网络服务和应用程序接口，包括电子邮件、文件传输、远程登录、网页浏览等各种应用。</li></ul></li></ol><p>8、网卡、交换机和路由器的作用分别是什么？</p><ul><li>网卡是计算机与网络之间的接口设备，负责将数据转换为网络传输所需的格式。</li><li>交换机用于局域网内部，根据目标MAC地址转发和过滤数据包，提供高速、可靠的局域网连接。</li><li>路由器用于连接不同网络之间，根据IP地址确定数据包的最佳路径，并进行数据包转发和路由选择。</li></ul><p>9、TCP&#x2F;IP模型的网际层有哪些主要协议，各个协议的功能是什么？</p><ol><li>Internet Protocol（IP）：<ul><li>功能：IP是TCP&#x2F;IP模型中最核心的协议之一，负责定义和管理网络地址，以便将数据从源主机传输到目标主机。它实现了数据包的分组、路由选择和寻址功能。</li></ul></li><li>Internet Control Message Protocol（ICMP）：<ul><li>功能：ICMP用于在IP网络中传递控制消息，如错误报告、网络探测和诊断信息等。它提供了网络中的通信状态和异常情况的反馈和报告。</li></ul></li><li>Address Resolution Protocol（ARP）：<ul><li>功能：ARP用于将IP地址转换为对应的物理MAC地址。当一个主机需要发送数据到另一个主机时，它需要知道目标主机的MAC地址，ARP协议负责将目标IP地址解析成对应的MAC地址。</li></ul></li><li>Internet Group Management Protocol（IGMP）：<ul><li>功能：IGMP用于在多播（Multicast）通信中，允许主机加入或离开一个多播组，并向路由器发送相应的组管理信息。</li></ul></li><li>Internet Protocol Security（IPSec）：<ul><li>功能：IPSec提供了通过对IP数据包进行加密和认证来保障网络通信的安全性。它可以用于建立虚拟专用网络（VPN）和提供数据包级的加密和认证机制。</li></ul></li></ol><p>10、写出TCP&#x2F;IP模型的层次结构及各层的功能。</p><ol><li>应用层（Application Layer）：<ul><li>功能：提供应用程序与网络通信的接口，负责定义应用层协议，例如HTTP、SMTP、FTP等。应用层协议定义了数据的格式、传输方式和通信规则。</li></ul></li><li>传输层（Transport Layer）：<ul><li>功能：负责在网络节点之间建立、管理和终止数据传输通路。主要协议包括传输控制协议（TCP）和用户数据报协议（UDP）。传输层提供端到端的可靠数据传输、错误检测和恢复机制。</li></ul></li><li>网际层（Internet Layer）：<ul><li>功能：处理网络间的数据传输和路由选择。主要协议包括网际协议（IP）、地址解析协议（ARP）、互联网控制消息协议（ICMP）等。网际层负责将数据包从源主机传输到目标主机，并处理数据包的路由选择和跨网络传输。</li></ul></li><li>网络接口层（Network Interface Layer）：<ul><li>功能：在物理网络上发送和接收数据包。该层处理硬件接口和设备驱动程序，以及数据包的封装和解封装。它与特定的物理网络技术有关，如以太网、无线局域网等。</li></ul></li></ol><h3 id="二、案例分析题"><a href="#二、案例分析题" class="headerlink" title="二、案例分析题"></a>二、案例分析题</h3><ol><li><blockquote><p>亚星航公司申请了一个C类网络地址：192.168.10.0，子网掩码为255.255.255.0，由于工作需要，需对网络进行划分，要求如下：<br>将此网络划分成6个子网，请分别写出划分后子网掩码，每个子网的网络地址和广播地址，每个子网的主机数量及主机地址范围。</p><ul><li>2^n^ &gt; 6,n&#x3D;3,2^3^&#x3D;8&gt;6，子网掩码（255.255.255.224）舍去全0和全1剩下：</li><li>192.168.10.32（001）<ul><li>网络地址：192.168.10.32</li><li>广播地址：192.168.10.63</li><li>主机可用范围：192.168.10.33~192.168.10.62</li></ul></li><li>192.168.10.64（010）<ul><li>网络地址：192.168.10.64</li><li>广播地址：192.168.10.95</li><li>主机可用范围：192.168.10.65~192.168.10.94</li></ul></li><li>192.168.10.96（011）<ul><li>网络地址：192.168.10.96</li><li>广播地址：192.168.10.127</li><li>主机可用范围：192.168.10.97~192.168.10.126</li></ul></li><li>192.168.10.128（100）<ul><li>网络地址：192.168.10.128</li><li>广播地址：192.168.10.159</li><li>主机可用范围：192.168.10.129~192.168.10.158</li></ul></li><li>192.168.10.160（101）<ul><li>网络地址：192.168.10.160</li><li>广播地址：192.168.10.191</li><li>主机可用范围：192.168.10.161~192.168.10.190</li></ul></li><li>192.168.10.192（110）<ul><li>网络地址：192.168.10.192</li><li>广播地址：192.168.10.223</li><li>主机可用范围：192.168.10.193~192.168.10.222</li></ul></li></ul></blockquote></li><li><p>下图对应的曼彻斯特编码值和差分曼彻斯特编码值分别是什么？</p><p>这里没图片，就说一下看法：</p><ul><li>曼彻斯特编码：上0、下1</li><li>差分曼彻斯特编码：0跳、1不跳（看虚线，虚线实了就是跳了，还是虚线就是没跳）</li></ul></li><li><p>请画出下列比特流101100101的曼彻斯特编码和差分曼彻斯特编码。</p><ul><li>画画~</li></ul></li><li><blockquote><p>瑞航公司网络地址为172.16. 0.0，子网掩码为255.255.0.0，现因重新划分部门，需将该网络划分成6个子网，请分别写出划分后子网掩码，每个子网的网络地址和广播地址，每个子网的主机数量及主机地址范围。</p><ul><li>2^n^ &gt; 6,n&#x3D;3,2^3^&#x3D;8&gt;6，子网掩码（255.255.224.0）舍去全0和全1剩下：</li><li>172.16.32.0（001）</li><li>172.16.64.0（010）</li><li>172.16.96.0（011）</li><li>172.16.128.0（100）</li><li>172.16.160.0（101）</li><li>172.16.192.0（110）</li><li>剩下的懒得写了，这里先写出了各个网段，可以参考上面的。</li></ul></blockquote></li><li><blockquote><p>博知公司有8个子网，分别是： </p><p>192.168.240.0&#x2F;24、192.168.241.0&#x2F;24、192.168.242.0&#x2F;24、192.168.243.0&#x2F;24 、192.168.244.0&#x2F;24 、192.168.245.0&#x2F;24 、192.168.246.0&#x2F;24 、192.168.247.0&#x2F;24</p><p>现在将这8个类网络聚合为一个网络，请给出聚合后的网络地址和子网掩码。</p><ul><li>观察这八个子网的网络地址，可以发现它们的前三个字节都相同，只有最后一个字节不同。</li><li>这八个子网的共同前缀是192.168.240.0&#x2F;21。在这个聚合后的网络中，前21位（192.168.240）表示网络地址，最后11位（.0）表示主机地址。</li><li>因此，聚合后的网络地址是192.168.240.0，子网掩码是255.255.248.0（&#x2F;21）。</li></ul></blockquote></li><li><blockquote><p>福润公司有4个子网，分别是：</p><p>192.168.128.0&#x2F;24</p><p>192.168.129.0&#x2F;24</p><p>192.168.130.0&#x2F;24</p><p>192.168.131.0&#x2F;24</p><p>现在将这4个类网络聚合为一个网络，请给出聚合后的网络地址和子网掩码。</p><ul><li>要将这四个子网聚合为一个网络，需要找到它们的公共前缀。观察这四个子网的网络地址，可以发现它们的前三个字节都相同，只有最后一个字节不同。</li><li>这四个子网的共同前缀是192.168.128.0&#x2F;22。在这个聚合后的网络中，前22位（192.168.128）表示网络地址，最后10位（.0）表示主机地址。</li><li>因此，聚合后的网络地址是192.168.128.0，子网掩码是255.255.252.0（&#x2F;22）。</li></ul></blockquote></li><li><blockquote><p>CRC属于检错码还是纠错码？如果某一数据通信系统采用CRC校验方式，生成多项式G(x)&#x3D;X4+X3+1，目的节点接收到二进制比特序列为110111101，判断传输过程中是否出现了错误？（要求包含过程）</p><ul><li><p>CRC（循环冗余校验）属于检错码，用于检测数据传输中的错误。</p><p>对于给定的多项式G(x) &#x3D; X^4 + X^3 + 1，CRC校验的过程如下：</p><ol><li>首先，将发送方的数据序列和多项式进行按位异或运算。<ul><li>数据序列：110111101</li><li>多项式：10011</li></ul></li><li>进行按位异或运算，将数据序列左移4位，然后进行异或操作：<ul><li>异或结果：110111101000</li></ul></li><li>检查异或结果是否为0。如果结果为0，则说明在传输过程中没有错误；如果结果不为0，则说明存在错误。</li></ol><p>在这个例子中，异或结果为110111101000，不等于0，因此可以判断在传输过程中出现了错误。</p></li></ul></blockquote></li><li><p>需发送数据1101011011，采用CRC检验，生成多项式G(x)&#x3D;x4+x+1，求冗余位和最终发送的数据，并进行验证。（不会）</p></li><li><p>请给出CIDR地址块206.0.64.8&#x2F;18的全部细节，包含最小地址，最大地址，地址数量，聚合 C类网数量，地址掩码。（不会）</p></li><li><blockquote><p>已知某个网络的地址为218.75.230.0，使用子网掩码为255.255.255.224对其进行子网划分，请给出划分后的子网数量，每个子网的网络地址和广播地址，每个子网的主机地址范围.</p><ol><li><p>首先将网络地址和子网掩码进行按位与运算，得到网络前缀： 218.75.230.0 (网络地址) 255.255.255.224 (子网掩码)</p><p>218.75.230.0      (网络前缀)</p></li><li><p>每个子网的网络地址可以通过在网络前缀的基础上增加主机部分来得到。主机部分的范围是从1到子网容量减1（31）。</p></li></ol><p>子网的网络地址、广播地址和主机地址范围如下：</p><ol><li>子网1：<ul><li>网络地址：218.75.230.0</li><li>广播地址：218.75.230.31</li><li>主机地址范围：218.75.230.1 - 218.75.230.30</li></ul></li><li>子网2：<ul><li>网络地址：218.75.230.32</li><li>广播地址：218.75.230.63</li><li>主机地址范围：218.75.230.33 - 218.75.230.62</li></ul></li><li>子网3：<ul><li>网络地址：218.75.230.64</li><li>广播地址：218.75.230.95</li><li>主机地址范围：218.75.230.65 - 218.75.230.94</li></ul></li></ol><p>……依此类推，直到子网32。</p><p>需要注意的是，每个子网的第一个地址是网络地址，最后一个地址是广播地址，中间的地址是可用的主机地址。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL基础</title>
      <link href="/2023/12/26/MySQL%E5%9F%BA%E7%A1%80/"/>
      <url>/2023/12/26/MySQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="2-SQL"><a href="#2-SQL" class="headerlink" title="2. SQL"></a>2. SQL</h1><p>全称 Structured Query Language，结构化查询语言。操作关系型数据库的编程语言，定义了 一套操作关系型数据库统一&#x3D;&#x3D;标准&#x3D;&#x3D; 。</p><h2 id="2-1-SQL-通用语法"><a href="#2-1-SQL-通用语法" class="headerlink" title="2.1 SQL 通用语法"></a>2.1 SQL 通用语法</h2><p>在学习具体的SQL语句之前，先来了解一下SQL语言的同于语法。 </p><ul><li>1). SQL语句可以单行或多行书写，以分号结尾。</li><li>2). SQL语句可以使用空格&#x2F;缩进来增强语句的可读性。</li><li>3). MySQL数据库的SQL语句不区分大小写，关键字建议使用大写。 </li><li>4). 注释： <ul><li>单行注释：– 注释内容 或 # 注释内容 </li><li>多行注释：&#x2F;* 注释内容 *&#x2F;</li></ul></li></ul><h2 id="2-2-SQL分类"><a href="#2-2-SQL分类" class="headerlink" title="2.2 SQL分类"></a>2.2 SQL分类</h2><p>SQL 语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL。</p><table><thead><tr><th>分类</th><th>全称</th><th>说明</th></tr></thead><tbody><tr><td>DDL</td><td>Data Definition Language</td><td>数据定义语言，用来定义数据库对象（数据库，表，字段）</td></tr><tr><td>DML</td><td>Data Manipulation Language</td><td>数据操作语言，用来对数据库表中的数据进行增删改</td></tr><tr><td>DQL</td><td>Data Query Language</td><td>数据查询语言，用来查询数据库中表的记录</td></tr><tr><td>DCL</td><td>Data Control Language</td><td>数据控制语言，用来创建数据库用户、控制数据库的 访问权限</td></tr></tbody></table><h2 id="2-3-DDL"><a href="#2-3-DDL" class="headerlink" title="2.3 DDL"></a>2.3 DDL</h2><h4 id="2-3-1-数据库操作"><a href="#2-3-1-数据库操作" class="headerlink" title="2.3.1 数据库操作"></a>2.3.1 数据库操作</h4><ol><li><p>查询所有数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">| test               |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure></li><li><p>查询当前数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure></li><li><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database [ if <span class="keyword">not</span> <span class="keyword">exists</span> ] 数据库名 [ <span class="keyword">default</span> charset 字符集 ] [ <span class="keyword">collate</span> 排序</span><br><span class="line">规则 ] ;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [ if <span class="keyword">exists</span> ] 数据库名 ;</span><br></pre></td></tr></table></figure><p>如果删除一个不存在的数据库，将会报错。此时，可以加上参数 if exists ，如果数据库存在，再 执行删除，否则不执行删除。</p></li><li><p>切换数据库</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><p>我们要操作某一个数据库下的表时，就需要通过该指令，切换到对应的数据库下，否则是不能操作的。 比如，切换到 test 数据，执行如下SQL：</p></li></ol><p>案例：</p><ul><li><p>创建一个test数据库，使用数据库默认的字符集。</p></li><li><pre><code class="sql">create database test;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 在同一个数据库服务器中，==不能创建两个名称相同的数据库==，否则将会报错。</span><br><span class="line"></span><br><span class="line">- 可以通过==if not exists== 参数来解决这个问题，数据库不存在, 则创建该数据库，如果存在，则不 创建。</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  create database if not extists test;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>创建一个 test 数据库，并且&#x3D;&#x3D;指定字符集&#x3D;&#x3D;.</p></li><li><pre><code>create database itheima default charset utf8mb4;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">#### 2.3.2 表操作</span><br><span class="line"></span><br><span class="line">##### 2.3.2.1 表操作--查询创建</span><br><span class="line"></span><br><span class="line">1. 查询当前数据库所有表格</span><br><span class="line"></span><br><span class="line">   ```sql</span><br><span class="line">   show tables;</span><br></pre></td></tr></table></figure> 比如,我们可以切换到sys这个系统数据库,并查看系统数据库中的所有表结构。 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use sys;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br></pre></td></tr></table></figure> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; use sys;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| Tables_in_sys                                 |</span><br><span class="line">+-----------------------------------------------+</span><br><span class="line">| host_summary                                  |</span><br><span class="line">| host_summary_by_file_io                       |</span><br><span class="line">| host_summary_by_file_io_type                  |</span><br><span class="line">| host_summary_by_stages                        |</span><br><span class="line">| host_summary_by_statement_latency             |</span><br><span class="line">| host_summary_by_statement_type                |</span><br><span class="line">| innodb_buffer_stats_by_schema                 |</span><br><span class="line">| innodb_buffer_stats_by_table                  |</span><br><span class="line">| innodb_lock_waits                             |</span><br><span class="line">| io_by_thread_by_latency                       |</span><br></pre></td></tr></table></figure></code></pre></li></ul><ol start="2"><li><p>查看指定表结构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> 表名;</span><br></pre></td></tr></table></figure><p>通过这条指令，我们可以查看到指定表的字段，字段的类型、是否可以为NULL，是否存在默认值等信 息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc test_table;</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| Field | Type     | Null | Key | Default | Extra |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">| id    | int      | YES  |     | NULL    |       |</span><br><span class="line">| name  | char(20) | YES  |     | NULL    |       |</span><br><span class="line">| age   | int      | YES  |     | NULL    |       |</span><br><span class="line">+-------+----------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>查询指定表的建表语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> 表名;</span><br></pre></td></tr></table></figure><p>通过这条指令，主要是用来查看建表语句的，而有部分参数我们在创建表的时候，并未指定也会查询 到，因为这部分是数据库的默认值，如：存储引擎、字符集等。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; show create table test_table;</span><br><span class="line">+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| Table      | Create Table</span><br><span class="line">                                                                                       |</span><br><span class="line">+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| test_table | CREATE TABLE `test_table` (</span><br><span class="line">  `id` int DEFAULT NULL,</span><br><span class="line">  `name` char(20) DEFAULT NULL,</span><br><span class="line">  `age` int DEFAULT NULL COMMENT &#x27;年龄&#x27;</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci |</span><br><span class="line">+------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure></li><li><p>创建表结构</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名(</span><br><span class="line">字段<span class="number">1</span> 字段<span class="number">1</span>类型 [ COMMENT 字段<span class="number">1</span>注释 ],</span><br><span class="line">字段<span class="number">2</span> 字段<span class="number">2</span>类型 [COMMENT 字段<span class="number">2</span>注释 ],</span><br><span class="line">字段<span class="number">3</span> 字段<span class="number">3</span>类型 [COMMENT 字段<span class="number">3</span>注释 ],</span><br><span class="line">......</span><br><span class="line">字段n 字段n类型 [COMMENT 字段n注释 ]</span><br><span class="line">) [ COMMENT 表注释 ] ;</span><br></pre></td></tr></table></figure><blockquote><p>注意：[…] 内为可选参数，最后一个字段后面没有逗号</p></blockquote><p>比如，我们创建一张表 tb_user ，对应的结构如下，那么建表语句为：</p><table><thead><tr><th>id</th><th>name</th><th>age</th><th>gender</th></tr></thead><tbody><tr><td>1</td><td>小明</td><td>28</td><td>男</td></tr><tr><td>2</td><td>小红</td><td>19</td><td>女</td></tr><tr><td>3</td><td>张三</td><td>20</td><td>男</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_user(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">age <span class="type">int</span> comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">gender <span class="type">varchar</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;用户表&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-3-2-2-表操作-数据类型"><a href="#2-3-2-2-表操作-数据类型" class="headerlink" title="2.3.2.2 表操作-数据类型"></a>2.3.2.2 表操作-数据类型</h5><p>在上述的建表语句中，我们在指定字段的数据类型时，用到了<code>int</code> ，<code>varchar</code>，那么在MySQL中除了 以上的数据类型，还有哪些常见的数据类型呢？ 接下来,我们就来详细介绍一下MySQL的数据类型。 </p><p>MySQL中的数据类型有很多，主要分为三类：&#x3D;&#x3D;数值类型&#x3D;&#x3D;、&#x3D;&#x3D;字符串类型&#x3D;&#x3D;、&#x3D;&#x3D;日期时间类型&#x3D;&#x3D;。</p><h6 id="1-数值类型"><a href="#1-数值类型" class="headerlink" title="1.数值类型"></a>1.数值类型</h6><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">范围（有符号）</th><th align="left">范围（无符号）</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">TINYINT</td><td align="left">1 Bytes</td><td align="left">(-128，127)</td><td align="left">(0，255)</td><td align="left">小整数值</td></tr><tr><td align="left">SMALLINT</td><td align="left">2 Bytes</td><td align="left">(-32 768，32 767)</td><td align="left">(0，65 535)</td><td align="left">大整数值</td></tr><tr><td align="left">MEDIUMINT</td><td align="left">3 Bytes</td><td align="left">(-8 388 608，8 388 607)</td><td align="left">(0，16 777 215)</td><td align="left">大整数值</td></tr><tr><td align="left">INT或INTEGER</td><td align="left">4 Bytes</td><td align="left">(-2 147 483 648，2 147 483 647)</td><td align="left">(0，4 294 967 295)</td><td align="left">大整数值</td></tr><tr><td align="left">BIGINT</td><td align="left">8 Bytes</td><td align="left">(-9,223,372,036,854,775,808，9 223 372 036 854 775 807)</td><td align="left">(0，18 446 744 073 709 551 615)</td><td align="left">极大整数值</td></tr><tr><td align="left">FLOAT</td><td align="left">4 Bytes</td><td align="left">(-3.402 823 466 E+38，-1.175 494 351 E-38)，0，(1.175 494 351 E-38，3.402 823 466 351 E+38)</td><td align="left">0，(1.175 494 351 E-38，3.402 823 466 E+38)</td><td align="left">单精度 浮点数值</td></tr><tr><td align="left">DOUBLE</td><td align="left">8 Bytes</td><td align="left">(-1.797 693 134 862 315 7 E+308，-2.225 073 858 507 201 4 E-308)，0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">0，(2.225 073 858 507 201 4 E-308，1.797 693 134 862 315 7 E+308)</td><td align="left">双精度 浮点数值</td></tr><tr><td align="left">DECIMAL</td><td align="left">对DECIMAL(M,D) ，如果M&gt;D，为M+2否则为D+2</td><td align="left">依赖于M和D的值</td><td align="left">依赖于M和D的值</td><td align="left">小数值</td></tr></tbody></table><blockquote><p>如:</p><ol><li>年龄字段 – 不会出现负数, 而且人的年龄不会太大 age tinyint unsigned </li><li>分数 – 总分100分, 最多出现一位小数 score double(4,1)</li></ol></blockquote><h6 id="2-日期类型"><a href="#2-日期类型" class="headerlink" title="2.日期类型"></a>2.日期类型</h6><table><thead><tr><th align="left">类型</th><th align="left">大小 ( bytes)</th><th align="left">范围</th><th align="left">格式</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">DATE</td><td align="left">3</td><td align="left">1000-01-01&#x2F;9999-12-31</td><td align="left">YYYY-MM-DD</td><td align="left">日期值</td></tr><tr><td align="left">TIME</td><td align="left">3</td><td align="left">‘-838:59:59’&#x2F;‘838:59:59’</td><td align="left">HH:MM:SS</td><td align="left">时间值或持续时间</td></tr><tr><td align="left">YEAR</td><td align="left">1</td><td align="left">1901&#x2F;2155</td><td align="left">YYYY</td><td align="left">年份值</td></tr><tr><td align="left">DATETIME</td><td align="left">8</td><td align="left">‘1000-01-01 00:00:00’ 到 ‘9999-12-31 23:59:59’</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值</td></tr><tr><td align="left">TIMESTAMP</td><td align="left">4</td><td align="left">‘1970-01-01 00:00:01’ UTC 到 ‘2038-01-19 03:14:07’ UTC结束时间是第 <strong>2147483647</strong> 秒，北京时间 <strong>2038-1-19 11:14:07</strong>，格林尼治时间 2038年1月19日 凌晨 03:14:07</td><td align="left">YYYY-MM-DD hh:mm:ss</td><td align="left">混合日期和时间值，时间戳</td></tr></tbody></table><blockquote><p>如:</p><ol><li>生日字段 birthday</li></ol><p>   birthday date </p><ol start="2"><li><p>创建时间 createtime </p><p>createtime datetime</p></li></ol></blockquote><h6 id="3-字符串类型"><a href="#3-字符串类型" class="headerlink" title="3.字符串类型"></a>3.字符串类型</h6><table><thead><tr><th align="left">类型</th><th align="left">大小</th><th align="left">用途</th></tr></thead><tbody><tr><td align="left">CHAR</td><td align="left">0-255 bytes</td><td align="left">定长字符串</td></tr><tr><td align="left">VARCHAR</td><td align="left">0-65535 bytes</td><td align="left">变长字符串</td></tr><tr><td align="left">TINYBLOB</td><td align="left">0-255 bytes</td><td align="left">不超过 255 个字符的二进制字符串</td></tr><tr><td align="left">TINYTEXT</td><td align="left">0-255 bytes</td><td align="left">短文本字符串</td></tr><tr><td align="left">BLOB</td><td align="left">0-65 535 bytes</td><td align="left">二进制形式的长文本数据</td></tr><tr><td align="left">TEXT</td><td align="left">0-65 535 bytes</td><td align="left">长文本数据</td></tr><tr><td align="left">MEDIUMBLOB</td><td align="left">0-16 777 215 bytes</td><td align="left">二进制形式的中等长度文本数据</td></tr><tr><td align="left">MEDIUMTEXT</td><td align="left">0-16 777 215 bytes</td><td align="left">中等长度文本数据</td></tr><tr><td align="left">LONGBLOB</td><td align="left">0-4 294 967 295 bytes</td><td align="left">二进制形式的极大文本数据</td></tr><tr><td align="left">LONGTEXT</td><td align="left">0-4 294 967 295 bytes</td><td align="left">极大文本数据</td></tr></tbody></table><blockquote><p>如：</p><ol><li>用户名 username ——&gt; 长度不定, 最长不会超过50</li></ol><ul><li>username varchar(50)</li></ul><ol start="2"><li>性别 gender ———&gt; 存储值, 不是男,就是女</li></ol><ul><li>gender char(1)</li></ul><ol start="3"><li>手机号 phone ——–&gt; 固定长度为11</li></ol><ul><li>phone char(11)</li></ul></blockquote><h5 id="2-3-2-3-表操作-案例"><a href="#2-3-2-3-表操作-案例" class="headerlink" title="2.3.2.3 表操作-案例"></a>2.3.2.3 表操作-案例</h5><p>设计一张员工信息表，要求如下：</p><ol><li><p>编号（纯数字） </p></li><li><p>员工工号 (字符串类型，长度不超过10位) </p></li><li><p>员工姓名（字符串类型，长度不超过10位）</p></li><li><p>性别（男&#x2F;女，存储一个汉字</p></li><li><p>年龄（正常人年龄，不可能存储负数）</p></li><li><p>身份证号（二代身份证号均为18位，身份证中有X这样的字符）</p></li><li><p>入职时间（取值年月日即可）</p></li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">) comment <span class="string">&#x27;员工表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>SQL语句编写完毕之后，就可以在MySQL的命令行中执行SQL，然后也可以通过 desc 指令查询表结构 信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; desc emp;</span><br><span class="line">+-----------+------------------+------+-----+---------+-------+</span><br><span class="line">| Field     | Type             | Null | Key | Default | Extra |</span><br><span class="line">+-----------+------------------+------+-----+---------+-------+</span><br><span class="line">| id        | int              | YES  |     | NULL    |       |</span><br><span class="line">| workno    | varchar(10)      | YES  |     | NULL    |       |</span><br><span class="line">| name      | varchar(10)      | YES  |     | NULL    |       |</span><br><span class="line">| gender    | char(1)          | YES  |     | NULL    |       |</span><br><span class="line">| age       | tinyint unsigned | YES  |     | NULL    |       |</span><br><span class="line">| idcard    | char(18)         | YES  |     | NULL    |       |</span><br><span class="line">| entrydate | date             | YES  |     | NULL    |       |</span><br><span class="line">+-----------+------------------+------+-----+---------+-------+</span><br><span class="line">7 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><blockquote><p>表结构创建好了，里面的name字段是varchar类型，最大长度为10，也就意味着如果超过10将会报 错，如果我们想修改这个字段的类型 或 修改字段的长度该如何操作呢？接下来再来讲解DDL语句中， 如何操作表字段。</p></blockquote><h5 id="2-3-2-4-表操作-修改"><a href="#2-3-2-4-表操作-修改" class="headerlink" title="2.3.2.4 表操作-修改"></a>2.3.2.4 表操作-修改</h5><ol><li><p>添加字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> 字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p>为emp表增加一个新的字段”昵称”为nickname，类型为varchar(20)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">ADD</span> nickname <span class="type">varchar</span>(<span class="number">20</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>修改字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 MODIFY 字段名 新数据类型 (长度);</span><br></pre></td></tr></table></figure></li><li><p>修改字段和字段类型</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 CHANGE 旧字段名 新字段名 类型 (长度) [ COMMENT 注释 ] [ 约束 ];</span><br></pre></td></tr></table></figure><p>将emp表的nickname字段修改为username，类型为varchar(30)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp CHANGE nickname username <span class="type">varchar</span>(<span class="number">30</span>) COMMENT <span class="string">&#x27;昵称&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名 <span class="keyword">DROP</span> 字段名;</span><br></pre></td></tr></table></figure><p>将emp表的字段username删除</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp <span class="keyword">DROP</span> username;</span><br></pre></td></tr></table></figure></li><li><p>修改表名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 rename <span class="keyword">to</span> 新表名;</span><br></pre></td></tr></table></figure><p>将emp表的表名修改为 employee</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> emp RENAME <span class="keyword">TO</span> employee;</span><br></pre></td></tr></table></figure></li></ol><h5 id="2-3-2-5-表操作-删除"><a href="#2-3-2-5-表操作-删除" class="headerlink" title="2.3.2.5 表操作-删除"></a>2.3.2.5 表操作-删除</h5><ol><li><p>删除表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> [ IF <span class="keyword">EXISTS</span> ] 表名;</span><br></pre></td></tr></table></figure><blockquote><p>可选项 &#x3D;&#x3D;IF EXISTS&#x3D;&#x3D; 代表，只有&#x3D;&#x3D;表名存在时才会删除&#x3D;&#x3D;该表，表名不存在，则不执行删除操作(如果不 加该参数项，删除一张不存在的表，执行将会报错)。 </p><ul><li>案例:   如果tb_user表存在，则删除tb_user表</li><li><code>DROP TABLE IF EXISTS tb_user;</code></li></ul></blockquote></li><li><p>删除指定表，并重现创建</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> 表名;</span><br></pre></td></tr></table></figure><blockquote><p>注意: 在删除表的时候，表中的全部数据也都会被删除。</p></blockquote></li></ol><h2 id="2-4-DML"><a href="#2-4-DML" class="headerlink" title="2.4 DML"></a>2.4 DML</h2><p>DML英文全称是Data Manipulation Language(数据操作语言)，用来对数据库中表的数据记录进 行&#x3D;&#x3D;增、删、改&#x3D;&#x3D;操作。</p><blockquote><ul><li>添加数据（INSERT）</li><li>修改数据（UPDATE）</li><li>删除数据（DELETE）</li></ul></blockquote><h4 id="2-4-1-添加数据"><a href="#2-4-1-添加数据" class="headerlink" title="2.4.1 添加数据"></a>2.4.1 添加数据</h4><p>1、给指定字段添加数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><blockquote><p>案例: 给employee表所有的字段添加数据 ；</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> employee(id,workno,name,gender,age,idcard,entrydate)</span><br><span class="line"><span class="keyword">values</span>(<span class="number">1</span>,<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;Itcast&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;123456789012345678&#x27;</span>,<span class="string">&#x27;2000-01-01&#x27;</span>);</span><br></pre></td></tr></table></figure></blockquote><p>2、给全部字段添加数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...);</span><br></pre></td></tr></table></figure><blockquote><p>案例：插入数据到employee表，具体的SQL如下：</p><p><code>insert into employee values(2,&#39;2&#39;,&#39;张无忌&#39;,&#39;男&#39;,18,&#39;123456789012345670&#39;,&#39;2005-01- 01&#39;);</code></p></blockquote><p>3、批量插入数据</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 指点字段添加数据</span><br><span class="line">NSERT <span class="keyword">INTO</span> 表名 (字段名<span class="number">1</span>, 字段名<span class="number">2</span>, ...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值</span><br><span class="line"><span class="number">1</span>, 值<span class="number">2</span>, ...) ;</span><br><span class="line"></span><br><span class="line"># 给全局字段添加数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...), (值<span class="number">1</span>, 值<span class="number">2</span>, ...) ;</span><br></pre></td></tr></table></figure><blockquote><p>案例：批量插入数据到employee表，具体的SQL如下：</p><p><code>insert into employee values(3,&#39;3&#39;,&#39;韦一笑&#39;,&#39;男&#39;,38,&#39;123456789012345670&#39;,&#39;2005-01- 01&#39;),(4,&#39;4&#39;,&#39;赵敏&#39;,&#39;女&#39;,18,&#39;123456789012345670&#39;,&#39;2005-01-01&#39;);</code></p><ul><li>注意事项：</li><li>插入数据时，指定的&#x3D;&#x3D;字段顺序&#x3D;&#x3D;需要与值的顺序是一一&#x3D;&#x3D;对应的&#x3D;&#x3D;。</li><li>字符串和日期型数据应该包含在引号中。</li><li>插入的数据大小，应该在字段的规定范围内。</li></ul></blockquote><h4 id="2-4-2-修改数据"><a href="#2-4-2-修改数据" class="headerlink" title="2.4.2 修改数据"></a>2.4.2 修改数据</h4><p>修改数据的具体语法为:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> 表名 <span class="keyword">SET</span> 字段名<span class="number">1</span> <span class="operator">=</span> 值<span class="number">1</span> , 字段名<span class="number">2</span> <span class="operator">=</span> 值<span class="number">2</span> , .... [ <span class="keyword">WHERE</span> 条件 ] ;</span><br></pre></td></tr></table></figure><p>案例：</p><ul><li><p>A、 修改id为1的数据，将name修改为itheima</p></li><li><pre><code class="sql">update employee set name = &#39;itheima&#39; where id = 1;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- B、修改id为1的数据, 将name修改为小昭, gender修改为 女</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  update employee set name = &quot;小昭&quot;,gender = &#x27;女&#x27; where id = 1;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>C、 将所有的员工入职日期修改为 2008-01-01 （修改所有，把where省略了）</p></li><li><pre><code class="sql">update employee set entrydate = &#39;2008-01-01&#39;;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&gt; 注意事项: </span><br><span class="line">&gt;</span><br><span class="line">&gt; - 修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。</span><br><span class="line"></span><br><span class="line">#### 2.4.3 删除数据</span><br><span class="line"></span><br><span class="line">删除数据的具体语法为：</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">DELETE FROM 表名 [ WHERE 条件 ] </span><br></pre></td></tr></table></figure></code></pre></li></ul><p>案例:</p><ul><li><p>A、删除gender为女的员工</p></li><li><pre><code class="sql">delete from employee where gender = &#39;女&#39;;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- B、删除所有员工</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  delete from employee;</span><br></pre></td></tr></table></figure></code></pre></li></ul><blockquote><p>注意事项: </p><ul><li>DELETE 语句的条件可以有，也可以没有，如果没有条件，则会删除整张表的所有数 据。</li><li>DELETE 语句不能删除某一个字段的值(可以使用UPDATE，将该字段值置为NULL即 可)。</li><li>当进行删除全部数据操作时，datagrip会提示我们，询问是否确认删除，我们直接点击 Execute即可。</li></ul></blockquote><h2 id="2-5-DQL"><a href="#2-5-DQL" class="headerlink" title="2.5 DQL"></a>2.5 DQL</h2><ul><li>DQL英文全称是Data Query Language(数据查询语言)，数据查询语言，用来查询数据库中表的记 录。 </li><li>查询关键字: SELECT </li><li>在一个正常的业务系统中，查询操作的频次是要远高于增删改的，当我们去访问企业官网、电商网站， 在这些网站中我们所看到的数据，实际都是需要从数据库中查询并展示的。而且在查询的过程中，可能 还会涉及到条件、排序、分页等操作。</li></ul><p>那么，本小节我们主要学习的就是如何进行数据的查询操作。 我们先来完成如下数据准备工作:</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 删除表</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> emp;</span><br><span class="line"># 创建 emp 表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp(</span><br><span class="line">id <span class="type">int</span> comment <span class="string">&#x27;编号&#x27;</span>,</span><br><span class="line">workno <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;工号&#x27;</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">10</span>) comment <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">gender <span class="type">char</span>(<span class="number">1</span>) comment <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">age tinyint unsigned comment <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">idcard <span class="type">char</span>(<span class="number">18</span>) comment <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line">workaddress <span class="type">varchar</span>(<span class="number">50</span>) comment <span class="string">&#x27;工作地址&#x27;</span>,</span><br><span class="line">entrydate <span class="type">date</span> comment <span class="string">&#x27;入职时间&#x27;</span></span><br><span class="line">)comment <span class="string">&#x27;员工表&#x27;</span>;</span><br><span class="line"># 插入数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;00001&#x27;</span>, <span class="string">&#x27;柳岩666&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;123456789012345678&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2000-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;00002&#x27;</span>, <span class="string">&#x27;张无忌&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-09-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;00003&#x27;</span>, <span class="string">&#x27;韦一笑&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456789712345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2005-08-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;00004&#x27;</span>, <span class="string">&#x27;赵敏&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;123456757123845670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2009-12-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">&#x27;00005&#x27;</span>, <span class="string">&#x27;小昭&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;123456769012345678&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2007-07-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">&#x27;00006&#x27;</span>, <span class="string">&#x27;杨逍&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;12345678931234567X&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2006-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">&#x27;00007&#x27;</span>, <span class="string">&#x27;范瑶&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">40</span>, <span class="string">&#x27;123456789212345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2005-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">&#x27;00008&#x27;</span>, <span class="string">&#x27;黛绮丝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">38</span>, <span class="string">&#x27;123456157123645670&#x27;</span>, <span class="string">&#x27;天津&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">&#x27;00009&#x27;</span>, <span class="string">&#x27;范凉凉&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">45</span>, <span class="string">&#x27;123156789012345678&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2010-04-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">&#x27;00010&#x27;</span>, <span class="string">&#x27;陈友谅&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">53</span>, <span class="string">&#x27;123456789012345670&#x27;</span>, <span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;2011-01-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">&#x27;00011&#x27;</span>, <span class="string">&#x27;张士诚&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">55</span>, <span class="string">&#x27;123567897123465670&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2015-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">&#x27;00012&#x27;</span>, <span class="string">&#x27;常遇春&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;123446757152345670&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2004-02-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">&#x27;00013&#x27;</span>, <span class="string">&#x27;张三丰&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">88</span>, <span class="string">&#x27;123656789012345678&#x27;</span>, <span class="string">&#x27;江苏&#x27;</span>, <span class="string">&#x27;2020-11-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">&#x27;00014&#x27;</span>, <span class="string">&#x27;灭绝&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">65</span>, <span class="string">&#x27;123456719012345670&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2019-05-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">&#x27;00015&#x27;</span>, <span class="string">&#x27;胡青牛&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">70</span>, <span class="string">&#x27;12345674971234567X&#x27;</span>, <span class="string">&#x27;西安&#x27;</span>, <span class="string">&#x27;2018-04-01&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> emp (id, workno, name, gender, age, idcard, workaddress, entrydate)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">&#x27;00016&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="keyword">null</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;2012-06-01&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>准备完毕后，我们就可以看到emp表中准备的16条数据。接下来，我们再来完成DQL语法的学习。</li></ul><h4 id="2-5-1-基本语法"><a href="#2-5-1-基本语法" class="headerlink" title="2.5.1 基本语法"></a>2.5.1 基本语法</h4><p>DQL 查询语句，语法结构如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">字段列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">表名列表</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">条件列表</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">分组字段列表</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">分组后条件列表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">排序字段列表</span><br><span class="line">LIMIT</span><br><span class="line">分页参数</span><br></pre></td></tr></table></figure><p>我们在讲解这部分内容的时候，会将上面的完整语法进行拆分，分为以下几个部分：</p><ul><li>基本查询（不带任何条件）</li><li>条件查询（WHERE）</li><li>聚合函数（count、max、min、avg、sum）</li><li>分组查询（group by）</li><li>排序查询（order by）</li><li>分页查询（limit）</li></ul><h4 id="2-5-2-基础查询"><a href="#2-5-2-基础查询" class="headerlink" title="2.5.2 基础查询"></a>2.5.2 基础查询</h4><p>在基本查询的DQL语句中，不带任何的查询条件，查询的语法如下：</p><p>1、查询多个字段</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>, 字段<span class="number">2</span>, 字段<span class="number">3</span> ... <span class="keyword">FROM</span> 表名 ;</span><br><span class="line"># （<span class="operator">*</span>） 查询所有字段</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名 ;</span><br></pre></td></tr></table></figure><blockquote><p>注意 : * 号代表查询所有字段，在实际开发中尽量少用（不直观、影响效率）。</p></blockquote><p>2、字段设置别名</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ <span class="keyword">AS</span> 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ <span class="keyword">AS</span> 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span> [ 别名<span class="number">1</span> ] , 字段<span class="number">2</span> [ 别名<span class="number">2</span> ] ... <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>3、去除重复记录</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 字段列表 <span class="keyword">FROM</span> 表名;</span><br></pre></td></tr></table></figure><p>案例：</p><ul><li><p>A、查询指定字段 name, workno, age并返回</p></li><li><pre><code class="sql">select name,workno,age from emp;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- B、查询返回所有字段</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  select id ,workno,name,gender,age,idcard,workaddress,entrydate from emp;</span><br><span class="line">  # 使用 * 号 表示所有</span><br><span class="line">  select * from emp;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>C、查询所有员工的工作地址，起别名</p></li><li><pre><code class="sql">select workaddress as &#39;工作地址&#39; from emp;-- as 可以省略select workaddress &#39;工作地址&#39; from emp;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- D、查询公司员工的上班地址都有哪些（不重复）</span><br><span class="line"></span><br><span class="line">- ```sql</span><br><span class="line">  select distinct workaddress &#x27;工作地址&#x27; from emp;</span><br></pre></td></tr></table></figure></code></pre></li></ul><h4 id="2-5-6-条件查询"><a href="#2-5-6-条件查询" class="headerlink" title="2.5.6 条件查询"></a>2.5.6 条件查询</h4><p>1、语法</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段列表 <span class="keyword">FROM</span> 表名 <span class="keyword">WHERE</span> 条件列表 ;</span><br></pre></td></tr></table></figure><p>2、条件</p><p>常用的比较运算符如下：</p><table><thead><tr><th>比较运算符</th><th>功能</th></tr></thead><tbody><tr><td>&gt;</td><td>大于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt; 或 !&#x3D;</td><td>不等于</td></tr><tr><td>BETWEEN … AND …</td><td>在某个范围之内(含最小、最大值</td></tr><tr><td>IN(…)</td><td>在in之后的列表中的值，多选一</td></tr><tr><td>LIKE 占位符</td><td>模糊匹配(_匹配单个字符, %匹配任意个字符)</td></tr><tr><td>IS NULL</td><td>是NULL</td></tr></tbody></table><p>常见的逻辑运算符如下:</p><table><thead><tr><th>逻辑运算符</th><th>功能</th></tr></thead><tbody><tr><td>AND 或 &amp;&amp;</td><td>并且 (多个条件同时成立)</td></tr><tr><td>OR 或 ||</td><td>或者 (多个条件任意一个成立)</td></tr><tr><td>NOT 或 !</td><td>非 , 不是</td></tr></tbody></table><p>案例:</p><blockquote><ul><li>查询年龄等于 88 的员工</li><li><code> select * from emp where age = 88;</code></li><li>查询年龄小于 20 的员工信息</li><li><code>select * from emp where age &lt; 20;</code></li><li>查询年龄小于等于 20 的员工信息</li><li><code>select * from emp where age &lt;= 20;</code></li><li>查询没有身份证号的员工信息</li><li><code>select * from emp where idcard is null;</code></li><li>查询有身份证号的员工信息</li><li><code>select * from emp where idcard is not null;</code></li><li>查询年龄不等于 88 的员工信息</li><li><code>select * from emp where age != 88;</code></li><li><code>select * from emp where age &lt;&gt; 88;</code></li><li>查询年龄在15岁(包含) 到 20岁(包含)之间的员工信息</li><li><code>select * from emp where age &gt;= 15 &amp;&amp; age &lt;= 20; select * from emp where age &gt;= 15 and age &lt;= 20; select * from emp where age between 15 and 20;</code></li><li>查询性别为 女 且年龄小于 25岁的员工信息</li><li><code>select * from emp where gender = &#39;女&#39; &amp;&amp; age &lt; 25;</code></li><li>查询年龄等于18 或 20 或 40 的员工信息</li><li><code>select * from emp where age = 18 || age = 20 || age = 40;</code></li><li><code>select * from emp where age in(18,20,40);</code></li><li>查询姓名为两个字的员工信息</li><li><code>select * from emp where name like &#39;__&#39;;</code></li><li>查询身份证号最后一位是X的员工信息</li><li><code>select * from emp where idcard like &#39;%X&#39;;</code></li><li><code>select * from emp where idcard like &#39;_________________X&#39;;</code></li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node包管理工具</title>
      <link href="/2023/12/01/Node%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>/2023/12/01/Node%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><p>npm 全称 <code>Node package Manager</code> ，翻译位中文意思是 【Node 的包管理工具】</p><p>npm 是 ndoe.js 官网内置的包管理工具，是 <u>必须要掌握住的工具</u>。</p><h2 id="1-npm的安装"><a href="#1-npm的安装" class="headerlink" title="1.npm的安装"></a>1.npm的安装</h2><p>node.js 在安装的时候会自动安装npm，所以如果你已经安装了node.js，就可以直接使用npm</p><p>可以通过 <code>npm -v</code> 查看版本号，如果显示版本说明安装成功了，反之安装失败</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\Users\taichi&gt;npm -v</span><br><span class="line">9.5.1</span><br></pre></td></tr></table></figure><ul><li>查看版本可能显示的版本号不一样,不过不影响正常使用.</li></ul><h2 id="2-初始化"><a href="#2-初始化" class="headerlink" title="2.初始化"></a>2.初始化</h2><p>创建一个空目录,然后为此目录作为工作目录 <code>启动命令行工具</code>, 执行 <code>npm init</code></p><p><code>npm init</code>命令的作用是将文件夹初始化为一个【包】, <code>交互式创建 package.json</code></p><p><code>package.json</code> 内容示列：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;study npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;taichi&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;ubiq&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;uniq&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>属性翻译:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span><span class="comment">// 包的名字</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span><span class="comment">// 包的版本</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;study npm&quot;</span><span class="punctuation">,</span><span class="comment">//包的描述</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span><span class="comment">// 包的入口文件</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>   <span class="comment">// 脚本配置</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;taichi&quot;</span><span class="punctuation">,</span><span class="comment">// 作者</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="comment">// 开源证书</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>初始化过程中还有一些注意事项:</p><ol><li>package name(<code>包名</code>) 不能使用中文、大写、默认是<code>文件夹的名称</code>，所以文件夹名称也不能使用中文和大写。</li><li>version(<code>版本号</code>) 要求 <code>x.x.x</code>的形式定义， x 必须是数组，默认是1.0.0</li><li>ISC 证书与MIT证书功能上是相同的，关于开源证书扩展阅读</li><li><code>package.json</code> 可以手动创建与修改</li><li>使用 <code>npm init -y</code> 或者 <code>npm init --yes</code> 极速创建 <code>package.json</code></li></ol><h2 id="3-搜索包"><a href="#3-搜索包" class="headerlink" title="3.搜索包"></a>3.搜索包</h2><p>搜索包的方式</p><ol><li>命令行 <code>npm s/search 关键字</code></li><li><code>网站搜索</code> 网址是：<code>www.npmjs.com</code></li></ol><blockquote><p>经常有同学问，【我怎样才能精准的找到我需要的包？】</p><p>这个事情需要大家在实践中不断的积累，通过看文章，看项目去学习积累</p></blockquote><h2 id="4-下载包"><a href="#4-下载包" class="headerlink" title="4.下载包"></a>4.下载包</h2><p>我们可以通过 <code>npm install</code> 和 <code>npm i</code> 命令来下载</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"># 格式</span><br><span class="line">npm install &lt;包名&gt;</span><br><span class="line">npm i &lt;包名&gt;</span><br><span class="line"></span><br><span class="line"># 例子</span><br><span class="line">npm install uniq</span><br><span class="line">npm i uniq</span><br></pre></td></tr></table></figure><p>运行起来后文件夹会增加两个资源</p><ul><li><code>node_modules 文件夹</code> 存放下载的包</li><li><code>package-lock.json 包的锁文件</code>，用来锁定包的版本</li></ul><blockquote><p>安装uniq之后，uniq就是当前这个包的一个 <code>依赖包</code>，有时会简称 <code>依赖</code></p><p>比如我们创建一个包名字为A，A中安装了包名字是 B，我们就说 <code>B 是 A 的一个依赖包</code>，也会说 <code>A 依赖 B</code></p></blockquote><h2 id="5-生产环境与开发环境"><a href="#5-生产环境与开发环境" class="headerlink" title="5.生产环境与开发环境"></a>5.生产环境与开发环境</h2><ul><li>开发环境是程序员 <code>专门用来写代码</code>的环境，一般是指程序员的电脑，开发环境的项目只能<u>程序员自己访问</u>。</li><li>生产环境是项目 <code>代码正式运行</code>的环境，一般是正式的服务器电脑，生产环境的项目 <u>每个用户都可以访问</u>。</li></ul><h2 id="6生产依赖与开发依赖"><a href="#6生产依赖与开发依赖" class="headerlink" title="6生产依赖与开发依赖"></a>6生产依赖与开发依赖</h2><p>我们可以在安装时设置选项来区分 <u>依赖类型</u>，目前分为两种：</p><table><thead><tr><th>类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td>生产依赖</td><td>npm i -S uniq<br>npm i –save uniq</td><td>-S 等效于–save, <code>-S 是默认选项</code><br> 包信息保存在package.json 中 <code>dependencies</code> 属性</td></tr><tr><td>开发依赖</td><td>npm i -D less <br>npm i -save-dev less</td><td>-D 等效于–save-dev<br>包信息保存在package.json 中 <code>devDependencies</code> 属性</td></tr></tbody></table><h2 id="7-全局安装"><a href="#7-全局安装" class="headerlink" title="7.全局安装"></a>7.全局安装</h2><p>我们可以执行安装选项 <code>-g</code>进行全局安装</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -i -g nodemon</span><br></pre></td></tr></table></figure><p>全局安装完成之后就可以在命令行的任何位置运行 <code>nodemon</code> 命令</p><p>该命令的作用是<code>自动重启node应用程序</code></p><blockquote><p>说明:</p><ul><li>全局安装的命令不受工作目录位置的影响</li><li>可以通过 <code>npm root -g</code> 来查看全局安装包的位置</li><li><code>不是所有的包都适合全局安装</code>,只有全局类的工具才适合, 可以通过<code>官方的文档来确定安装方式</code>.</li></ul></blockquote><p>注意：全局安装完成之后可能不能用，<a href="https://blog.csdn.net/weixin_42288182/article/details/109573452">请点击此文章</a>。</p><h2 id="8-安装包依赖"><a href="#8-安装包依赖" class="headerlink" title="8.安装包依赖"></a>8.安装包依赖</h2><p>在项目协作的中有一个常用的命令就是 <code>npm i</code>，通过该命令可以依据 <code>package.json</code>和 <code>package-lock.json</code> 的依赖声明安装项目依赖</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>node_modules 文件夹大多数情况下都不会存入版本库</p><ul><li>在以后的克隆项目中，是没有 <code>node_modules</code> 包的，都在 <code>package.json</code> 中记录。</li><li>拿到克隆项目后，可以直接使用 <code>npm i</code> 下载依赖</li></ul></blockquote><h2 id="9-安装指定版本"><a href="#9-安装指定版本" class="headerlink" title="9.安装指定版本"></a>9.安装指定版本</h2><p>项目中可能会遇到版本不匹配的情况，有时候需要安装指定版本的包，可以使用下面的命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 格式</span></span><br><span class="line">npm i &lt;包名@版本号&gt;</span><br><span class="line"><span class="comment">## 例如</span></span><br><span class="line">npm i jquery@1.11.2</span><br></pre></td></tr></table></figure><h2 id="10-删除依赖"><a href="#10-删除依赖" class="headerlink" title="10.删除依赖"></a>10.删除依赖</h2><p>项目中可能需要删除某些不需要的包,可以通过下面的命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 局部删除</span></span><br><span class="line">npm remove <span class="built_in">uniq</span></span><br><span class="line">npm r <span class="built_in">uniq</span></span><br><span class="line"><span class="comment">## 全局删除</span></span><br><span class="line">npm remove -g nodemon</span><br></pre></td></tr></table></figure><h2 id="11-npm-配置别名"><a href="#11-npm-配置别名" class="headerlink" title="11.npm 配置别名"></a>11.npm 配置别名</h2><p>通过配置命令别名可以更简单的执行命令</p><p>配置 <code>package.json</code> 中的 <code>script</code> 属性</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ndoe ./index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>配置完成之后，可以使用别名执行命令</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm run server</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>不过 <code>start</code> 别名比较特别, 使用时可以省却 <code>run</code></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><blockquote><p>补充说明:</p><ul><li><code>npm start</code> 是项目中常用的一个命令,一般用来启动项目</li><li><code>npm run</code> 是自动向上级目录查找的特性, 跟 <code>require</code> 函数也一样</li><li>对于陌生的项目, 我们可以通过查看 <code>scripts</code> 属性来参考项目的一些操作</li></ul></blockquote><h1 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1.介绍"></a>1.介绍</h2><p>cnpm 是淘宝构建的 <code>npmjs.com</code> 的完整镜像，也称位 <strong>淘宝镜像</strong>，<a href="https://npmmirror.com/">网址</a></p><p>cnpm 服务部署在国内 <code>阿里云服务器上</code> ，可以提高包的下载速度</p><p>官方也提供了提个全局工具包 <code>cnpm</code> ，操作命令与npm 大体相同</p><h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><p>我们可以通过 npm 来安装 cnpm 工具</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="3-操作命令"><a href="#3-操作命令" class="headerlink" title="3.操作命令"></a>3.操作命令</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>cnpm init</td></tr><tr><td>安装包</td><td>cnpm i uniq<br />cnpm i -S uniq<br />cnpm i -D uniq<br />cnpm i -g nodemon</td></tr><tr><td>安装项目依赖</td><td>cnpm i</td></tr><tr><td>删除</td><td>cnpm r uniq</td></tr></tbody></table><h2 id="4-npm-配置镜像"><a href="#4-npm-配置镜像" class="headerlink" title="4.npm 配置镜像"></a>4.npm 配置镜像</h2><p>用 npm 也可以直接使用淘宝镜像，配置的方式有两种</p><ul><li>直接配置</li><li>工具配置</li></ul><h4 id="直接配置"><a href="#直接配置" class="headerlink" title="直接配置"></a>直接配置</h4><p>执行如下命令即可完成配置</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set reqistry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h4 id="工具配置"><a href="#工具配置" class="headerlink" title="工具配置"></a>工具配置</h4><p>使用 <code>nrm</code> 配置 npm 的镜像地址 <code>npm registry manager</code></p><ol><li><p>安装 </p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm i -g nrm</span><br></pre></td></tr></table></figure></li><li><p>修改镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nrm use taobao</span><br></pre></td></tr></table></figure></li><li><p>检查是否配置成功（选做）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config list</span><br></pre></td></tr></table></figure><p>检查registry 地址是否为 <a href="https://registry.npmmirror.com/">https://registry.npmmirror.com</a> 如果是则表示成功.</p></li></ol><blockquote><p>补充说明:</p><ol><li><code>建议使用第二种方式</code> 进行镜像配置，因为后续修改起来比较方便</li><li>虽然 cnpm 可以提高速度，但是 npm 也可以通过淘宝镜像进行加速，所以 <code>npm的使用率还是高于 cnpm</code></li></ol></blockquote><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h2 id="1-yarn介绍"><a href="#1-yarn介绍" class="headerlink" title="1.yarn介绍"></a>1.yarn介绍</h2><p>yarn 是由 Facebook 在2016年推出的新的 JavaScript 包管理工具，官方网站：<a href="http://yarnpkg.com/">http://yarnpkg.com</a></p><h2 id="2-yarn特点"><a href="#2-yarn特点" class="headerlink" title="2.yarn特点"></a>2.yarn特点</h2><p>yarn官方宣称的一些特点</p><ul><li>速度超快：yarn 缓存了每个下载过的包，所以再去使用时无需重复下载。同时利用并下载以最大化资源利用率，因此安装速速更快</li><li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li><li>超级可靠：使用详细、简介的锁文件格式和说明的安装算法，yarn 能够保证在不同的系统上无差异的工作</li></ul><h2 id="3-yarn安装"><a href="#3-yarn安装" class="headerlink" title="3.yarn安装"></a>3.yarn安装</h2><p>我们可以使用 npm 安装 yarn</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure><h2 id="4-yarn-常用命令"><a href="#4-yarn-常用命令" class="headerlink" title="4.yarn 常用命令"></a>4.yarn 常用命令</h2><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td>yarn init &#x2F; yarn init -y</td></tr><tr><td>安装包</td><td>yarn add uniq               生产依赖<br />yarn add less –dev         开发依赖<br />yarn global add nodemon     全局安装</td></tr><tr><td>删除包</td><td>yarn remove uniq            删除项目依赖包<br />yarn global remove nodemon  全局删除包</td></tr><tr><td>运行命令别名</td><td>yarn &lt;别名&gt;                  不需要添加 run</td></tr><tr><td>安装依赖包</td><td>yarn                自动下载package.json中的依赖</td></tr></tbody></table><blockquote><p><code>全局安装的包不可使用</code>，yarn 全局安装包的位置 可以通过 <code>yarn global bin</code> 来查看</p><p>注意：默认情况下 yarn 下载的全局包是没有添加环境变量，需要手动添加</p></blockquote><h2 id="5-yarn-配置淘宝镜像"><a href="#5-yarn-配置淘宝镜像" class="headerlink" title="5.yarn 配置淘宝镜像"></a>5.yarn 配置淘宝镜像</h2><p>可以通过如下命令配置淘宝镜像</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yarn config set reqistry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><p>可以通过 <code>yarn config list</code> 查看 yarn 的配置选项</p><h2 id="6-npm-和-yarn-选择"><a href="#6-npm-和-yarn-选择" class="headerlink" title="6.npm 和 yarn 选择"></a>6.npm 和 yarn 选择</h2><p>大家可以根据不同是使用场景进行选择</p><ol><li><p>个人项目</p><p>如果是个人，<code>哪个工具都可以</code>，可以根据自己的喜好来选择</p></li><li><p>公司项目</p><p>如果是公司要根据项目代码来选择，可以<code>通过锁文件来判断</code>项目的包管理工具</p><ul><li>npm 的锁文件为：<code>package-lock.json</code></li><li>yarn 的锁文件为： <code>yarn.lock</code></li></ul></li></ol><blockquote><p>包管理工具 <code>不要混着用，切记，切记，切记</code></p></blockquote><h1 id="扩展内容"><a href="#扩展内容" class="headerlink" title="扩展内容"></a>扩展内容</h1><p>很多语言中都有包管理工具，比如：</p><table><thead><tr><th>语言</th><th>包管理工具</th></tr></thead><tbody><tr><td>PHP</td><td>composer</td></tr><tr><td>Python</td><td>pip</td></tr><tr><td>Java</td><td>maven</td></tr><tr><td>GO</td><td>go mod</td></tr><tr><td>JavaScript</td><td>npm&#x2F;yarn&#x2F;cnpm&#x2F;other</td></tr><tr><td>Ruby</td><td>rubyGems</td></tr></tbody></table><p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是 <u>软件包</u></p><table><thead><tr><th>操作系统</th><th>包管理</th><th>网址</th></tr></thead><tbody><tr><td>Centos</td><td>yum</td><td><a href="https://packages.debian.org/stable/">https://packages.debian.org/stable/</a></td></tr><tr><td>Ubuntu</td><td>apt</td><td><a href="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></td></tr><tr><td>MacOS</td><td>homebrew</td><td><a href="https://brew.sh/">https://brew.sh/</a></td></tr><tr><td>Windows</td><td>chocolatry</td><td><a href="https://shocolatey.org/">https://shocolatey.org/</a></td></tr></tbody></table><h1 id="nvm"><a href="#nvm" class="headerlink" title="nvm"></a>nvm</h1><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p>nvm 全称 <code>Node Version Manager</code> 顾名思义它是用来管理 node 版本的工具，方便切换不同版本的 Node.js</p><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p><h3 id="2-1-下载安装"><a href="#2-1-下载安装" class="headerlink" title="2.1 下载安装"></a>2.1 下载安装</h3><p>首先下载那 nvm ，下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>选择 <code>nvm-setup.exe</code> 下载即可</p><h3 id="2-2-常用命令"><a href="#2-2-常用命令" class="headerlink" title="2.2 常用命令"></a>2.2 常用命令</h3><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>nvm list available</td><td>显示所有可以下载的 Node.js 版本</td></tr><tr><td>nvm list</td><td>显示已安装的版本</td></tr><tr><td>nvm install 18.12.1</td><td>安装 18.12.1 版本的 Node.js</td></tr><tr><td>nvm install latest</td><td>安装最新版本的 Node.js</td></tr><tr><td>nvm uninstall 18.12.1</td><td>删除某个版本的 Node.js</td></tr><tr><td>nvm use 18.12.1</td><td>切换 18.12.1 的 Node.js</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJs </tag>
            
            <tag> Js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言指针详解</title>
      <link href="/2023/10/31/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3/"/>
      <url>/2023/10/31/C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h1><p><img src="/C%E8%AF%AD%E8%A8%80.jpg"></p><h1 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h1><h2 id="关于内存那点事"><a href="#关于内存那点事" class="headerlink" title="关于内存那点事"></a>关于内存那点事</h2><h4 id="存储器：存储数据器件"><a href="#存储器：存储数据器件" class="headerlink" title="存储器：存储数据器件"></a>存储器：存储数据器件</h4><ul><li>外存<ul><li>外存又叫外部存储器，长期存放数据，断电不丢失数据</li><li>常见的有外部存储器：硬盘、flash、rom、U盘、光盘、磁带</li></ul></li><li>内存<ul><li>内存又叫内部存储器，暂时存放数据，断电数据丢失</li><li>常见的内存设备：ram、DDR</li></ul></li><li>虚拟内存：操作系统虚拟出来的内存</li><li>32bit   32根寻址总线</li></ul><p>在写应用程序的时候，咱们看到的都是虚拟地址。</p><p>在运行程序的时候，操作系统会将 虚拟内存进行分区</p><ol><li><p>堆</p></li><li><p>栈</p><p>主要存放局部变量（在函数内部，或复合语句内部定义的变量）</p></li><li><p>静态全局区</p><ol><li><p>未初始化的静态全局区</p><p>静态变量（定义的时候，前面加static修饰）。或全局变量，没有初始化的，存放在此区</p></li><li><p>初始化的静态全局变量</p><p>全局变量、静态变量、赋过初值的、存放在此区</p></li></ol></li><li><p>代码区</p><p>存放咱们的程序代码</p></li><li><p>文字常量区</p><p>存放常量的</p></li></ol><p>内存以字节为单位来存储数据的，咱们可以将程序中的虚拟寻址空间，看成一个很大的维的字符数组</p><h2 id="指针的相关概念"><a href="#指针的相关概念" class="headerlink" title="指针的相关概念"></a>指针的相关概念</h2><ul><li>系统给虚拟内存的每个存储单元分配了一个编号，从</li><li><code>0x00 00 00 00 ~ 0xff ff ff ff</code></li><li>这个编号咱们称之为**<u>地址</u>**.</li><li>指针就是地址</li><li>指针变量：是个变量，是个指针变量，即这个变量用来存放一个地址编号</li><li>在32位平台下，地址总线是32位的，所以地址是32位编号，所以指针的变量是32位的即4个字节。</li></ul><p>注意：</p><ul><li>无论什么类型的地址，都是存储单元的编号，在**<u>32位平台下</u>**都是4个字节。</li><li>**<u>即任何类型的指针变量都是4个字节大小</u>**。</li><li>**<u>对应类型</u><strong>的指针变量，只能</strong><u>存放对应类型的变量地址</u>**。</li><li>举例：整型的指针变量，只能存放整型变量地址</li></ul><p>扩展：</p><ul><li><p>字符变量 <code>char ch = &#39;b&#39;;</code>ch占一个字节，它有一个地址编号，这个地址编号就是ch的地址。</p></li><li><p>整型变量 <code>int a = 0x12 34 56 78;</code>  a 占4个字节，它占有4个字节的存储单元，有四个地址编号。</p></li><li><p>整型变量a 占四个字节，分别对应四个地址，多字节的情况下地址是变量最小的，也就是 <code>0x000020000</code></p></li><li><table><thead><tr><th align="center">地址</th><th align="center">存放的东西</th></tr></thead><tbody><tr><td align="center">0x00002003</td><td align="center">0x12</td></tr><tr><td align="center">0x00002002</td><td align="center">0x34</td></tr><tr><td align="center">0x00002001</td><td align="center">0x56</td></tr><tr><td align="center">0x00002000</td><td align="center">0x78</td></tr><tr><td align="center">0x00001fff</td><td align="center">‘b’</td></tr></tbody></table></li></ul><h2 id="指针的定义方法"><a href="#指针的定义方法" class="headerlink" title="指针的定义方法"></a>指针的定义方法</h2><ol><li><p>简单的指针变量</p><p><u><strong>数据类型 * 指针变量名；</strong></u>。</p><p><code>int * p;</code> 定义了一个指针变量p</p><p>在定义指针变量的时候 * 是用来修饰变量的，说明变量p是个指针变量</p><p>变量名是 p</p></li><li><p>关于指针的运算符</p><p>&amp; 取地址 、 * 取值</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">0x1234abcd</span>;</span><br><span class="line"><span class="type">int</span> *p; <span class="comment">// 在定义指针的时候*表示修饰的意思，修饰p是个指针变量</span></span><br><span class="line">p = &amp;a; <span class="comment">// 把 a 的地址给p赋值    &amp;是取地址符</span></span><br></pre></td></tr></table></figure><p>p 保存了 a 的地址，也可以说 p 指向了 a</p><p>p 和 a 的关系分析： a 的值是0x1234abcd, 假如 a 的地址是： 0xbf e8 98 68</p></li></ol><p>分析：</p><ol><li>在调用的时候 * 代表取值的意思， *p 就相当于p指向的变量，即a，</li><li>故 num&#x3D;*p  和 num&#x3D;a 的效果是一样的。</li><li>所以说num的值为 0x1234abcd</li></ol><p>扩展：</p><ul><li>如果在一行中定义多个指针变量，每一个指针变量前面都需要加*来修饰</li><li><code>int *p,*q</code>&#x2F;&#x2F; 定义了两个整数的指针变量p 和 q</li><li><code>int *p,q;</code>&#x2F;&#x2F; 定义了一个整型指针变量p，和整型变量q</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">100</span>,b = <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> *p_1, *p_2 = &amp;b;  <span class="comment">// 表示该变量的类型是一个指针变量,指针的变量名是 p_1 而不是 *p_1</span></span><br><span class="line">    <span class="comment">// p_1 在定义的时候没有赋初值, *p_2 赋了初值</span></span><br><span class="line">    p_1 = &amp;a;  <span class="comment">// p_1先定义 后赋值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p_1);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,b);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,*p_2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>指针的大小:在32位系统下,所有类型的指针都是4个字节</li><li>指针变量是用来存放地址编号的,不管你是一个什么类型的,他都是存放的地址</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0x1234abcd</span>;</span><br><span class="line">    <span class="type">int</span>* p;</span><br><span class="line">    p = &amp;a;</span><br><span class="line">    <span class="comment">// 打印地址编号 使用 %p</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&amp;a = %p\n&quot;</span>, &amp;a);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>,p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="指针的分类"><a href="#指针的分类" class="headerlink" title="指针的分类"></a>指针的分类</h2><ul><li>注意：多字节变量，占多个存储单元，每个存储单元都有编号</li><li>C语言规定，存储单元编号最少的那个编号，是多字节变量的地址编号。</li></ul><ol><li><p>字符指针</p><p>字符型数据地址</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *p; <span class="comment">//定义了一个字符指针变量,只能存放字符型数据的地址编号</span></span><br><span class="line"><span class="type">char</span> ch;</span><br><span class="line">p=&amp;ch;</span><br></pre></td></tr></table></figure></li><li><p>短整型指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">short</span> <span class="type">int</span> *p; <span class="comment">//定义了一个短整型的指针变量p,只能存放短整型变量的地址</span></span><br><span class="line"><span class="type">short</span> <span class="type">int</span> a;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure></li><li><p>整型指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p; <span class="comment">//定义了一个整型的指针变量p,只能存放整型变量的地址</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure></li><li><p>长整型指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">long</span> <span class="type">int</span> *p;  <span class="comment">//定义了一个长整型的指针变量p,只能存放长整型变量的地址</span></span><br><span class="line"><span class="type">long</span> <span class="type">int</span> a;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure></li><li><p>float 型指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">float</span> *p; <span class="comment">// 定义了一个float 型的指针变量p,只能存放float型变量地址</span></span><br><span class="line"><span class="type">float</span> a;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure></li><li><p>double 型指针</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">double</span> *p;</span><br><span class="line"><span class="type">double</span> a;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure></li><li><p>函数指针</p></li><li><p>结构体指针</p></li><li><p>指针的指针</p></li><li><p>数组指针</p></li><li><p>通用指针 void*p;</p></li></ol><ul><li>结论:**<u>无论什么类型的指针变量，在32位系统下，都是4个字节</u>**。</li><li>**<u>指针只能存放对应类型的变量的地址编号</u>**。</li></ul><h2 id="指针和变量的关系"><a href="#指针和变量的关系" class="headerlink" title="指针和变量的关系"></a>指针和变量的关系</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = &amp;a;</span><br></pre></td></tr></table></figure><p>在程序中,引入变量的方法:</p><ol><li><p>通过变量的名称</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line">a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>通过指针变量来引入变量</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p; <span class="comment">// 在定义的时候, *不是取值的意思,而是修饰的意思,修饰p是个指针变量</span></span><br><span class="line">p = &amp;a; <span class="comment">// 取a的地址给p赋值,p保存了a的地址,也可以说p指向了a</span></span><br><span class="line">*p=<span class="number">100</span>;<span class="comment">// 在调用的时候*是取值的意思,*指针变量 等价于指针指向的变量</span></span><br></pre></td></tr></table></figure><p>注：指针变量在定义的时候可以初始化</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a;</span><br><span class="line"><span class="type">int</span> *p = &amp;a; <span class="comment">//用a的地址,给p赋值,因为p是指针变量</span></span><br></pre></td></tr></table></figure><p>**<u>指针</u><strong>就是用来</strong><u>存放变量地址</u>**的.</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> *p1,*p2,temp,a,b; <span class="comment">// 两个指针,三个变量</span></span><br><span class="line">p1 = &amp;a;</span><br><span class="line">p2 = &amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入:a,b的值: \n&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d %d&quot;</span>,p1,p2); <span class="comment">// 给 p1 和 p2 指向的变量赋值 </span></span><br><span class="line">temp = *p1; <span class="comment">// 用p1 指向的变量(a)给temp赋值</span></span><br><span class="line">*p1 = *p2; <span class="comment">// 用p2指向的变量(b)给p1指向的变量(a) 赋值 </span></span><br><span class="line">*p2 = temp; <span class="comment">// temp给p2指向的变量(b)赋值 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a = %d  b = %d \n&quot;</span>, a,b);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p1 = %d  *p2 = %d&quot;</span>, *p1,*p2); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><ul><li>&amp; + 变量名 &#x3D;&#x3D; 指针</li><li>*+指针名&#x3D;变量.</li></ul></li></ol><p>扩展:</p><ul><li><p>对应类型的指针，只能保存对应类型数据的地址，</p></li><li><p>如果想让不同类型的指针相互赋值的时候，需要强制类型转换</p></li><li><p>void *p</p></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0x12345678</span>,b = <span class="number">0xabcdef66</span>; <span class="comment">//int 是四个字节</span></span><br><span class="line"><span class="type">char</span> *p1,*p2; <span class="comment">//char 是一个字节 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%0x %0x\n&quot;</span>,a,b);</span><br><span class="line">p1 = (<span class="type">char</span> *)&amp;a;</span><br><span class="line">p2 = (<span class="type">char</span> *)&amp;b;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%0x  %0x \n&quot;</span>,*p1,*p2);</span><br><span class="line">p1++; <span class="comment">// 因为强制转换成char了,字节的指向本来是最后一个,++后就是倒数第二个</span></span><br><span class="line">p2++;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%0x %0x\n&quot;</span>,*p1,<span class="number">0xff</span> &amp; (*p2));</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">12345678 abcdef66</span></span><br><span class="line"><span class="comment">78  66</span></span><br><span class="line"><span class="comment">56 ef</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p><u>***+指针 取值，取几个字节，用指针类型决定的，指针为字符型指针取一个字节，指针为整型指针取4个字节，指针为double型指针取8个字节**</u></p></li><li><p><u><strong>指针++ 指向下个对应类型的数据</strong></u></p><p><u><strong>字符指针++，指向下个字符数据，指针存放的地址编号加1</strong></u></p><p><u><strong>整型指针++，指向下个整型数据，指针存放的地址编号加4</strong></u>。</p></li></ol><h2 id="指针和数组元素之间的关系"><a href="#指针和数组元素之间的关系" class="headerlink" title="指针和数组元素之间的关系"></a>指针和数组元素之间的关系</h2><ul><li><p>变量存放在内存中，有地址编号，咱们定义的数组，是多个相同类型的变量集合</p></li><li><p>每个变量都占内存空间，都有地址编号</p></li><li><p>指针变量当然可以存放数组元素地址。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p = &amp;a[<span class="number">0</span>];</span><br><span class="line"><span class="comment">// 指针变量p 保存了数组中第0个元素的地址, 即a[0]的地址</span></span><br></pre></td></tr></table></figure></li></ul><p>数组元素的**<u>引入方法</u>**.</p><ol><li><p>数组名[下标]</p><p><code>int a[5];</code></p><p><code>a[2] = 100;</code></p></li><li><p>指针名加下标</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = a;</span><br><span class="line">p[<span class="number">2</span>]=<span class="number">100</span>; <span class="comment">// 相等于 a[2] = 100;</span></span><br></pre></td></tr></table></figure><p>补充：C语言规定：数组的名字就是数组的首地址，即第0个元素的地址，就是a[0]，是个常量</p><p>注意：p和a的不同，p是指针变量，而a是个常量。所以可以用等号给p赋值，但不能给a赋值。</p></li><li><p>通过指针变量运算加取值的方法来引用数组元素</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p=a;</span><br><span class="line">*(p+<span class="number">2</span>)=<span class="number">100</span>; <span class="comment">//相等于a[2] = 100</span></span><br><span class="line"><span class="comment">// 解释: p 是第0个元素的地址,p+2是a[2]这个元素的地址.</span></span><br><span class="line"><span class="comment">// 对第二个元素的地址取值,即a[2]</span></span><br></pre></td></tr></table></figure></li><li><p>通过数组名+取值的方法引用数组的元素</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line">*(a+<span class="number">2</span>)=<span class="number">100</span>; <span class="comment">// 相等于a[2] = 100;</span></span><br><span class="line"><span class="comment">// 注意: a+2 是 a[2]的地址.这个地方并没有给a赋值.</span></span><br></pre></td></tr></table></figure><p>例如:</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;a[2] = %d\n&quot;</span>,a[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p[2] = %d\n&quot;</span>,p[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(p+2) = %d\n&quot;</span>,*(p+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*(a+2) = %d\n&quot;</span>,*(a+<span class="number">2</span>));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p = %p\n&quot;</span>,p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p+2 = %p\n&quot;</span>,p+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>指针的运算</p><ol><li><p>指针可以加上一个整数，往下指几个它指向的变量，结果还是个地址</p><p>前提：指针指向的数 组元素的时候，加一个整数才有意义。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">5</span>];</span><br><span class="line"><span class="type">int</span> *p;</span><br><span class="line">p = a;</span><br><span class="line">p+<span class="number">2</span>; <span class="comment">// p是a[0]的地址,p+2 是&amp;a[2]</span></span><br><span class="line"><span class="comment">// 假如p保存的地址是 2000的话, p+2 代表的地址编号是 2008</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">5</span>];</span><br><span class="line"><span class="type">char</span> *q;</span><br><span class="line">q=buf;</span><br><span class="line">q+<span class="number">2</span>; <span class="comment">// 相等于&amp;buf[2]</span></span><br><span class="line"><span class="comment">// 假如: q中存放的地址编号是 2000 的话,q+2 代表的地址编号是 2002</span></span><br></pre></td></tr></table></figure></li><li><p><strong><u>两个相同类型</u><strong>的指针可以</strong><u>比较大小</u></strong>.</p><p>前提：只有两个**<u>相同类型的指针</u><strong>指向</strong><u>同一个数组元素</u>**的时候，比较大小才会有意义</p><p>**<u>指向前面元素的指针  小于  指向后面元素的指针</u>**。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p,*q;</span><br><span class="line">p = &amp;a[<span class="number">1</span>];</span><br><span class="line">q = &amp;a[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(q &gt; p)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;q &gt; p&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个相同类型的指针可以做减法</p><p>前提：只有两个**<u>相同类型的指针</u><strong>指向</strong><u>同一个数组元素</u>**的时候，做减法会有意义</p><p>做减法的结果是，两个指针指向的中间有多少个元素</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line"><span class="type">int</span> *p,*q;</span><br><span class="line">p = &amp;a[<span class="number">1</span>];</span><br><span class="line">q = &amp;a[<span class="number">6</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,q-p); <span class="comment">// 中间相差了几个元素</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>两个相同类型的指针可以相互赋值</p><p>注意：只有相同类型的指针才可以相互赋值（void*类型的除外）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p,*q;</span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">p = &amp;a; <span class="comment">// 保存了a的地址</span></span><br><span class="line">q = p;  <span class="comment">//用p给q赋值,q也保存了a的地址,指向a</span></span><br></pre></td></tr></table></figure><p>注意：C语言规定数组的名字，就是数字的首地址，就是数组的第0个元素的地址</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p;</span><br><span class="line"><span class="type">int</span> a[<span class="number">10</span>];</span><br><span class="line">p = a;  p = &amp;a[<span class="number">0</span>];  这两种方法是等价的  </span><br></pre></td></tr></table></figure></li></ol><h2 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h2><p>目的就是把多个变量的指针存到一起,从而出现指针数组</p><ol><li><p><strong><u>指针和数组关系</u></strong>.</p><ol><li>指针可以保存数组元素的地址</li><li>可以定义一个数组，数组中有**<u>诺干个相同类型变量</u>**，这个数组被称为指针数组</li></ol><p>**<u>指针数组的概念</u>**：</p><p>指针数组本身是个数组，是个指针数组，是**<u>诺干个想用类型的指针变量构成的集合</u>**。</p></li><li><p>指针数组的定义方法</p><p><strong><u>类型说明符 * 数组名[元素个数]</u></strong>;</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> *p[<span class="number">5</span>];<span class="comment">//定义了一个整型的指针元素数组p,有5个元素p[0]~p[5],每个元素都是int* 类型的变量</span></span><br><span class="line"><span class="type">int</span> a;</span><br><span class="line">p[<span class="number">0</span>]=&amp;a;</span><br><span class="line"><span class="type">int</span> b[<span class="number">10</span>];</span><br><span class="line">p[<span class="number">1</span>] = &amp;b[<span class="number">5</span>];</span><br><span class="line"><span class="comment">// p[2]  *(p+2)是等价的,都是指针数组中的第2个元素</span></span><br></pre></td></tr></table></figure><p>打印字符数组</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *name[<span class="number">5</span>] = &#123;<span class="string">&quot;Hello&quot;</span>,<span class="string">&quot;China&quot;</span>,<span class="string">&quot;everyday&quot;</span>,<span class="string">&quot;pink&quot;</span>,<span class="string">&quot;green&quot;</span>&#125;;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,name[i]);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="指针的指针"><a href="#指针的指针" class="headerlink" title="指针的指针"></a>指针的指针</h2><p>指针的指针，其实就是指针的地址</p><ul><li>咱们定义一个指针变量本身指针变量占4个字节，指针变量也有编号。</li><li>例:</li><li><code>int a = 0x12345678;</code></li><li>假如：a的地址是 0x00002000</li><li>int *p;</li><li>p &#x3D; &a;</li><li>则p中存放的是a的地址编号即 0x00002000</li><li>因为**<u>p也占四个字节，也有自己的地址编号</u><strong>，即指针变量的地址，</strong><u>即指针的指针</u>**（就是套娃</li><li>我们定义一个变量存放p的地址编号，这个变量就是指针的指针</li><li>int **q;</li><li>q&#x3D;&p; &#x2F;&#x2F; 保存了p的地址，也可以说q指向了p</li><li>则q里存放的就是0x00003000</li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> a = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="type">int</span> *p,**q,***m; <span class="comment">// 一级指针p，二级指针q，三级指针m</span></span><br><span class="line">p = &amp;a;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;a=%p\n&quot;</span>,&amp;a);  <span class="comment">// 一级 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;p =%p \n&quot;</span>,p);</span><br><span class="line">q = &amp;p;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;p =%p\n&quot;</span>,&amp;p);  <span class="comment">// 二级 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;q = %p\n&quot;</span>,q);</span><br><span class="line">m = &amp;q;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;&amp;q =%p\n&quot;</span>,&amp;q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;m = %p\n&quot;</span>,m); </span><br><span class="line"><span class="comment">// 打印指着最终指向的内容 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;*p=%x\n&quot;</span>,*p);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;**q=%x\n&quot;</span>,**q);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;***m=%x\n&quot;</span>,***m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="字符串和指针"><a href="#字符串和指针" class="headerlink" title="字符串和指针"></a>字符串和指针</h2><p>字符串的概念：</p><ul><li>字符串就是以**<u>‘\0’结尾的诺干个字符的集合</u>**，比如：”helloworld”。</li><li>字符串的地址，是**<u>第一个字符的地址</u><strong>。如：</strong><u>字符串”hello” 的地址</u><strong>，其实就是</strong><u>字符串’h’的地址</u>**。</li><li>我们可以定义一个字符指针变量保存字符串的地址，比如：<code>char *s=&quot;hello&quot;;</code></li></ul><p><strong><u>字符串的存储形式：数组、文字常量区、堆</u></strong>.</p><ol><li><p>字符串其实存放在数组中</p><p>其实就是在内存（栈、静态全局区）中开辟了一段空间来存放字符串。</p><p><code>char string[100]=&quot;I love C!&quot;;</code></p><p>定义了一个字符串string，用来存储多个字符，并且用”I love C!”给string数组初始化，字符串”I love C!” 存放在string 中。</p></li><li><p>字符串存放在文字常量区</p><p>在文字常量区开辟了一段空间存放字符串，将字符串的**<u>首地址</u>**赋给指针变量。</p><p><code>char *str=&quot;I love C!&quot;;</code></p><p>定义了一个指针变量str，只能存放字符地址编号</p><p>I love C! 这个字符串中的字符不是存放在str指针变量中</p><p>str只是存放了字符 I 的地址编号，”I love C!” 存放在文字常量区</p></li><li><p>字符串可以存放在堆区</p><p>使用malloc等函数在堆区申请空间，将字符串拷贝到堆区</p><p><code>char *str=(char*)malloc(10*sizeof(char));</code>&#x2F;&#x2F;动态申请了10个字节的存储空间，首地址给str赋值。</p></li></ol><p>注意：</p><ul><li>普通全局数组，内存分配在静态全局区</li><li>普通局部数组，内存分配在栈区。</li><li>静态数组（静态全局数组、静态局部数组），内存分配在静态全局区</li></ul><h3 id="字符串的可修改性"><a href="#字符串的可修改性" class="headerlink" title="字符串的可修改性:"></a>字符串的可修改性:</h3><p>字符串内容是否可以修改，取决于字符串存放在那里</p><ol><li><p>存放在数组中的字符串的内容是可以修改的</p><p><code>chat str[100]=&quot;I love C!&quot;;</code></p><p><code>str[0]=&#39;y&#39;;</code>&#x2F;&#x2F; 正确可以修改的</p><p>注： 数组没有同const 修饰</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> str[<span class="number">50</span>] = <span class="string">&quot;I love C!&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s\n&quot;</span>,str);</span><br><span class="line">str[<span class="number">0</span>]=<span class="string">&#x27;y&#x27;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s\n&quot;</span>,str);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure></li><li><p>**<u>文字常量区里的内容是不可修改</u>**的</p><p><code>chat *str=&quot;I love C!&quot;;</code></p><p><code>*str=&#39;y&#39;;</code>&#x2F;&#x2F; 错误，I存放在文字常量区，不可修改</p><p>注：</p><ol><li>str指向文字常量区的时候，它指向的**<u>内容不可被修改</u>**.</li><li>str是指针变量可以指向别的地方，即**<u>可以给str重新赋值</u>**，让它指向别的地方</li></ol></li><li><p>堆区的内容是可以修改的</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">char</span> *str;</span><br><span class="line">str = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(str,<span class="string">&quot;I love C!&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s\n&quot;</span>,str);</span><br><span class="line">*str = <span class="string">&#x27;y&#x27;</span>; <span class="comment">// 可以被修改,因为堆区内容是可修改的</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;str=%s\n&quot;</span>,str); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>str**<u>指向的堆区</u><strong>的时候，str指向的内存内容是</strong><u>可以被修改</u>**的</p><p>**<u>str是指针变量</u><strong>，也可以</strong><u>指向别的地方</u>**。即可以给str重新赋值，让它指向别的地方</p></li></ol><p>注意：str指针指向的内存能不能被修改，要看str指向哪里。</p><ul><li>str指向文字常量区的时候，内存里的内容不可修改</li><li>str指向数组（非const修饰）、堆区的时候，他指向内存的内容是可以修改的</li></ul><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ol><li><p>字符数组初始化</p><p><code>char buf_aver[20]=&quot;hello world&quot;;</code></p></li><li><p>指针指向文字常量区，初始化</p><p><code>char *buf_point=&quot;hello world&quot;;</code></p></li><li><p>指针指向堆区，堆区存放字符串</p><p>不能初始化，只能先给指针赋值，让指针指向堆区，再使用strcpy、scanf 等方法吧字符串拷贝到堆区。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *buf_heap;</span><br><span class="line">buf_heap=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(buf_heap,<span class="string">&quot;hello world&quot;</span>); <span class="comment">// 两种方式,一般使用第一种,第二种可能会警告</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf_heap);</span><br></pre></td></tr></table></figure></li></ol><h4 id="使用时赋值"><a href="#使用时赋值" class="headerlink" title="使用时赋值"></a>使用时赋值</h4><ol><li><p>字符数组：使用scanf 或者 strcpy</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">20</span>]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">buf=<span class="string">&quot;hello kitty&quot;</span>;   <span class="comment">// 错误,因为字符数组的名字是个常量,不能用等号给常量赋值</span></span><br><span class="line"><span class="built_in">strcpy</span>(buf,<span class="string">&quot;hello kitty&quot;</span>); <span class="comment">// 正确,数组中的内容可以修改的</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf);  <span class="comment">// 正确,数组中的内容是可以修改的</span></span><br></pre></td></tr></table></figure></li><li><p>指针指向文字常量区</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *buf = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">buf=<span class="string">&quot;hello kitty&quot;</span>;  <span class="comment">// 正确,buf指向另一个字符串</span></span><br><span class="line">stcpy(buf,<span class="string">&quot;Hello kitty&quot;</span>); <span class="comment">// 错误,这种情况,buf指向的是文字常量区，内容只读。</span></span><br><span class="line"><span class="comment">// 当指针指向的文字常量区的时候，不能通过指针修改文字常量区的内容</span></span><br></pre></td></tr></table></figure></li><li><p>指针指向堆区，堆区存放字符串</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> *buf_heap;</span><br><span class="line">buf_heap=(<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">15</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(buf_heap,<span class="string">&quot;hello world&quot;</span>); <span class="comment">// 两种方式,都可以</span></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,buf_heap);</span><br></pre></td></tr></table></figure></li></ol><h4 id="字符串和指针的总结"><a href="#字符串和指针的总结" class="headerlink" title="字符串和指针的总结"></a>字符串和指针的总结</h4><ol><li><p>指针可以指向文字常量区</p><ol><li>指针指向的文字常量区的内容不可改变</li><li>指针的指向可以改变，即可以给指针变量重新赋值，指针变量指向别的地方。</li></ol></li><li><p>指针可以指向堆</p><ol><li>指针指向的堆区的内容可以修改。</li><li>指针的指向可以改变，即可以给指针变量重新赋值，指针变量指向被动地方</li></ol></li><li><p>指针也可以指向数组（非const修饰）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> buf[<span class="number">20</span>]=<span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="type">char</span> *str=buf;</span><br></pre></td></tr></table></figure><p>这种情况下</p><ol><li>可以修改buf 数组的内容</li><li>可以通过 str 修改 str 指向的内存的内容,即数组buf的内容</li><li>不能通过buf赋值 <code>buf=&quot;hello Kitty&quot;;</code> 错误的</li><li>可以给str赋值,及str指向别处. str&#x3D;”Hello Kitty”;</li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C语言 </tag>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6新特性</title>
      <link href="/2022/03/05/ES6%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/2022/03/05/ES6%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a><strong>ES6</strong></h1><p><img src="/es6.png" alt="es6"></p><h3 id="let变量"><a href="#let变量" class="headerlink" title="let变量"></a>let变量</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//let   声明变量</span></span><br><span class="line"><span class="keyword">let</span> a, b, c;</span><br><span class="line"><span class="comment">//  1.变量不能重复声明</span></span><br><span class="line"><span class="keyword">let</span> strs = <span class="string">&#x27;new&#x27;</span>;</span><br><span class="line"><span class="comment">// let strs = &#x27;hh&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.块级作用域 函数 if for,但不影响作用连的效果</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> name = <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> school = <span class="string">&#x27;keshi&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  3.不存在变量提升</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song)</span><br><span class="line">    <span class="comment">// let song = &#x27;hello&#x27;;</span></span><br></pre></td></tr></table></figure><h4 id="const常量"><a href="#const常量" class="headerlink" title="const常量"></a>const常量</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.一定要赋值</span></span><br><span class="line"><span class="comment">// cosnt a;</span></span><br><span class="line"><span class="comment">//2.一般通常大写(潜规则)</span></span><br><span class="line"><span class="comment">// const SCHOOL = &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">//3. 常量的值不能更改</span></span><br><span class="line"><span class="comment">// SCHOOL = &#x27;shaolin&#x27;;</span></span><br><span class="line"><span class="comment">// 4.作用域</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">NAMES</span> = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5.对于数组和对象的元素修改,不算对常量的修改,不会报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;uzi&#x27;</span>, <span class="string">&#x27;yly&#x27;</span>];</span><br><span class="line"><span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;ne&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>);</span><br></pre></td></tr></table></figure><h4 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 变量的结构赋值</span></span><br><span class="line"><span class="comment">// 1.数组结构</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xiao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(liu);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zhao);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(song);</span><br><span class="line"><span class="comment">// 2.对象的结构</span></span><br><span class="line"><span class="keyword">const</span> bao = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;宋小宝&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="string">&#x27;不详&#x27;</span>,</span><br><span class="line">        <span class="attr">xiaopin</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我能演小品&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// let &#123; name, age, xiaopin &#125; = bao;</span></span><br><span class="line">    <span class="comment">// console.log(name)</span></span><br><span class="line">    <span class="comment">// console.log(age);</span></span><br><span class="line">    <span class="comment">// xiaopin();</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; xiaopin &#125; = bao;</span><br><span class="line"><span class="title function_">xiaopin</span>();</span><br></pre></td></tr></table></figure><h4 id="模板字符转"><a href="#模板字符转" class="headerlink" title="模板字符转"></a>模板字符转</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模板字符转</span></span><br><span class="line"><span class="comment">// 1.内容中可以直接出现换行符</span></span><br><span class="line"><span class="keyword">let</span> strs = <span class="string">`看我</span></span><br><span class="line"><span class="string">换行`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(strs);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.变量拼接</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;苏炳添&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是短跑冠军`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure><h4 id="简化对象写法"><a href="#简化对象写法" class="headerlink" title="简化对象写法"></a>简化对象写法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大括号里面可以直接写入变量和函数,作为对象的属性和方法</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">chang</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变你&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = &#123;</span><br><span class="line">    name,</span><br><span class="line">    chang,</span><br><span class="line">    <span class="comment">//  把function省略了</span></span><br><span class="line">    <span class="title function_">defau</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以提高你的技能&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">SCHOOL</span>);</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 箭头函数( =&gt; ) 定义函数</span></span><br><span class="line"><span class="comment">//声明一个函数</span></span><br><span class="line"><span class="comment">// let fn = function() &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// let fn = (a, b) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//         return a + b;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="comment">// let result = fn(2, 4);</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.this是静态的. this 始终是指向函数声明所在的作用域下的 this 值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getName2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">SCHOOL</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;VUE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;尚硅谷&quot;</span>;</span><br><span class="line"><span class="comment">// 直接调用</span></span><br><span class="line"><span class="title function_">getName</span>();</span><br><span class="line"><span class="title function_">getName2</span>();</span><br><span class="line"><span class="comment">// call 方法调用</span></span><br><span class="line">getName.<span class="title function_">call</span>(<span class="variable constant_">SCHOOL</span>);</span><br><span class="line">getName2.<span class="title function_">call</span>(<span class="variable constant_">SCHOOL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 不能做构造函数实例化</span></span><br><span class="line"><span class="comment">// let Person = (name, age) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     this.name = name;</span></span><br><span class="line"><span class="comment">//     this.age = age;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;xiao&quot;</span>, <span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.不能使用 arguments 变量</span></span><br><span class="line"><span class="comment">// let fn = () =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     console.log(arguments);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// function fn() &#123;</span></span><br><span class="line"><span class="comment">//     console.log(arguments);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// fn(1, 2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 箭头函数的简写</span></span><br><span class="line"><span class="comment">// 1). 省略小括号,当形参有且只有一个的时候</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = n =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> n + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">//  2).省略花括号,当代码体只有一条语句的时候,此时 return 也必须省略.</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pow</span> = n =&gt; n * n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pow</span>(<span class="number">9</span>));</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">pows</span> = (<span class="params">n, m</span>) =&gt; n * m;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">pows</span>(<span class="number">38</span>, <span class="number">29</span>))</span><br></pre></td></tr></table></figure><h4 id="函数默认值"><a href="#函数默认值" class="headerlink" title="函数默认值"></a>函数默认值</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数参数默认值</span></span><br><span class="line"><span class="comment">// 1. 形参初始值, 具有默认值的参数,一般位置靠后(潜规则)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  2.与解构赋值结合</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connsct</span>(<span class="params">&#123; host = <span class="number">183</span>, username, password, port &#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(password);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">connsct</span>(&#123;</span><br><span class="line">    <span class="comment">// host: &quot;atguigu.com&quot;,</span></span><br><span class="line">    <span class="attr">username</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">13306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引用 rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">date</span>(<span class="params">...ages</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ages);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">date</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//  rest 参数必须放到最后 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, ...ages</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b, ages);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h4 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  【...】 扩展运算符 数组 转换为 参数</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ARR</span> = [<span class="string">&#x27;易烊千玺&#x27;</span>, <span class="string">&#x27;王源&#x27;</span>, <span class="string">&#x27;王俊凯&#x27;</span>];</span><br><span class="line"><span class="comment">//  =&gt; &#x27;易烊千玺&#x27;, &#x27;王源&#x27;, &#x27;王俊凯&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">chunwan</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">chunwan</span>(...<span class="variable constant_">ARR</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  1.数组合并</span></span><br><span class="line"><span class="keyword">const</span> kuaizi = [<span class="string">&#x27;王太利&#x27;</span>, <span class="string">&#x27;肖央&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> fenghuang = [<span class="string">&#x27;曾毅&#x27;</span>, <span class="string">&#x27;玲花&#x27;</span>];</span><br><span class="line"><span class="comment">//  普通合并数组</span></span><br><span class="line"><span class="comment">// const zuixuan = kuaizi.concat(fenghuang);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> zuixuan = [...kuaizi, ...fenghuang];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(zuixuan);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 将伪数组 转换为真正的数组</span></span><br><span class="line"><span class="keyword">const</span> divs = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> divArr = [...divs];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(divArr);</span><br></pre></td></tr></table></figure><h1 id="Map对象"><a href="#Map对象" class="headerlink" title="Map对象"></a>Map对象</h1><p>​ES6  提供了 Map 数据结构. 它类似于对象, 也是键值对的集合.但是”健”的范围不限于字符串. 各种类型的值(包括对象都可以当作健.Map 也实现了 iterator 接口, 所以可以使用[扩展月算符] 和 [for…of] 进行遍历. Map的属性和方法;</p><table><thead><tr><th>name</th><th>function</th></tr></thead><tbody><tr><td>size</td><td>返回Map的元素个数</td></tr><tr><td>set</td><td>增加一个新的元素</td></tr><tr><td>get</td><td>返回键名对象的键值</td></tr><tr><td>has</td><td>检测Map中是否包含某个元素, 返回 boolean值</td></tr><tr><td>clear</td><td>清空集合, 返回undefined</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个空 map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title function_">map</span>();</span><br><span class="line"><span class="comment">//创建一个非空 map</span></span><br></pre></td></tr></table></figure><h3 id="Map数组的使用"><a href="#Map数组的使用" class="headerlink" title="Map数组的使用"></a>Map数组的使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明 Map</span></span><br><span class="line">        <span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">        <span class="comment">//  添加元素    set(key,value);</span></span><br><span class="line">        m.<span class="title function_">set</span>(<span class="string">&#x27;names&#x27;</span>, <span class="string">&#x27;尚硅谷&#x27;</span>);</span><br><span class="line">        m.<span class="title function_">set</span>(<span class="string">&#x27;chang&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变你&quot;</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">let</span> key = &#123;</span><br><span class="line">            <span class="attr">school</span>: <span class="string">&#x27;ATGUIGU&#x27;</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//  健是 一个对象, 值是一个数组</span></span><br><span class="line">        m.<span class="title function_">set</span>(key, [<span class="string">&#x27;上海&#x27;</span>, <span class="string">&#x27;北京&#x27;</span>, <span class="string">&#x27;深圳&#x27;</span>]);</span><br><span class="line">        <span class="comment">//  size</span></span><br><span class="line">        <span class="comment">// console.log(m.size);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  删除</span></span><br><span class="line">        <span class="comment">// m.delete(&#x27;names&#x27;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  获取</span></span><br><span class="line">        <span class="comment">// console.log(m.get(&#x27;chang&#x27;))</span></span><br><span class="line">        <span class="comment">// console.log(m)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空</span></span><br><span class="line">        <span class="comment">// m.clear();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> m) &#123;</span><br><span class="line">            <span class="comment">//  打印的是数组</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h1 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h1><p>​ES6提供了更接近传统语言的写法, 引入了 class (类) 这个概念,作为对象的模板. 通过class关键字, 可以定义类.基本上, ES6 的class 可以看作只是一个语法糖, 它的绝大部分功能, ES5 都可以做到, 新的class 写法只是让对象原型更清晰. 更像面向对象编程语法而已.</p><p>知识点: </p><table><thead><tr><th>class</th><th>声明类</th></tr></thead><tbody><tr><td>constructor</td><td>定义构造函数初始化</td></tr><tr><td>extends</td><td>继承父类</td></tr><tr><td>super</td><td>调用父级构造方法</td></tr><tr><td>static</td><td>定义静态方法和属性</td></tr><tr><td></td><td>父类方法可以重写</td></tr></tbody></table><h3 id="class使用"><a href="#class使用" class="headerlink" title="class使用"></a>class使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  ES5 语法实现</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//  手机</span></span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  添加方法</span></span><br><span class="line">            <span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  实例化对象</span></span><br><span class="line">            <span class="keyword">let</span> <span class="title class_">Huawei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;华为&#x27;</span>, <span class="number">5999</span>);</span><br><span class="line">            <span class="title class_">Huawei</span>.<span class="title function_">call</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Huawei</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  ES6 class 语法实现</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">            <span class="comment">//  构造方法 ,名字不能修改</span></span><br><span class="line">            <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//  方法必须使用该语法, 不能使用 ES5 的对象完整形态</span></span><br><span class="line">            <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> onePlus = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;小米&#x27;</span>, <span class="number">2999</span>);</span><br><span class="line">        onePlus.<span class="title function_">call</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(onePlus);</span><br></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// function Phone() &#123;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       <span class="comment">// //  数据函数对象的 不属于实例对象</span></span><br><span class="line">       <span class="comment">// Phone.name = &#x27;手机&#x27;;</span></span><br><span class="line">       <span class="comment">// Phone.change = function() &#123;</span></span><br><span class="line">       <span class="comment">//     console.log(&#x27;我可以改变世界&#x27;);</span></span><br><span class="line">       <span class="comment">// &#125;</span></span><br><span class="line">       <span class="comment">// Phone.prototype.size = &#x27;5.5inch&#x27;;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// let nokia = new Phone();</span></span><br><span class="line">       <span class="comment">// console.log(nokia.name); //  访问不到</span></span><br><span class="line">       <span class="comment">// console.log(nokia.size); //  访问成功</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">           <span class="comment">//  静态属性</span></span><br><span class="line">           <span class="keyword">static</span> name = <span class="string">&#x27;手机&#x27;</span>;</span><br><span class="line">           <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以改变世界&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);</span><br><span class="line">       <span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br></pre></td></tr></table></figure><h4 id="使用ES5构造函数来实现继承"><a href="#使用ES5构造函数来实现继承" class="headerlink" title="使用ES5构造函数来实现继承"></a>使用ES5构造函数来实现继承</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  父级构造函数</span></span><br><span class="line">      <span class="comment">//  手机 对象</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  方法</span></span><br><span class="line">      <span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以打电话&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 子级构造函数</span></span><br><span class="line">      <span class="comment">//  智能手机 使用继承 手机</span></span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">          <span class="comment">//调用父级 方法</span></span><br><span class="line">          <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  设置子级构造函数的原型  </span></span><br><span class="line">      <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//  声明子类的方法</span></span><br><span class="line">      <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以拍照&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">playGame</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;锤子&#x27;</span>, <span class="number">2499</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;5.5inch&#x27;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">      chuizi.<span class="title function_">playGame</span>();</span><br><span class="line">      chuizi.<span class="title function_">photo</span>();</span><br></pre></td></tr></table></figure><h2 id="使用ES6构造函数来实现继承"><a href="#使用ES6构造函数来实现继承" class="headerlink" title="使用ES6构造函数来实现继承"></a>使用ES6构造函数来实现继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  创建父类  普通手机</span></span><br><span class="line">       <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">           &#125;;</span><br><span class="line">           <span class="comment">// 方法</span></span><br><span class="line">           <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&#x27;mi&#x27;</span>, <span class="number">2999</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">       p.<span class="title function_">call</span>();</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------子类---------&#x27;</span>);</span><br><span class="line">       <span class="comment">//  创建子类 智能手机</span></span><br><span class="line">       <span class="comment">//   extends 是关键字 证明 Phone 是父类</span></span><br><span class="line">       <span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">           <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">               <span class="comment">//  子类调用父类的方法  super</span></span><br><span class="line">               <span class="variable language_">super</span>(brand, price);</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">               <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">playGame</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以玩游戏&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以拍照&#x27;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">const</span> chuzi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&#x27;锤子&#x27;</span>, <span class="number">9999</span>, <span class="string">&#x27;black&#x27;</span>, <span class="string">&#x27;5.5inch&#x27;</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(chuzi);</span><br><span class="line">       chuzi.<span class="title function_">call</span>();</span><br><span class="line">       chuzi.<span class="title function_">playGame</span>();</span><br><span class="line">       chuzi.<span class="title function_">photo</span>();</span><br></pre></td></tr></table></figure><h3 id="class-中-get-和-set"><a href="#class-中-get-和-set" class="headerlink" title="class 中 get 和 set"></a>class 中 get 和 set</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  class 中的 get 和 set</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">            <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格被读取了&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;iloveyou&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">newval</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;价格被修改了&#x27;</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(newval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  实例化对象</span></span><br><span class="line">        <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>);</span><br><span class="line">        <span class="comment">// console.log()</span></span><br><span class="line">        s.<span class="property">price</span> = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Set数组"><a href="#Set数组" class="headerlink" title="Set数组"></a>Set数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  声明一个集合</span></span><br><span class="line">       <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line">       <span class="comment">//  会把相同的给 去掉</span></span><br><span class="line">       <span class="keyword">let</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;大事儿&#x27;</span>, <span class="string">&#x27;小事儿&#x27;</span>, <span class="string">&#x27;好事儿&#x27;</span>, <span class="string">&#x27;坏事儿&#x27;</span>, <span class="string">&#x27;小事儿&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//  元素个数</span></span><br><span class="line">       <span class="comment">// console.log(s2.size);</span></span><br><span class="line">       <span class="comment">//  添加元素</span></span><br><span class="line">       <span class="comment">// s2.add(&#x27;喜事儿&#x27;);</span></span><br><span class="line">       <span class="comment">//  删除元素</span></span><br><span class="line">       <span class="comment">// s2.delete(&quot;坏事儿&quot;);</span></span><br><span class="line">       <span class="comment">//  检测    有返回 true 没有返回 false</span></span><br><span class="line">       <span class="comment">// console.log(s2.has(&#x27;好事儿&#x27;));</span></span><br><span class="line">       <span class="comment">//  清空</span></span><br><span class="line">       <span class="comment">// s2.clear();</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> s2) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><h2 id="Set使用"><a href="#Set使用" class="headerlink" title="Set使用"></a>Set使用</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="comment">//  1.数组去重</span></span><br><span class="line">        <span class="comment">// let result = [...new Set(arr)];</span></span><br><span class="line">        <span class="comment">//  2.交集</span></span><br><span class="line">        <span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>]; <span class="comment">//  .filter 循环数组</span></span><br><span class="line">        <span class="comment">// let result = [...new Set(arr)].filter(item =&gt; &#123;</span></span><br><span class="line">        <span class="comment">//     let s2 = new Set(arr2);</span></span><br><span class="line">        <span class="comment">//     // return s2.has(item) ? true : false;</span></span><br><span class="line">        <span class="comment">//     if (s2.has(item)) &#123;</span></span><br><span class="line">        <span class="comment">//         return true;</span></span><br><span class="line">        <span class="comment">//     &#125; else &#123;</span></span><br><span class="line">        <span class="comment">//         return false;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;);</span></span><br><span class="line">        <span class="comment">//  简化 </span></span><br><span class="line">        <span class="comment">// let result = [...new Set(arr)].filter(item =&gt; new Set(arr2).has(item));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.并集</span></span><br><span class="line">        <span class="comment">// let union = [...new Set([...arr, ...arr2])];</span></span><br><span class="line">        <span class="comment">// console.log(union);</span></span><br><span class="line">        <span class="comment">//  4.差集</span></span><br><span class="line">        <span class="keyword">let</span> diff = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)));</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(diff);</span><br></pre></td></tr></table></figure><h1 id="Symbol数据类型"><a href="#Symbol数据类型" class="headerlink" title="Symbol数据类型"></a>Symbol数据类型</h1><p>​Symbol 是类似于字符转的 数据类型</p><ol><li>Symbol的值是唯一的, 用来解决命名冲突问题</li><li>Symblo 值不能与其他数据类型进行运算</li><li>Symbol 定义的对象属性不能只用  fot..in 循环遍历, 但是可以使用Reflect.ownKeys来获取对象的所有健名</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  创建 Symbol, 内部实现了 唯一性</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s, <span class="keyword">typeof</span> s);</span><br><span class="line">        <span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>); <span class="comment">// 内置函数</span></span><br><span class="line">        <span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;尚硅谷&#x27;</span>); <span class="comment">//这里只是一个标志</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s1 === s2); <span class="comment">// false</span></span><br><span class="line">        <span class="comment">//  创建一个 Symbol.for  函数对象</span></span><br><span class="line">        <span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s4);</span><br><span class="line">        <span class="comment">//  不能与其他数据进行运算</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* USONB   you are so niubility</span></span><br><span class="line"><span class="comment">        u   undefined</span></span><br><span class="line"><span class="comment">        s   string   symbol</span></span><br><span class="line"><span class="comment">        o   object</span></span><br><span class="line"><span class="comment">        n   null    nmumber</span></span><br><span class="line"><span class="comment">        b   boolean</span></span><br><span class="line"><span class="comment">        */</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-的使用"><a href="#Symbol-的使用" class="headerlink" title="Symbol 的使用"></a>Symbol 的使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  symbol 的使用场景 就是给对象添加属性和方法</span></span><br><span class="line">        <span class="comment">// 向对象中添加 up down 方法</span></span><br><span class="line">        <span class="keyword">let</span> game = &#123;&#125;;</span><br><span class="line">        <span class="comment">//  1. 声明对象</span></span><br><span class="line">        <span class="keyword">let</span> methods = &#123;</span><br><span class="line">            <span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line">            <span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 安全且快速的添加进去</span></span><br><span class="line">        game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是up&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我是down&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br></pre></td></tr></table></figure><h3 id="Symbol用来做类型检测"><a href="#Symbol用来做类型检测" class="headerlink" title="Symbol用来做类型检测"></a>Symbol用来做类型检测</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Symbol 内置属性</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">            <span class="keyword">static</span>[<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(param);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我被用来检测类型了&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>)</span><br></pre></td></tr></table></figure><h3 id="Symbol数据展开"><a href="#Symbol数据展开" class="headerlink" title="Symbol数据展开"></a>Symbol数据展开</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">        <span class="keyword">const</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line">        <span class="comment">//  Symbol.isConcatSpreadable] 控制数据是否可展开</span></span><br><span class="line">        <span class="comment">// 默认值是true </span></span><br><span class="line">        arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(arr2));</span><br></pre></td></tr></table></figure><h1 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h1><p>​迭代器是一种接口, 为各种不同的数据结构提供统一的访问机制.任何数据结构只要部署 Iterator 接口, 就可以完成遍历操作.</p><ol><li>ES6 创造了一种新遍历命令 for…of 命令, Iterator 接口主要提供for..of消费</li><li>原生具备 Iterator 接口的数据(可用 for .. of 遍历)</li></ol><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator);</span><br><span class="line">        <span class="comment">//  调用迭代器</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><p>自定义遍历</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Ban</span> = &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;终极一班&#x27;</span>,</span><br><span class="line">            <span class="attr">stus</span>: [</span><br><span class="line">                <span class="string">&#x27;小明&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;小红&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;小宁&#x27;</span></span><br><span class="line">            ],</span><br><span class="line">            [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">                <span class="comment">//  索引变量</span></span><br><span class="line">                <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                            <span class="keyword">const</span> result = &#123;</span><br><span class="line">                                <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">stus</span>[index],</span><br><span class="line">                                <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">                            &#125;</span><br><span class="line">                            index++;</span><br><span class="line">                            <span class="keyword">return</span> result;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">return</span> &#123;</span><br><span class="line">                                <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">                                <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title class_">Ban</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  生成器其实就是一个特殊函数</span></span><br><span class="line">        <span class="comment">//  异步编程  纯回调函数  node fs ajax  mongodb</span></span><br><span class="line">        <span class="comment">//  函数代码分隔符 yield</span></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">fen</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">&#x27;two&#x27;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">            <span class="keyword">yield</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> iterator = <span class="title function_">fen</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-------------&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">fen</span>()) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 异步编程  文件操作   网络操作(ajax, request) 数据库操作</span></span><br><span class="line">        <span class="comment">//  1s 后控制台输出 111 2s 后输出 222   3s 后输出 333</span></span><br><span class="line">        <span class="comment">//  回调应用</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  回调函数</span></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">                iterator.<span class="title function_">next</span>();</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">                iterator.<span class="title function_">next</span>();</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">                iterator.<span class="title function_">next</span>();</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">            <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">            <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">           <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               <span class="comment">//  数据成功返回 成功就返回  resolve</span></span><br><span class="line">               <span class="comment">// let data = &#x27;数据库中的数据&#x27;;</span></span><br><span class="line">               <span class="comment">// resolve(data);</span></span><br><span class="line"></span><br><span class="line">               <span class="comment">//  数据读取失败  reject</span></span><br><span class="line">               <span class="keyword">let</span> err = <span class="string">&#x27;数据读取失败&#x27;</span>;</span><br><span class="line">               <span class="title function_">reject</span>(err);</span><br><span class="line">           &#125;, <span class="number">1000</span>)</span><br><span class="line">       &#125;);</span><br><span class="line">       <span class="comment">//  调用 promise 对象的 then 方法</span></span><br><span class="line">       p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">       &#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(reason);</span><br><span class="line">       &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 如果成功了 使用 resolve方法</span></span><br><span class="line">                <span class="comment">// resolve(&quot;用户数据&quot;);</span></span><br><span class="line">                <span class="comment">// 如果失败了 调用 reject方法</span></span><br><span class="line">                <span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用 then方法</span></span><br><span class="line">        p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure><h4 id="处理文件的使用"><a href="#处理文件的使用" class="headerlink" title="处理文件的使用"></a>处理文件的使用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; rejects &#125; = <span class="built_in">require</span>(<span class="string">&#x27;assert&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//  1.调用方法读取文件</span></span><br><span class="line"><span class="comment">// fs.readFile(&#x27;./文件/xue.md&#x27;, (err, data) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//     //  如果失败, 则抛出 作物</span></span><br><span class="line"><span class="comment">//     if (err) throw err;</span></span><br><span class="line"><span class="comment">//     //  如果没有出错, 则输出内容</span></span><br><span class="line"><span class="comment">//     console.log(data.toString());</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 使用 Promise 封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./文件/xue.md&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//  判断 如果失败</span></span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="comment">// 如果成功 </span></span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;读取失败!!!&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyCharm快捷键</title>
      <link href="/2021/12/31/PyCharm%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2021/12/31/PyCharm%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="PyCharm快捷键"><a href="#PyCharm快捷键" class="headerlink" title="PyCharm快捷键"></a>PyCharm快捷键</h1><p><img src="/Pycharm.jpg" alt="Pycharm"></p><h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + Q</td><td>快速查看文档</td></tr><tr><td>Ctrl + F1</td><td>显示错误描述或警告信息</td></tr><tr><td>Ctrl + &#x2F;</td><td>行注释（可选中多行）</td></tr><tr><td>Ctrl + Alt + L</td><td>代码格式化</td></tr><tr><td>Ctrl + Alt + O</td><td>自动导入</td></tr><tr><td>Ctrl + Alt + I</td><td>自动缩进</td></tr><tr><td>Tab &#x2F; Shift + Tab</td><td>缩进、不缩进当前行（可选中多行）</td></tr><tr><td>Ctrl+C&#x2F;Ctrl+Insert</td><td>复制当前行或选定的代码块到剪贴板</td></tr><tr><td>Ctrl + D</td><td>复制选定的区域</td></tr><tr><td>Ctrl + Y</td><td>删除当前行</td></tr><tr><td>Shift + Enter</td><td>换行（不用鼠标操作了）</td></tr><tr><td>Ctrl +Ｊ</td><td>插入模版</td></tr><tr><td>Ctrl + Shift +&#x2F;-</td><td>展开&#x2F;折叠全部代码块</td></tr><tr><td>Ctrl + Numpad+</td><td>全部展开</td></tr><tr><td>Ctrl + Numpad-</td><td>全部折叠</td></tr><tr><td>Ctrl + Delete</td><td>删除到字符结束</td></tr><tr><td>Ctrl + Backspace</td><td>删除到字符开始</td></tr><tr><td>Ctrl + Shift + F7</td><td>将当前单词在整个文件中高亮，F3移动到下一个，ESC取消高亮。</td></tr><tr><td>Alt + up&#x2F;down</td><td>方法上移或下移动</td></tr><tr><td>Alt + Shift + up&#x2F;down</td><td>当前行上移或下移动</td></tr><tr><td>Ctrl + B&#x2F;鼠标左键</td><td>转到方法定义处</td></tr><tr><td>Ctrl + W</td><td>选中增加的代码块</td></tr><tr><td>Shift + F6</td><td>方法或变量重命名</td></tr><tr><td>Ctrl + E</td><td>最近访问的文件</td></tr><tr><td>Esc</td><td>从其他窗口回到编辑窗口</td></tr><tr><td>Shift + Esc</td><td>隐藏当前窗口，焦点到编辑窗口</td></tr><tr><td>F12</td><td>回到先前的工具窗口</td></tr><tr><td>Ctrl + Shift + up</td><td>快速上移某一行</td></tr><tr><td>Ctrl + Shift + down</td><td>快速下移某一行</td></tr><tr><td>ctrl+alt+左箭头</td><td>返回上一个光标的位置（CTRL进入函数后返回）</td></tr><tr><td>ctrl+alt+右箭头</td><td>前进到后一个光标的位置</td></tr></tbody></table><h1 id="全部快捷键"><a href="#全部快捷键" class="headerlink" title="全部快捷键"></a>全部快捷键</h1><h2 id="1、编辑（Editing）"><a href="#1、编辑（Editing）" class="headerlink" title="1、编辑（Editing）"></a>1、编辑（Editing）</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + Space</td><td>基本的代码完成（类、方法、属性）</td></tr><tr><td>Ctrl + Alt + Space</td><td>快速导入任意类</td></tr><tr><td>Ctrl + Shift + Enter</td><td>语句完成</td></tr><tr><td>Ctrl + P</td><td>参数信息（在方法中调用参数）</td></tr><tr><td>Ctrl + Q</td><td>快速查看文档</td></tr><tr><td>Shift + F1</td><td>外部文档</td></tr><tr><td>Ctrl + 鼠标</td><td>简介</td></tr><tr><td>Ctrl + F1</td><td>显示错误描述或警告信息</td></tr><tr><td>Alt + Insert</td><td>自动生成代码</td></tr><tr><td>Ctrl + O</td><td>重新方法</td></tr><tr><td>Ctrl + Alt + T</td><td>选中</td></tr><tr><td>Ctrl + &#x2F;</td><td>行注释</td></tr><tr><td>Ctrl + Shift + &#x2F;</td><td>块注释</td></tr><tr><td>Ctrl + W</td><td>选中增加的代码块</td></tr><tr><td>Ctrl + Shift + W</td><td>回到之前状态</td></tr><tr><td>Ctrl + Shift + ]&#x2F;[</td><td>选定代码块结束、开始</td></tr><tr><td>Alt + Enter</td><td>快速修正</td></tr><tr><td>Ctrl + Alt + L</td><td>代码格式化</td></tr><tr><td>Ctrl + Alt + O</td><td>自动导入</td></tr><tr><td>Ctrl + Alt + I</td><td>自动缩进</td></tr><tr><td>Tab &#x2F; Shift + Tab</td><td>缩进、不缩进当前行</td></tr><tr><td>Ctrl+X&#x2F;Shift+Delete</td><td>剪切当前行或选定的代码块到剪贴板</td></tr><tr><td>Ctrl+C&#x2F;Ctrl+Insert</td><td>复制当前行或选定的代码块到剪贴板</td></tr><tr><td>Ctrl+V&#x2F;Shift+Insert</td><td>从剪贴板粘贴</td></tr><tr><td>Ctrl + Shift + V</td><td>从最近的缓冲区粘贴</td></tr><tr><td>Ctrl + D</td><td>复制选定的区域或行到后面或下一行</td></tr><tr><td>Ctrl + Y</td><td>删除当前行</td></tr><tr><td>Ctrl + Shift + J</td><td>添加智能线</td></tr><tr><td>Ctrl + Enter</td><td>智能线切割</td></tr><tr><td>Shift + Enter</td><td>下一行另起一行</td></tr><tr><td>Ctrl + Shift + U</td><td>在选定的区域或代码块间切换</td></tr><tr><td>Ctrl + Delete</td><td>删除到字符结束</td></tr><tr><td>Ctrl + Backspace</td><td>删除到字符开始</td></tr><tr><td>Ctrl + Numpad+&#x2F;-</td><td>展开折叠代码块</td></tr><tr><td>Ctrl + Numpad+</td><td>全部展开</td></tr><tr><td>Ctrl + Numpad-</td><td>全部折叠</td></tr><tr><td>Ctrl + F4</td><td>关闭运行的选项卡</td></tr></tbody></table><h2 id="2、查找-替换-Search-Replace"><a href="#2、查找-替换-Search-Replace" class="headerlink" title="2、查找&#x2F;替换(Search&#x2F;Replace)"></a>2、查找&#x2F;替换(Search&#x2F;Replace)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F3</td><td>下一个</td></tr><tr><td>Shift + F3</td><td>前一个</td></tr><tr><td>Ctrl + R</td><td>替换</td></tr><tr><td>Ctrl + Shift + F</td><td>全局查找</td></tr><tr><td>Ctrl + Shift + R</td><td>全局替换</td></tr></tbody></table><h2 id="3、运行-Running"><a href="#3、运行-Running" class="headerlink" title="3、运行(Running)"></a>3、运行(Running)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt + Shift + F10</td><td>运行模式配置</td></tr><tr><td>Alt + Shift + F9</td><td>调试模式配置</td></tr><tr><td>Shift + F10</td><td>运行</td></tr><tr><td>Shift + F9</td><td>调试</td></tr><tr><td>Ctrl + Shift + F10</td><td>运行编辑器配置</td></tr><tr><td>Ctrl + Alt + R</td><td>运行manage.py任务</td></tr></tbody></table><h2 id="4、调试-Debugging"><a href="#4、调试-Debugging" class="headerlink" title="4、调试(Debugging)"></a>4、调试(Debugging)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F8</td><td>跳过</td></tr><tr><td>F7</td><td>进入</td></tr><tr><td>Shift + F8</td><td>退出</td></tr><tr><td>Alt + F9</td><td>运行游标</td></tr><tr><td>Alt + F8</td><td>验证表达式</td></tr><tr><td>Ctrl + Alt + F8</td><td>快速验证表达式</td></tr><tr><td>F9</td><td>恢复程序</td></tr><tr><td>Ctrl + F8</td><td>断点开关</td></tr><tr><td>Ctrl + Shift + F8</td><td>查看断点</td></tr></tbody></table><h2 id="5、导航-Navigation"><a href="#5、导航-Navigation" class="headerlink" title="5、导航(Navigation)"></a>5、导航(Navigation)</h2><table><thead><tr><th>快捷键</th><th>功能</th><th></th></tr></thead><tbody><tr><td>Ctrl + N</td><td>跳转到类</td><td></td></tr><tr><td>Ctrl + Shift + N</td><td>跳转到符号</td><td></td></tr><tr><td>Alt + Right&#x2F;Left</td><td>跳转到下一个、前一个编辑的选项卡</td><td></td></tr><tr><td>F12</td><td>回到先前的工具窗口</td><td></td></tr><tr><td>Esc</td><td>从其他窗口回到编辑窗口</td><td></td></tr><tr><td>Shift + Esc</td><td>隐藏当前窗口，焦点到编辑窗口</td><td></td></tr><tr><td>Ctrl + Shift + F4</td><td>关闭主动运行的选项卡</td><td></td></tr><tr><td>Ctrl + G</td><td>查看当前行号、字符号</td><td></td></tr><tr><td>Ctrl + E</td><td>最近访问的文件</td><td></td></tr><tr><td>Ctrl+Alt+Left&#x2F;Right</td><td>后退、前进</td><td></td></tr><tr><td>Ctrl+Shift+Backspace</td><td>导航到最近编辑区域</td><td></td></tr><tr><td>Alt + F1</td><td>查找当前文件或标识</td><td></td></tr><tr><td>Ctrl+B &#x2F; Ctrl+Click</td><td>跳转到声明</td><td></td></tr><tr><td>Ctrl + Alt + B</td><td>跳转到实现</td><td></td></tr><tr><td>Ctrl + Shift + I</td><td>查看快速定义</td><td></td></tr><tr><td>Ctrl + Shift + B</td><td>跳转到类型声明</td><td></td></tr><tr><td>Ctrl + U</td><td>跳转到父方法、父类</td><td></td></tr><tr><td>Alt + Up&#x2F;Down</td><td>跳转到上一个、下一个方法</td><td></td></tr><tr><td>Ctrl + ]&#x2F;[</td><td>跳转到代码块结束、开始</td><td></td></tr><tr><td>Ctrl + F12</td><td>弹出文件结构</td><td></td></tr><tr><td>Ctrl + H</td><td>类型层次结构</td><td></td></tr><tr><td>Ctrl + Shift + H</td><td>方法层次结构</td><td></td></tr><tr><td>Ctrl + Alt + H</td><td>调用层次结构</td><td></td></tr><tr><td>F2 &#x2F; Shift + F2</td><td>下一条、前一条高亮的错误</td><td></td></tr><tr><td>F4 &#x2F; Ctrl + Enter</td><td>编辑资源、查看资源</td><td></td></tr><tr><td>Alt + Home</td><td>显示导航条F11书签开关</td><td></td></tr><tr><td>Ctrl + Shift +F11</td><td>书签助记开关</td><td></td></tr><tr><td>Ctrl #[0-9]</td><td>+</td><td>跳转到标识的书签</td></tr><tr><td>Shift +</td><td>F11显示书签</td><td></td></tr></tbody></table><h2 id="6、搜索相关-Usage-Search"><a href="#6、搜索相关-Usage-Search" class="headerlink" title="6、搜索相关(Usage Search)"></a>6、搜索相关(Usage Search)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt + F7&#x2F;Ctrl + F7</td><td>文件中查询用法</td></tr><tr><td>Ctrl + Shift + F7</td><td>文件中用法高亮显示</td></tr><tr><td>Ctrl + Alt + F7</td><td>显示用法</td></tr></tbody></table><h2 id="7、重构-Refactoring"><a href="#7、重构-Refactoring" class="headerlink" title="7、重构(Refactoring)"></a>7、重构(Refactoring)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>F5</td><td>复制</td></tr><tr><td>F6</td><td>剪切</td></tr><tr><td>Alt + Delete</td><td>安全删除</td></tr><tr><td>Shift + F6</td><td>方法或变量重命名</td></tr><tr><td>Ctrl + F6</td><td>更改签名</td></tr><tr><td>Ctrl + Alt + N</td><td>内联</td></tr><tr><td>Ctrl + Alt + M</td><td>提取方法</td></tr><tr><td>Ctrl + Alt + V</td><td>提取属性</td></tr><tr><td>Ctrl + Alt + F</td><td>提取字段</td></tr><tr><td>Ctrl + Alt + C</td><td>提取常量</td></tr><tr><td>Ctrl + Alt + P</td><td>提取参数</td></tr></tbody></table><h2 id="8、控制VCS-Local-History"><a href="#8、控制VCS-Local-History" class="headerlink" title="8、控制VCS&#x2F;Local History"></a>8、控制VCS&#x2F;Local History</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + K</td><td>提交项目</td></tr><tr><td>Ctrl + T</td><td>更新项目</td></tr><tr><td>Alt + Shift + C</td><td>查看最近的变化</td></tr><tr><td>Alt + BackQuote(’)VCS</td><td>快速弹出</td></tr><tr><td>Ctrl + Alt + J</td><td>当前行使用模版</td></tr></tbody></table><h2 id="9、模版-Live-Templates"><a href="#9、模版-Live-Templates" class="headerlink" title="9、模版(Live Templates)"></a>9、模版(Live Templates)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Ctrl + Alt + J</td><td>当前行使用模版</td></tr><tr><td>Ctrl +Ｊ</td><td>插入模版</td></tr></tbody></table><h2 id="10、基本-General"><a href="#10、基本-General" class="headerlink" title="10、基本(General)"></a>10、基本(General)</h2><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt + #[0-9]</td><td>打开相应编号的工具窗口</td></tr><tr><td>Ctrl + Alt + Y</td><td>同步</td></tr><tr><td>Ctrl + Shift + F12</td><td>最大化编辑开关</td></tr><tr><td>Alt + Shift + F</td><td>添加到最喜欢</td></tr><tr><td>Alt + Shift + I</td><td>根据配置检查当前文件</td></tr><tr><td>Ctrl + BackQuote(’)</td><td>快速切换当前计划</td></tr><tr><td>Ctrl + Alt + S</td><td>打开设置页</td></tr><tr><td>Ctrl + Shift + A</td><td>查找编辑器里所有的动作</td></tr><tr><td>Ctrl + Tab</td><td>在窗口间进行切换</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Single line comments start with a number symbol.</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; Multiline strings can be written</span></span><br><span class="line"><span class="string">    using three &quot;s, and are often used</span></span><br><span class="line"><span class="string">    as documentation.</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 1. Primitive Datatypes and Operators</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You have numbers</span></span><br><span class="line"><span class="number">3</span>  <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Math is what you would expect</span></span><br><span class="line"><span class="number">1</span> + <span class="number">1</span>   <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="number">8</span> - <span class="number">1</span>   <span class="comment"># =&gt; 7</span></span><br><span class="line"><span class="number">10</span> * <span class="number">2</span>  <span class="comment"># =&gt; 20</span></span><br><span class="line"><span class="number">35</span> / <span class="number">5</span>  <span class="comment"># =&gt; 7.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  正数和负数的整数除法都会向下舍入。</span></span><br><span class="line"><span class="number">5</span> // <span class="number">3</span>       <span class="comment"># =&gt; 1</span></span><br><span class="line">-<span class="number">5</span> // <span class="number">3</span>      <span class="comment"># =&gt; -2</span></span><br><span class="line"><span class="number">5.0</span> // <span class="number">3.0</span>   <span class="comment"># =&gt; 1.0 # works on floats too</span></span><br><span class="line">-<span class="number">5.0</span> // <span class="number">3.0</span>  <span class="comment"># =&gt; -2.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  除法的结果总是浮点数</span></span><br><span class="line"><span class="number">10.0</span> / <span class="number">3</span>  <span class="comment"># =&gt; 3.3333333333333335</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模运算</span></span><br><span class="line"><span class="number">7</span> % <span class="number">3</span>   <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># i % j have the same sign as j, unlike C</span></span><br><span class="line">-<span class="number">7</span> % <span class="number">3</span>  <span class="comment"># =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求幂 (x**y,x 的 y 次幂)</span></span><br><span class="line"><span class="number">2</span>**<span class="number">3</span>  <span class="comment"># =&gt; 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用括号强制优先</span></span><br><span class="line"><span class="number">1</span> + <span class="number">3</span> * <span class="number">2</span>    <span class="comment"># =&gt; 7</span></span><br><span class="line">(<span class="number">1</span> + <span class="number">3</span>) * <span class="number">2</span>  <span class="comment"># =&gt; 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔值是基元（注意：大写）</span></span><br><span class="line"><span class="literal">True</span>   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="literal">False</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 否定与不</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">True</span>   <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="keyword">not</span> <span class="literal">False</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 布尔运算符</span></span><br><span class="line"><span class="comment"># 注意“and”和“or”区分大小写</span></span><br><span class="line"><span class="literal">True</span> <span class="keyword">and</span> <span class="literal">False</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="literal">False</span> <span class="keyword">or</span> <span class="literal">True</span>   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># True 和 False 实际上是 1 和 0 但关键字不同</span></span><br><span class="line"><span class="literal">True</span> + <span class="literal">True</span> <span class="comment"># =&gt; 2</span></span><br><span class="line"><span class="literal">True</span> * <span class="number">8</span>    <span class="comment"># =&gt; 8</span></span><br><span class="line"><span class="literal">False</span> - <span class="number">5</span>   <span class="comment"># =&gt; -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 较运算符查看 True 和 False 的数值</span></span><br><span class="line"><span class="number">0</span> == <span class="literal">False</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> == <span class="literal">True</span>   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="literal">True</span>   <span class="comment"># =&gt; False</span></span><br><span class="line">-<span class="number">5</span> != <span class="literal">False</span> <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在整数上使用布尔逻辑运算符将它们转换为布尔值进行评估，但返回它们的非转换值</span></span><br><span class="line"><span class="comment"># 不要与 bool(ints) 和按位和/或 (&amp;,|)</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)     <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">4</span>)     <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="built_in">bool</span>(-<span class="number">6</span>)    <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span>     <span class="comment"># =&gt; 0</span></span><br><span class="line">-<span class="number">5</span> <span class="keyword">or</span> <span class="number">0</span>     <span class="comment"># =&gt; -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平等是 ==</span></span><br><span class="line"><span class="number">1</span> == <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> == <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不平等是！=</span></span><br><span class="line"><span class="number">1</span> != <span class="number">1</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> != <span class="number">1</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更多比较</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">10</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> &gt; <span class="number">10</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="number">2</span> &lt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &gt;= <span class="number">2</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看一个值是否在一个范围内</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> <span class="keyword">and</span> <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="number">3</span> <span class="keyword">and</span> <span class="number">3</span> &lt; <span class="number">2</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="comment"># 这样的链接看起来更好</span></span><br><span class="line"><span class="number">1</span> &lt; <span class="number">2</span> &lt; <span class="number">3</span>  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">2</span> &lt; <span class="number">3</span> &lt; <span class="number">2</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (is vs. ==) is 检查两个变量是否指向同一个对象，但 == 检查</span></span><br><span class="line"><span class="comment"># 如果指向的对象具有相同的值。</span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># Point a at a new list, [1, 2, 3, 4]</span></span><br><span class="line">b = a             <span class="comment"># Point b at what a is pointing to</span></span><br><span class="line">b <span class="keyword">is</span> a            <span class="comment"># =&gt; True, a and b refer to the same object</span></span><br><span class="line">b == a            <span class="comment"># =&gt; True, a&#x27;s and b&#x27;s objects are equal</span></span><br><span class="line">b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]  <span class="comment"># Point b at a new list, [1, 2, 3, 4]</span></span><br><span class="line">b <span class="keyword">is</span> a            <span class="comment"># =&gt; False, a and b do not refer to the same object</span></span><br><span class="line">b == a            <span class="comment"># =&gt; True, a&#x27;s and b&#x27;s objects are equal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串是用 &quot; or &#x27; 创建的</span></span><br><span class="line"><span class="string">&quot;This is a string.&quot;</span></span><br><span class="line"><span class="string">&#x27;This is also a string.&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以添加字符串</span></span><br><span class="line"><span class="string">&quot;Hello &quot;</span> + <span class="string">&quot;world!&quot;</span>  <span class="comment"># =&gt; &quot;Hello world!&quot;</span></span><br><span class="line"><span class="comment"># 字符串文字（但不是变量）可以在不使用“+”的情况下连接</span></span><br><span class="line"><span class="string">&quot;Hello &quot;</span> <span class="string">&quot;world!&quot;</span>    <span class="comment"># =&gt; &quot;Hello world!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以将字符串视为字符列表</span></span><br><span class="line"><span class="string">&quot;Hello world!&quot;</span>[<span class="number">0</span>]  <span class="comment"># =&gt; &#x27;H&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 你可以找到一个字符串的长度</span></span><br><span class="line"><span class="built_in">len</span>(<span class="string">&quot;This is a string&quot;</span>)  <span class="comment"># =&gt; 16</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 您还可以使用 f 字符串或格式化字符串文字进行格式化（在 Python 3.6+ 中）</span></span><br><span class="line">name = <span class="string">&quot;Reiko&quot;</span></span><br><span class="line"><span class="string">f&quot;She said her name is <span class="subst">&#123;name&#125;</span>.&quot;</span> <span class="comment"># =&gt; &quot;She said her name is Reiko&quot;</span></span><br><span class="line"><span class="comment"># 您基本上可以将任何 Python 表达式放在大括号内，它将在字符串中输出。</span></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;name&#125;</span> is <span class="subst">&#123;<span class="built_in">len</span>(name)&#125;</span> characters long.&quot;</span> <span class="comment"># =&gt; &quot;Reiko is 5 characters long.&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有一个对象</span></span><br><span class="line"><span class="literal">None</span>  <span class="comment"># =&gt; None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不要使用等号“==”符号将对象与 None 进行比较</span></span><br><span class="line"><span class="comment"># 使用“是”代替。 这会检查对象身份的相等性。</span></span><br><span class="line"><span class="string">&quot;etc&quot;</span> <span class="keyword">is</span> <span class="literal">None</span>  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="literal">None</span> <span class="keyword">is</span> <span class="literal">None</span>   <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># None、0 和空字符串/列表/字典/元组都评估为 False。</span></span><br><span class="line"><span class="comment"># 所有其他值都是 True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)   <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>)  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>([])  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(&#123;&#125;)  <span class="comment"># =&gt; False</span></span><br><span class="line"><span class="built_in">bool</span>(())  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 2. 变量和集合</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python有打印功能</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I&#x27;m Python. Nice to meet you!&quot;</span>)  <span class="comment"># =&gt; I&#x27;m Python. Nice to meet you!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认情况下，打印功能还会在末尾打印出换行符。</span></span><br><span class="line"><span class="comment"># 使用可选参数 end 来更改结束字符串。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World&quot;</span>, end=<span class="string">&quot;!&quot;</span>)  <span class="comment"># =&gt; Hello, World!</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从控制台获取输入数据的简单方法</span></span><br><span class="line">input_string_var = <span class="built_in">input</span>(<span class="string">&quot;Enter some data: &quot;</span>) <span class="comment"># 以字符串形式返回数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有声明，只有赋值。</span></span><br><span class="line"><span class="comment"># 约定是使用lower_case_with_underscores</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line">some_var  <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问以前未分配的变量是一个例外。</span></span><br><span class="line"><span class="comment"># 请参阅控制流以了解有关异常处理的更多信息。</span></span><br><span class="line">some_unknown_var  <span class="comment"># Raises a NameError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># if 可以用作表达式</span></span><br><span class="line"><span class="comment"># 等效于 C 的 &#x27;?:&#x27; 三元运算符</span></span><br><span class="line"><span class="string">&quot;yay!&quot;</span> <span class="keyword">if</span> <span class="number">0</span> &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;nay!&quot;</span>  <span class="comment"># =&gt; &quot;nay!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Lists store sequences</span></span><br><span class="line">li = []</span><br><span class="line"><span class="comment"># You can start with a prefilled list</span></span><br><span class="line">other_li = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add stuff to the end of a list with append</span></span><br><span class="line">li.append(<span class="number">1</span>)    <span class="comment"># li is now [1]</span></span><br><span class="line">li.append(<span class="number">2</span>)    <span class="comment"># li is now [1, 2]</span></span><br><span class="line">li.append(<span class="number">4</span>)    <span class="comment"># li is now [1, 2, 4]</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li is now [1, 2, 4, 3]</span></span><br><span class="line"><span class="comment"># Remove from the end with pop</span></span><br><span class="line">li.pop()        <span class="comment"># =&gt; 3 and li is now [1, 2, 4]</span></span><br><span class="line"><span class="comment"># Let&#x27;s put it back</span></span><br><span class="line">li.append(<span class="number">3</span>)    <span class="comment"># li is now [1, 2, 4, 3] again.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Access a list like you would any array</span></span><br><span class="line">li[<span class="number">0</span>]   <span class="comment"># =&gt; 1</span></span><br><span class="line"><span class="comment"># Look at the last element</span></span><br><span class="line">li[-<span class="number">1</span>]  <span class="comment"># =&gt; 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Looking out of bounds is an IndexError</span></span><br><span class="line">li[<span class="number">4</span>]  <span class="comment"># Raises an IndexError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can look at ranges with slice syntax.</span></span><br><span class="line"><span class="comment"># The start index is included, the end index is not</span></span><br><span class="line"><span class="comment"># (It&#x27;s a closed/open range for you mathy types.)</span></span><br><span class="line">li[<span class="number">1</span>:<span class="number">3</span>]   <span class="comment"># Return list from index 1 to 3 =&gt; [2, 4]</span></span><br><span class="line">li[<span class="number">2</span>:]    <span class="comment"># Return list starting from index 2 =&gt; [4, 3]</span></span><br><span class="line">li[:<span class="number">3</span>]    <span class="comment"># Return list from beginning until index 3  =&gt; [1, 2, 4]</span></span><br><span class="line">li[::<span class="number">2</span>]   <span class="comment"># Return list selecting every second entry =&gt; [1, 4]</span></span><br><span class="line">li[::-<span class="number">1</span>]  <span class="comment"># Return list in reverse order =&gt; [3, 4, 2, 1]</span></span><br><span class="line"><span class="comment"># Use any combination of these to make advanced slices</span></span><br><span class="line"><span class="comment"># li[start:end:step]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a one layer deep copy using slices</span></span><br><span class="line">li2 = li[:]  <span class="comment"># =&gt; li2 = [1, 2, 4, 3] but (li2 is li) will result in false.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove arbitrary elements from a list with &quot;del&quot;</span></span><br><span class="line"><span class="keyword">del</span> li[<span class="number">2</span>]  <span class="comment"># li is now [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove first occurrence of a value</span></span><br><span class="line">li.remove(<span class="number">2</span>)  <span class="comment"># li is now [1, 3]</span></span><br><span class="line">li.remove(<span class="number">2</span>)  <span class="comment"># Raises a ValueError as 2 is not in the list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Insert an element at a specific index</span></span><br><span class="line">li.insert(<span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># li is now [1, 2, 3] again</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get the index of the first item found matching the argument</span></span><br><span class="line">li.index(<span class="number">2</span>)  <span class="comment"># =&gt; 1</span></span><br><span class="line">li.index(<span class="number">4</span>)  <span class="comment"># Raises a ValueError as 4 is not in the list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can add lists</span></span><br><span class="line"><span class="comment"># Note: values for li and for other_li are not modified.</span></span><br><span class="line">li + other_li  <span class="comment"># =&gt; [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Concatenate lists with &quot;extend()&quot;</span></span><br><span class="line">li.extend(other_li)  <span class="comment"># Now li is [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check for existence in a list with &quot;in&quot;</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> li  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Examine the length with &quot;len()&quot;</span></span><br><span class="line"><span class="built_in">len</span>(li)  <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Tuples are like lists but are immutable.</span></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">tup[<span class="number">0</span>]      <span class="comment"># =&gt; 1</span></span><br><span class="line">tup[<span class="number">0</span>] = <span class="number">3</span>  <span class="comment"># Raises a TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Note that a tuple of length one has to have a comma after the last element but</span></span><br><span class="line"><span class="comment"># tuples of other lengths, even zero, do not.</span></span><br><span class="line"><span class="built_in">type</span>((<span class="number">1</span>))   <span class="comment"># =&gt; &lt;class &#x27;int&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>((<span class="number">1</span>,))  <span class="comment"># =&gt; &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"><span class="built_in">type</span>(())    <span class="comment"># =&gt; &lt;class &#x27;tuple&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can do most of the list operations on tuples too</span></span><br><span class="line"><span class="built_in">len</span>(tup)         <span class="comment"># =&gt; 3</span></span><br><span class="line">tup + (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># =&gt; (1, 2, 3, 4, 5, 6)</span></span><br><span class="line">tup[:<span class="number">2</span>]          <span class="comment"># =&gt; (1, 2)</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> tup         <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can unpack tuples (or lists) into variables</span></span><br><span class="line">a, b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># a is now 1, b is now 2 and c is now 3</span></span><br><span class="line"><span class="comment"># You can also do extended unpacking</span></span><br><span class="line">a, *b, c = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)  <span class="comment"># a is now 1, b is now [2, 3] and c is now 4</span></span><br><span class="line"><span class="comment"># Tuples are created by default if you leave out the parentheses</span></span><br><span class="line">d, e, f = <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>  <span class="comment"># tuple 4, 5, 6 is unpacked into variables d, e and f</span></span><br><span class="line"><span class="comment"># respectively such that d = 4, e = 5 and f = 6</span></span><br><span class="line"><span class="comment"># Now look how easy it is to swap two values</span></span><br><span class="line">e, d = d, e  <span class="comment"># d is now 5 and e is now 4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Dictionaries store mappings from keys to values</span></span><br><span class="line">empty_dict = &#123;&#125;</span><br><span class="line"><span class="comment"># Here is a prefilled dictionary</span></span><br><span class="line">filled_dict = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Note keys for dictionaries have to be immutable types. This is to ensure that</span></span><br><span class="line"><span class="comment"># the key can be converted to a constant hash value for quick look-ups.</span></span><br><span class="line"><span class="comment"># Immutable types include ints, floats, strings, tuples.</span></span><br><span class="line">invalid_dict = &#123;[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]: <span class="string">&quot;123&quot;</span>&#125;  <span class="comment"># =&gt; Raises a TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">valid_dict = &#123;(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>):[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]&#125;   <span class="comment"># Values can be of any type, however.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Look up values with []</span></span><br><span class="line">filled_dict[<span class="string">&quot;one&quot;</span>]  <span class="comment"># =&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all keys as an iterable with &quot;keys()&quot;. We need to wrap the call in list()</span></span><br><span class="line"><span class="comment"># to turn it into a list. We&#x27;ll talk about those later.  Note - for Python</span></span><br><span class="line"><span class="comment"># versions &lt;3.7, dictionary key ordering is not guaranteed. Your results might</span></span><br><span class="line"><span class="comment"># not match the example below exactly. However, as of Python 3.7, dictionary</span></span><br><span class="line"><span class="comment"># items maintain the order at which they are inserted into the dictionary.</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())  <span class="comment"># =&gt; [&quot;three&quot;, &quot;two&quot;, &quot;one&quot;] in Python &lt;3.7</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.keys())  <span class="comment"># =&gt; [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;] in Python 3.7+</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all values as an iterable with &quot;values()&quot;. Once again we need to wrap it</span></span><br><span class="line"><span class="comment"># in list() to get it out of the iterable. Note - Same as above regarding key</span></span><br><span class="line"><span class="comment"># ordering.</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.values())  <span class="comment"># =&gt; [3, 2, 1]  in Python &lt;3.7</span></span><br><span class="line"><span class="built_in">list</span>(filled_dict.values())  <span class="comment"># =&gt; [1, 2, 3] in Python 3.7+</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check for existence of keys in a dictionary with &quot;in&quot;</span></span><br><span class="line"><span class="string">&quot;one&quot;</span> <span class="keyword">in</span> filled_dict  <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">1</span> <span class="keyword">in</span> filled_dict      <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Looking up a non-existing key is a KeyError</span></span><br><span class="line">filled_dict[<span class="string">&quot;four&quot;</span>]  <span class="comment"># KeyError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use &quot;get()&quot; method to avoid the KeyError</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;one&quot;</span>)      <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;four&quot;</span>)     <span class="comment"># =&gt; None</span></span><br><span class="line"><span class="comment"># The get method supports a default argument when the value is missing</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;one&quot;</span>, <span class="number">4</span>)   <span class="comment"># =&gt; 1</span></span><br><span class="line">filled_dict.get(<span class="string">&quot;four&quot;</span>, <span class="number">4</span>)  <span class="comment"># =&gt; 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># &quot;setdefault()&quot; inserts into a dictionary only if the given key isn&#x27;t present</span></span><br><span class="line">filled_dict.setdefault(<span class="string">&quot;five&quot;</span>, <span class="number">5</span>)  <span class="comment"># filled_dict[&quot;five&quot;] is set to 5</span></span><br><span class="line">filled_dict.setdefault(<span class="string">&quot;five&quot;</span>, <span class="number">6</span>)  <span class="comment"># filled_dict[&quot;five&quot;] is still 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Adding to a dictionary</span></span><br><span class="line">filled_dict.update(&#123;<span class="string">&quot;four&quot;</span>:<span class="number">4</span>&#125;)  <span class="comment"># =&gt; &#123;&quot;one&quot;: 1, &quot;two&quot;: 2, &quot;three&quot;: 3, &quot;four&quot;: 4&#125;</span></span><br><span class="line">filled_dict[<span class="string">&quot;four&quot;</span>] = <span class="number">4</span>         <span class="comment"># another way to add to dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Remove keys from a dictionary with del</span></span><br><span class="line"><span class="keyword">del</span> filled_dict[<span class="string">&quot;one&quot;</span>]  <span class="comment"># Removes the key &quot;one&quot; from filled dict</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># From Python 3.5 you can also use the additional unpacking options</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, **&#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;&#125;  <span class="comment"># =&gt; &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2&#125;</span></span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, **&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">2</span>&#125;&#125;  <span class="comment"># =&gt; &#123;&#x27;a&#x27;: 2&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sets store ... well sets</span></span><br><span class="line">empty_set = <span class="built_in">set</span>()</span><br><span class="line"><span class="comment"># Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.</span></span><br><span class="line">some_set = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;  <span class="comment"># some_set is now &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Similar to keys of a dictionary, elements of a set have to be immutable.</span></span><br><span class="line">invalid_set = &#123;[<span class="number">1</span>], <span class="number">1</span>&#125;  <span class="comment"># =&gt; Raises a TypeError: unhashable type: &#x27;list&#x27;</span></span><br><span class="line">valid_set = &#123;(<span class="number">1</span>,), <span class="number">1</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add one more item to the set</span></span><br><span class="line">filled_set = some_set</span><br><span class="line">filled_set.add(<span class="number">5</span>)  <span class="comment"># filled_set is now &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="comment"># Sets do not have duplicate elements</span></span><br><span class="line">filled_set.add(<span class="number">5</span>)  <span class="comment"># it remains as before &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do set intersection with &amp;</span></span><br><span class="line">other_set = &#123;<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;</span><br><span class="line">filled_set &amp; other_set  <span class="comment"># =&gt; &#123;3, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do set union with |</span></span><br><span class="line">filled_set | other_set  <span class="comment"># =&gt; &#123;1, 2, 3, 4, 5, 6&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do set difference with -</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; - &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;  <span class="comment"># =&gt; &#123;1, 4&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Do set symmetric difference with ^</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125; ^ &#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>&#125;  <span class="comment"># =&gt; &#123;1, 4, 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if set on the left is a superset of set on the right</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &gt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check if set on the left is a subset of set on the right</span></span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>&#125; &lt;= &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125; <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check for existence in a set with in</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">in</span> filled_set   <span class="comment"># =&gt; True</span></span><br><span class="line"><span class="number">10</span> <span class="keyword">in</span> filled_set  <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Make a one layer deep copy</span></span><br><span class="line">filled_set = some_set.copy()  <span class="comment"># filled_set is &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">filled_set <span class="keyword">is</span> some_set        <span class="comment"># =&gt; False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 3. Control Flow and Iterables</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Let&#x27;s just make a variable</span></span><br><span class="line">some_var = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Here is an if statement. Indentation is significant in Python!</span></span><br><span class="line"><span class="comment"># Convention is to use four spaces, not tabs.</span></span><br><span class="line"><span class="comment"># This prints &quot;some_var is smaller than 10&quot;</span></span><br><span class="line"><span class="keyword">if</span> some_var &gt; <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some_var is totally bigger than 10.&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> some_var &lt; <span class="number">10</span>:    <span class="comment"># This elif clause is optional.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some_var is smaller than 10.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:                  <span class="comment"># This is optional too.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;some_var is indeed 10.&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">For loops iterate over lists</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    dog is a mammal</span></span><br><span class="line"><span class="string">    cat is a mammal</span></span><br><span class="line"><span class="string">    mouse is a mammal</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> animal <span class="keyword">in</span> [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>]:</span><br><span class="line">    <span class="comment"># You can use format() to interpolate formatted strings</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; is a mammal&quot;</span>.<span class="built_in">format</span>(animal))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(number)&quot; returns an iterable of numbers</span></span><br><span class="line"><span class="string">from zero to the given number</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(lower, upper)&quot; returns an iterable of numbers</span></span><br><span class="line"><span class="string">from the lower number to the upper number</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    5</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">    7</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">&quot;range(lower, upper, step)&quot; returns an iterable of numbers</span></span><br><span class="line"><span class="string">from the lower number to the upper number, while incrementing</span></span><br><span class="line"><span class="string">by step. If step is not indicated, the default value is 1.</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    4</span></span><br><span class="line"><span class="string">    6</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>, <span class="number">8</span>, <span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">To loop over a list, and retrieve both the index and the value of each item in the list</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    0 dog</span></span><br><span class="line"><span class="string">    1 cat</span></span><br><span class="line"><span class="string">    2 mouse</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">animals = [<span class="string">&quot;dog&quot;</span>, <span class="string">&quot;cat&quot;</span>, <span class="string">&quot;mouse&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> i, value <span class="keyword">in</span> <span class="built_in">enumerate</span>(animals):</span><br><span class="line">    <span class="built_in">print</span>(i, value)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">While loops go until a condition is no longer met.</span></span><br><span class="line"><span class="string">prints:</span></span><br><span class="line"><span class="string">    0</span></span><br><span class="line"><span class="string">    1</span></span><br><span class="line"><span class="string">    2</span></span><br><span class="line"><span class="string">    3</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> x &lt; <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x += <span class="number">1</span>  <span class="comment"># Shorthand for x = x + 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Handle exceptions with a try/except block</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># Use &quot;raise&quot; to raise an error</span></span><br><span class="line">    <span class="keyword">raise</span> IndexError(<span class="string">&quot;This is an index error&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span>                 <span class="comment"># Pass is just a no-op. Usually you would do recovery here.</span></span><br><span class="line"><span class="keyword">except</span> (TypeError, NameError):</span><br><span class="line">    <span class="keyword">pass</span>                 <span class="comment"># Multiple exceptions can be handled together, if required.</span></span><br><span class="line"><span class="keyword">else</span>:                    <span class="comment"># Optional clause to the try/except block. Must follow all except blocks</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;All good!&quot;</span>)   <span class="comment"># Runs only if the code in try raises no exceptions</span></span><br><span class="line"><span class="keyword">finally</span>:                 <span class="comment"># Execute under all circumstances</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;We can clean up resources here&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Instead of try/finally to cleanup resources you can use a with statement</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile.txt&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="built_in">print</span>(line)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing to a file</span></span><br><span class="line">contents = &#123;<span class="string">&quot;aa&quot;</span>: <span class="number">12</span>, <span class="string">&quot;bb&quot;</span>: <span class="number">21</span>&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile1.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(<span class="built_in">str</span>(contents))        <span class="comment"># writes a string to a file</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;myfile2.txt&quot;</span>, <span class="string">&quot;w+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(json.dumps(contents)) <span class="comment"># writes an object to a file</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading from a file</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myfile1.txt&#x27;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents = file.read()           <span class="comment"># reads a string from a file</span></span><br><span class="line"><span class="built_in">print</span>(contents)</span><br><span class="line"><span class="comment"># print: &#123;&quot;aa&quot;: 12, &quot;bb&quot;: 21&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;myfile2.txt&#x27;</span>, <span class="string">&quot;r+&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    contents = json.load(file)       <span class="comment"># reads a json object from a file</span></span><br><span class="line"><span class="built_in">print</span>(contents)</span><br><span class="line"><span class="comment"># print: &#123;&quot;aa&quot;: 12, &quot;bb&quot;: 21&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python offers a fundamental abstraction called the Iterable.</span></span><br><span class="line"><span class="comment"># An iterable is an object that can be treated as a sequence.</span></span><br><span class="line"><span class="comment"># The object returned by the range function, is an iterable.</span></span><br><span class="line"></span><br><span class="line">filled_dict = &#123;<span class="string">&quot;one&quot;</span>: <span class="number">1</span>, <span class="string">&quot;two&quot;</span>: <span class="number">2</span>, <span class="string">&quot;three&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line">our_iterable = filled_dict.keys()</span><br><span class="line"><span class="built_in">print</span>(our_iterable)  <span class="comment"># =&gt; dict_keys([&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;]). This is an object that implements our Iterable interface.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can loop over it.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> our_iterable:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># Prints one, two, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># However we cannot address elements by index.</span></span><br><span class="line">our_iterable[<span class="number">1</span>]  <span class="comment"># Raises a TypeError</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># An iterable is an object that knows how to create an iterator.</span></span><br><span class="line">our_iterator = <span class="built_in">iter</span>(our_iterable)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Our iterator is an object that can remember the state as we traverse through it.</span></span><br><span class="line"><span class="comment"># We get the next object with &quot;next()&quot;.</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># =&gt; &quot;one&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It maintains state as we iterate.</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># =&gt; &quot;two&quot;</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># =&gt; &quot;three&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># After the iterator has returned all of its data, it raises a StopIteration exception</span></span><br><span class="line"><span class="built_in">next</span>(our_iterator)  <span class="comment"># Raises StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can also loop over it, in fact, &quot;for&quot; does this implicitly!</span></span><br><span class="line">our_iterator = <span class="built_in">iter</span>(our_iterable)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> our_iterator:</span><br><span class="line">    <span class="built_in">print</span>(i)  <span class="comment"># Prints one, two, three</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can grab all the elements of an iterable or iterator by calling list() on it.</span></span><br><span class="line"><span class="built_in">list</span>(our_iterable)  <span class="comment"># =&gt; Returns [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br><span class="line"><span class="built_in">list</span>(our_iterator)  <span class="comment"># =&gt; Returns [] because state is saved</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 4. Functions</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Use &quot;def&quot; to create new functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;x is &#123;&#125; and y is &#123;&#125;&quot;</span>.<span class="built_in">format</span>(x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y  <span class="comment"># Return values with a return statement</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Calling functions with parameters</span></span><br><span class="line">add(<span class="number">5</span>, <span class="number">6</span>)  <span class="comment"># =&gt; prints out &quot;x is 5 and y is 6&quot; and returns 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another way to call functions is with keyword arguments</span></span><br><span class="line">add(y=<span class="number">6</span>, x=<span class="number">5</span>)  <span class="comment"># Keyword arguments can arrive in any order.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can define functions that take a variable number of</span></span><br><span class="line"><span class="comment"># positional arguments</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">varargs</span>(<span class="params">*args</span>):</span><br><span class="line">    <span class="keyword">return</span> args</span><br><span class="line"></span><br><span class="line">varargs(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># =&gt; (1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can define functions that take a variable number of</span></span><br><span class="line"><span class="comment"># keyword arguments, as well</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keyword_args</span>(<span class="params">**kwargs</span>):</span><br><span class="line">    <span class="keyword">return</span> kwargs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Let&#x27;s call it to see what happens</span></span><br><span class="line">keyword_args(big=<span class="string">&quot;foot&quot;</span>, loch=<span class="string">&quot;ness&quot;</span>)  <span class="comment"># =&gt; &#123;&quot;big&quot;: &quot;foot&quot;, &quot;loch&quot;: &quot;ness&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can do both at once, if you like</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">all_the_args</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">    <span class="built_in">print</span>(args)</span><br><span class="line">    <span class="built_in">print</span>(kwargs)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">all_the_args(1, 2, a=3, b=4) prints:</span></span><br><span class="line"><span class="string">    (1, 2)</span></span><br><span class="line"><span class="string">    &#123;&quot;a&quot;: 3, &quot;b&quot;: 4&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># When calling functions, you can do the opposite of args/kwargs!</span></span><br><span class="line"><span class="comment"># Use * to expand tuples and use ** to expand kwargs.</span></span><br><span class="line">args = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">kwargs = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">3</span>, <span class="string">&quot;b&quot;</span>: <span class="number">4</span>&#125;</span><br><span class="line">all_the_args(*args)            <span class="comment"># equivalent to all_the_args(1, 2, 3, 4)</span></span><br><span class="line">all_the_args(**kwargs)         <span class="comment"># equivalent to all_the_args(a=3, b=4)</span></span><br><span class="line">all_the_args(*args, **kwargs)  <span class="comment"># equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Returning multiple values (with tuple assignments)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">swap</span>(<span class="params">x, y</span>):</span><br><span class="line">    <span class="keyword">return</span> y, x  <span class="comment"># Return multiple values as a tuple without the parenthesis.</span></span><br><span class="line">                 <span class="comment"># (Note: parenthesis have been excluded but can be included)</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">y = <span class="number">2</span></span><br><span class="line">x, y = swap(x, y)     <span class="comment"># =&gt; x = 2, y = 1</span></span><br><span class="line"><span class="comment"># (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Function Scope</span></span><br><span class="line">x = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_x</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="comment"># Local var x not the same as global variable x</span></span><br><span class="line">    x = num    <span class="comment"># =&gt; 43</span></span><br><span class="line">    <span class="built_in">print</span>(x)   <span class="comment"># =&gt; 43</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_global_x</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">global</span> x</span><br><span class="line">    <span class="built_in">print</span>(x)   <span class="comment"># =&gt; 5</span></span><br><span class="line">    x = num    <span class="comment"># global var x is now set to 6</span></span><br><span class="line">    <span class="built_in">print</span>(x)   <span class="comment"># =&gt; 6</span></span><br><span class="line"></span><br><span class="line">set_x(<span class="number">43</span>)</span><br><span class="line">set_global_x(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python has first class functions</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">create_adder</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">adder</span>(<span class="params">y</span>):</span><br><span class="line">        <span class="keyword">return</span> x + y</span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line"></span><br><span class="line">add_10 = create_adder(<span class="number">10</span>)</span><br><span class="line">add_10(<span class="number">3</span>)   <span class="comment"># =&gt; 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There are also anonymous functions</span></span><br><span class="line">(<span class="keyword">lambda</span> x: x &gt; <span class="number">2</span>)(<span class="number">3</span>)                  <span class="comment"># =&gt; True</span></span><br><span class="line">(<span class="keyword">lambda</span> x, y: x ** <span class="number">2</span> + y ** <span class="number">2</span>)(<span class="number">2</span>, <span class="number">1</span>)  <span class="comment"># =&gt; 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># There are built-in higher order functions</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(add_10, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]))          <span class="comment"># =&gt; [11, 12, 13]</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">max</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>]))  <span class="comment"># =&gt; [4, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x &gt; <span class="number">5</span>, [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]))  <span class="comment"># =&gt; [6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We can use list comprehensions for nice maps and filters</span></span><br><span class="line"><span class="comment"># List comprehension stores the output as a list which can itself be a nested list</span></span><br><span class="line">[add_10(i) <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]]         <span class="comment"># =&gt; [11, 12, 13]</span></span><br><span class="line">[x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>] <span class="keyword">if</span> x &gt; <span class="number">5</span>]  <span class="comment"># =&gt; [6, 7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can construct set and dict comprehensions as well.</span></span><br><span class="line">&#123;x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;abcddeef&#x27;</span> <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> <span class="string">&#x27;abc&#x27;</span>&#125;  <span class="comment"># =&gt; &#123;&#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;&#125;</span></span><br><span class="line">&#123;x: x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)&#125;  <span class="comment"># =&gt; &#123;0: 0, 1: 1, 2: 4, 3: 9, 4: 16&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 5. Modules</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can import modules</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">16</span>))  <span class="comment"># =&gt; 4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can get specific functions from a module</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> ceil, floor</span><br><span class="line"><span class="built_in">print</span>(ceil(<span class="number">3.7</span>))   <span class="comment"># =&gt; 4.0</span></span><br><span class="line"><span class="built_in">print</span>(floor(<span class="number">3.7</span>))  <span class="comment"># =&gt; 3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can import all functions from a module.</span></span><br><span class="line"><span class="comment"># Warning: this is not recommended</span></span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can shorten module names</span></span><br><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> m</span><br><span class="line">math.sqrt(<span class="number">16</span>) == m.sqrt(<span class="number">16</span>)  <span class="comment"># =&gt; True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Python modules are just ordinary Python files. You</span></span><br><span class="line"><span class="comment"># can write your own, and import them. The name of the</span></span><br><span class="line"><span class="comment"># module is the same as the name of the file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can find out which functions and attributes</span></span><br><span class="line"><span class="comment"># are defined in a module.</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">dir</span>(math)</span><br><span class="line"></span><br><span class="line"><span class="comment"># If you have a Python script named math.py in the same</span></span><br><span class="line"><span class="comment"># folder as your current script, the file math.py will</span></span><br><span class="line"><span class="comment"># be loaded instead of the built-in Python module.</span></span><br><span class="line"><span class="comment"># This happens because the local folder has priority</span></span><br><span class="line"><span class="comment"># over Python&#x27;s built-in libraries.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6. Classes</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># We use the &quot;class&quot; statement to create a class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># A class attribute. It is shared by all instances of this class</span></span><br><span class="line">    species = <span class="string">&quot;H. sapiens&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Basic initializer, this is called when this class is instantiated.</span></span><br><span class="line">    <span class="comment"># Note that the double leading and trailing underscores denote objects</span></span><br><span class="line">    <span class="comment"># or attributes that are used by Python but that live in user-controlled</span></span><br><span class="line">    <span class="comment"># namespaces. Methods(or objects or attributes) like: __init__, __str__,</span></span><br><span class="line">    <span class="comment"># __repr__ etc. are called special methods (or sometimes called dunder methods)</span></span><br><span class="line">    <span class="comment"># You should not invent such names on your own.</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="comment"># Assign the argument to the instance&#x27;s name attribute</span></span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Initialize property</span></span><br><span class="line">        <span class="variable language_">self</span>._age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># An instance method. All methods take &quot;self&quot; as the first argument</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self, msg</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;&#123;name&#125;: &#123;message&#125;&quot;</span>.<span class="built_in">format</span>(name=<span class="variable language_">self</span>.name, message=msg))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Another instance method</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;yo... yo... microphone check... one two... one two...&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># A class method is shared among all instances</span></span><br><span class="line">    <span class="comment"># They are called with the calling class as the first argument</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_species</span>(<span class="params">cls</span>):</span><br><span class="line">        <span class="keyword">return</span> cls.species</span><br><span class="line"></span><br><span class="line">    <span class="comment"># A static method is called without a class or instance reference</span></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">grunt</span>():</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># A property is just like a getter.</span></span><br><span class="line">    <span class="comment"># It turns the method age() into a read-only attribute of the same name.</span></span><br><span class="line">    <span class="comment"># There&#x27;s no need to write trivial getters and setters in Python, though.</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This allows the property to be set</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self, age</span>):</span><br><span class="line">        <span class="variable language_">self</span>._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This allows the property to be deleted</span></span><br><span class="line"><span class="meta">    @age.deleter</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">age</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">del</span> <span class="variable language_">self</span>._age</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># When a Python interpreter reads a source file it executes all its code.</span></span><br><span class="line"><span class="comment"># This __name__ check makes sure this code block is only executed when this</span></span><br><span class="line"><span class="comment"># module is the main program.</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># Instantiate a class</span></span><br><span class="line">    i = Human(name=<span class="string">&quot;Ian&quot;</span>)</span><br><span class="line">    i.say(<span class="string">&quot;hi&quot;</span>)                     <span class="comment"># &quot;Ian: hi&quot;</span></span><br><span class="line">    j = Human(<span class="string">&quot;Joel&quot;</span>)</span><br><span class="line">    j.say(<span class="string">&quot;hello&quot;</span>)                  <span class="comment"># &quot;Joel: hello&quot;</span></span><br><span class="line">    <span class="comment"># i and j are instances of type Human, or in other words: they are Human objects</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call our class method</span></span><br><span class="line">    i.say(i.get_species())          <span class="comment"># &quot;Ian: H. sapiens&quot;</span></span><br><span class="line">    <span class="comment"># Change the shared attribute</span></span><br><span class="line">    Human.species = <span class="string">&quot;H. neanderthalensis&quot;</span></span><br><span class="line">    i.say(i.get_species())          <span class="comment"># =&gt; &quot;Ian: H. neanderthalensis&quot;</span></span><br><span class="line">    j.say(j.get_species())          <span class="comment"># =&gt; &quot;Joel: H. neanderthalensis&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call the static method</span></span><br><span class="line">    <span class="built_in">print</span>(Human.grunt())            <span class="comment"># =&gt; &quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Static methods can be called by instances too</span></span><br><span class="line">    <span class="built_in">print</span>(i.grunt())                <span class="comment"># =&gt; &quot;*grunt*&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Update the property for this instance</span></span><br><span class="line">    i.age = <span class="number">42</span></span><br><span class="line">    <span class="comment"># Get the property</span></span><br><span class="line">    i.say(i.age)                    <span class="comment"># =&gt; &quot;Ian: 42&quot;</span></span><br><span class="line">    j.say(j.age)                    <span class="comment"># =&gt; &quot;Joel: 0&quot;</span></span><br><span class="line">    <span class="comment"># Delete the property</span></span><br><span class="line">    <span class="keyword">del</span> i.age</span><br><span class="line">    <span class="comment"># i.age                         # =&gt; this would raise an AttributeError</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6.1 Inheritance</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Inheritance allows new child classes to be defined that inherit methods and</span></span><br><span class="line"><span class="comment"># variables from their parent class.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Using the Human class defined above as the base or parent class, we can</span></span><br><span class="line"><span class="comment"># define a child class, Superhero, which inherits the class variables like</span></span><br><span class="line"><span class="comment"># &quot;species&quot;, &quot;name&quot;, and &quot;age&quot;, as well as methods, like &quot;sing&quot; and &quot;grunt&quot;</span></span><br><span class="line"><span class="comment"># from the Human class, but can also have its own unique properties.</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To take advantage of modularization by file you could place the classes above in their own files,</span></span><br><span class="line"><span class="comment"># say, human.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># To import functions from other files use the following format</span></span><br><span class="line"><span class="comment"># from &quot;filename-without-extension&quot; import &quot;function-or-class&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> human <span class="keyword">import</span> Human</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the parent class(es) as parameters to the class definition</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Superhero</span>(<span class="title class_ inherited__">Human</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># If the child class should inherit all of the parent&#x27;s definitions without</span></span><br><span class="line">    <span class="comment"># any modifications, you can just use the &quot;pass&quot; keyword (and nothing else)</span></span><br><span class="line">    <span class="comment"># but in this case it is commented out to allow for a unique child class:</span></span><br><span class="line">    <span class="comment"># pass</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Child classes can override their parents&#x27; attributes</span></span><br><span class="line">    species = <span class="string">&#x27;Superhuman&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Children automatically inherit their parent class&#x27;s constructor including</span></span><br><span class="line">    <span class="comment"># its arguments, but can also define additional arguments or definitions</span></span><br><span class="line">    <span class="comment"># and override its methods such as the class constructor.</span></span><br><span class="line">    <span class="comment"># This constructor inherits the &quot;name&quot; argument from the &quot;Human&quot; class and</span></span><br><span class="line">    <span class="comment"># adds the &quot;superpower&quot; and &quot;movie&quot; arguments:</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, movie=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                 superpowers=[<span class="string">&quot;super strength&quot;</span>, <span class="string">&quot;bulletproofing&quot;</span>]</span>):</span><br><span class="line"></span><br><span class="line">        <span class="comment"># add additional class attributes:</span></span><br><span class="line">        <span class="variable language_">self</span>.fictional = <span class="literal">True</span></span><br><span class="line">        <span class="variable language_">self</span>.movie = movie</span><br><span class="line">        <span class="comment"># be aware of mutable default values, since defaults are shared</span></span><br><span class="line">        <span class="variable language_">self</span>.superpowers = superpowers</span><br><span class="line"></span><br><span class="line">        <span class="comment"># The &quot;super&quot; function lets you access the parent class&#x27;s methods</span></span><br><span class="line">        <span class="comment"># that are overridden by the child, in this case, the __init__ method.</span></span><br><span class="line">        <span class="comment"># This calls the parent class constructor:</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># override the sing method</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Dun, dun, DUN!&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># add an additional instance method</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">boast</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> power <span class="keyword">in</span> <span class="variable language_">self</span>.superpowers:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;I wield the power of &#123;pow&#125;!&quot;</span>.<span class="built_in">format</span>(<span class="built_in">pow</span>=power))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sup = Superhero(name=<span class="string">&quot;Tick&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Instance type checks</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(sup, Human):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am human&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(sup) <span class="keyword">is</span> Superhero:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;I am a superhero&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the Method Resolution search Order used by both getattr() and super()</span></span><br><span class="line">    <span class="comment"># This attribute is dynamic and can be updated</span></span><br><span class="line">    <span class="built_in">print</span>(Superhero.__mro__)    <span class="comment"># =&gt; (&lt;class &#x27;__main__.Superhero&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;human.Human&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls parent method but uses its own class attribute</span></span><br><span class="line">    <span class="built_in">print</span>(sup.get_species())    <span class="comment"># =&gt; Superhuman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls overridden method</span></span><br><span class="line">    <span class="built_in">print</span>(sup.sing())           <span class="comment"># =&gt; Dun, dun, DUN!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls method from Human</span></span><br><span class="line">    sup.say(<span class="string">&#x27;Spoon&#x27;</span>)            <span class="comment"># =&gt; Tick: Spoon</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call method that exists only in Superhero</span></span><br><span class="line">    sup.boast()                 <span class="comment"># =&gt; I wield the power of super strength!</span></span><br><span class="line">                                <span class="comment"># =&gt; I wield the power of bulletproofing!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inherited class attribute</span></span><br><span class="line">    sup.age = <span class="number">31</span></span><br><span class="line">    <span class="built_in">print</span>(sup.age)              <span class="comment"># =&gt; 31</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Attribute that only exists within Superhero</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Am I Oscar eligible? &#x27;</span> + <span class="built_in">str</span>(sup.movie))</span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 6.2 Multiple Inheritance</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Another class definition</span></span><br><span class="line"><span class="comment"># bat.py</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bat</span>:</span><br><span class="line"></span><br><span class="line">    species = <span class="string">&#x27;Baty&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, can_fly=<span class="literal">True</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.fly = can_fly</span><br><span class="line"></span><br><span class="line">    <span class="comment"># This class also has a say method</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">self, msg</span>):</span><br><span class="line">        msg = <span class="string">&#x27;... ... ...&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="comment"># And its own method as well</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sonar</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;))) ... (((&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    b = Bat()</span><br><span class="line">    <span class="built_in">print</span>(b.say(<span class="string">&#x27;hello&#x27;</span>))</span><br><span class="line">    <span class="built_in">print</span>(b.fly)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># And yet another class definition that inherits from Superhero and Bat</span></span><br><span class="line"><span class="comment"># superhero.py</span></span><br><span class="line"><span class="keyword">from</span> superhero <span class="keyword">import</span> Superhero</span><br><span class="line"><span class="keyword">from</span> bat <span class="keyword">import</span> Bat</span><br><span class="line"></span><br><span class="line"><span class="comment"># Define Batman as a child that inherits from both Superhero and Bat</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Batman</span>(Superhero, Bat):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, *args, **kwargs</span>):</span><br><span class="line">        <span class="comment"># Typically to inherit attributes you have to call super:</span></span><br><span class="line">        <span class="comment"># super(Batman, self).__init__(*args, **kwargs)</span></span><br><span class="line">        <span class="comment"># However we are dealing with multiple inheritance here, and super()</span></span><br><span class="line">        <span class="comment"># only works with the next base class in the MRO list.</span></span><br><span class="line">        <span class="comment"># So instead we explicitly call __init__ for all ancestors.</span></span><br><span class="line">        <span class="comment"># The use of *args and **kwargs allows for a clean way to pass arguments,</span></span><br><span class="line">        <span class="comment"># with each parent &quot;peeling a layer of the onion&quot;.</span></span><br><span class="line">        Superhero.__init__(<span class="variable language_">self</span>, <span class="string">&#x27;anonymous&#x27;</span>, movie=<span class="literal">True</span>,</span><br><span class="line">                           superpowers=[<span class="string">&#x27;Wealthy&#x27;</span>], *args, **kwargs)</span><br><span class="line">        Bat.__init__(<span class="variable language_">self</span>, *args, can_fly=<span class="literal">False</span>, **kwargs)</span><br><span class="line">        <span class="comment"># override the value for the name attribute</span></span><br><span class="line">        <span class="variable language_">self</span>.name = <span class="string">&#x27;Sad Affleck&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sing</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;nan nan nan nan nan batman!&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sup = Batman()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Get the Method Resolution search Order used by both getattr() and super().</span></span><br><span class="line">    <span class="comment"># This attribute is dynamic and can be updated</span></span><br><span class="line">    <span class="built_in">print</span>(Batman.__mro__)       <span class="comment"># =&gt; (&lt;class &#x27;__main__.Batman&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;superhero.Superhero&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;human.Human&#x27;&gt;,</span></span><br><span class="line">                                <span class="comment"># =&gt; &lt;class &#x27;bat.Bat&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls parent method but uses its own class attribute</span></span><br><span class="line">    <span class="built_in">print</span>(sup.get_species())    <span class="comment"># =&gt; Superhuman</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls overridden method</span></span><br><span class="line">    <span class="built_in">print</span>(sup.sing())           <span class="comment"># =&gt; nan nan nan nan nan batman!</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Calls method from Human, because inheritance order matters</span></span><br><span class="line">    sup.say(<span class="string">&#x27;I agree&#x27;</span>)          <span class="comment"># =&gt; Sad Affleck: I agree</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Call method that exists only in 2nd ancestor</span></span><br><span class="line">    <span class="built_in">print</span>(sup.sonar())          <span class="comment"># =&gt; ))) ... (((</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inherited class attribute</span></span><br><span class="line">    sup.age = <span class="number">100</span></span><br><span class="line">    <span class="built_in">print</span>(sup.age)              <span class="comment"># =&gt; 100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Inherited attribute from 2nd ancestor whose default value was overridden.</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Can I fly? &#x27;</span> + <span class="built_in">str</span>(sup.fly)) <span class="comment"># =&gt; Can I fly? False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"><span class="comment">## 7. Advanced</span></span><br><span class="line"><span class="comment">####################################################</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Generators help you make lazy code.</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">double_numbers</span>(<span class="params">iterable</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">yield</span> i + i</span><br><span class="line"></span><br><span class="line"><span class="comment"># Generators are memory-efficient because they only load the data needed to</span></span><br><span class="line"><span class="comment"># process the next value in the iterable. This allows them to perform</span></span><br><span class="line"><span class="comment"># operations on otherwise prohibitively large value ranges.</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> `range` replaces `xrange` in Python 3.</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> double_numbers(<span class="built_in">range</span>(<span class="number">1</span>, <span class="number">900000000</span>)):  <span class="comment"># `range` is a generator.</span></span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">30</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Just as you can create a list comprehension, you can create generator</span></span><br><span class="line"><span class="comment"># comprehensions as well.</span></span><br><span class="line">values = (-x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> values:</span><br><span class="line">    <span class="built_in">print</span>(x)  <span class="comment"># prints -1 -2 -3 -4 -5 to console/terminal</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># You can also cast a generator comprehension directly to a list.</span></span><br><span class="line">values = (-x <span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">gen_to_list = <span class="built_in">list</span>(values)</span><br><span class="line"><span class="built_in">print</span>(gen_to_list)  <span class="comment"># =&gt; [-1, -2, -3, -4, -5]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Decorators</span></span><br><span class="line"><span class="comment"># In this example `beg` wraps `say`. If say_please is True then it</span></span><br><span class="line"><span class="comment"># will change the returned message.</span></span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">beg</span>(<span class="params">target_function</span>):</span><br><span class="line"><span class="meta">    @wraps(<span class="params">target_function</span>)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrapper</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        msg, say_please = target_function(*args, **kwargs)</span><br><span class="line">        <span class="keyword">if</span> say_please:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(msg, <span class="string">&quot;Please! I am poor :(&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> msg</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@beg</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">say</span>(<span class="params">say_please=<span class="literal">False</span></span>):</span><br><span class="line">    msg = <span class="string">&quot;Can you buy me a beer?&quot;</span></span><br><span class="line">    <span class="keyword">return</span> msg, say_please</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(say())                 <span class="comment"># Can you buy me a beer?</span></span><br><span class="line"><span class="built_in">print</span>(say(say_please=<span class="literal">True</span>))  <span class="comment"># Can you buy me a beer? Please! I am poor :(</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编辑器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> PyCharm </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
